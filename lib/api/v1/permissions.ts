/*
 * ELASTICSEARCH CONFIDENTIAL
 * __________________
 *
 *  Copyright Elasticsearch B.V. All rights reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Elasticsearch B.V. and its suppliers, if any.
 * The intellectual and technical concepts contained herein
 * are proprietary to Elasticsearch B.V. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in
 * process, and are protected by trade secret or copyright
 * law.  Dissemination of this information or reproduction of
 * this material is strictly forbidden unless prior written
 * permission is obtained from Elasticsearch B.V.
 */

/*!
 *!   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *!   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *!   @@@                                         @@@@
 *!   @@@   THIS FILE WAS AUTOGENERATED BY TOOL   @@@@
 *!   @@@   CHANGES MUST TARGET SCRIPTS/SWAGGER   @@@@
 *!   @@@                                         @@@@
 *!   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *!   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *!
 */

enum Permission {
  /** Activates an enrolled MFA device for the current user. */
  activateSaasCurrentUserMfaDevice = 'activate-saas-current-user-mfa-device',

  /** Activates an enrolled MFA device for a user. */
  activateSaasUserMfaDevice = 'activate-saas-user-mfa-device',

  /** Adds a blacklisted upgrade version-from matcher to multiple version-to matchers. If the provided version-from matcher already has existing version-to matchers, this is appended. If it does not, a new list is started. */
  addBlacklistedUpgrade = 'add-blacklisted-upgrade',

  /** Adds a blacklisted upgrade version matcher pair. If the provided version-from matcher already has existing version-to matchers, this is appeneded. If it does not, a new list is started. */
  addBlacklistedUpgradePair = 'add-blacklisted-upgrade-pair',

  /** Add a Blessing for a runner to a role. */
  addBlueprinterBlessing = 'add-blueprinter-blessing',

  /** Post external user verify-email event. */
  addSaasExternalUserEvent = 'add-saas-external-user-event',

  /** Adds a whitelisted version to Access Management. */
  addWhitelistedVersion = 'add-whitelisted-version',

  /** DEPRECATED (Scheduled to be removed in the next major version): Cancels the pending plan of an APM cluster. */
  cancelApmPendingPlan = 'cancel-apm-pending-plan',

  /** Cancels the pending plan of a Resource belonging to a given Deployment. */
  cancelDeploymentResourcePendingPlan = 'cancel-deployment-resource-pending-plan',

  /** DEPRECATED (Scheduled to be removed in the next major version): Deletes all monitoring destinations for the Elasticsearch cluster. */
  cancelEsClusterMonitoring = 'cancel-es-cluster-monitoring',

  /** DEPRECATED (Scheduled to be removed in the next major version): Cancels the pending plan of the Elasticsearch cluster. */
  cancelEsClusterPendingPlan = 'cancel-es-cluster-pending-plan',

  /** DEPRECATED (Scheduled to be removed in the next major version): Cancels the pending plan of the Kibana instance. */
  cancelKibanaClusterPendingPlan = 'cancel-kibana-cluster-pending-plan',

  /** Captures a new on-demand heap dump for the given instance. The capture is completed asynchronously, and you can check its progress by getting heap dumps for the given resource. */
  captureDeploymentInstanceHeapDump = 'capture-deployment-instance-heap-dump',

  /** For some MFA device types (such as SMS), an SMS message or push notification is sent to the device. This endpoint requires the state_id input field to be set. */
  challengeSaasCurrentUserMfaDevice = 'challenge-saas-current-user-mfa-device',

  /** Creates a new Active Directory configuration.  */
  createActiveDirectoryConfiguration = 'create-active-directory-configuration',

  /** Creates a new API key. */
  createApiKey = 'create-api-key',

  /** DEPRECATED (Scheduled to be removed in the next major version): Creates an APM cluster for a given Elasticsearch cluster. */
  createApm = 'create-apm',

  /** Inserts new AWS S3 Account Credentials. */
  createAwsS3AccountCredentials = 'create-aws-s3-account-credentials',

  /** Create a Blueprinter role. */
  createBlueprinterRole = 'create-blueprinter-role',

  /** Creates a comment for the given Resource. */
  createComment = 'create-comment',

  /** Inserts new Config Store Option. */
  createConfigStoreOption = 'create-config-store-option',

  /** Creates a new container. */
  createContainer = 'create-container',

  /** Creates a new container set, with optional id. */
  createContainerSet = 'create-container-set',

  /** Creates a Deployment. */
  createDeployment = 'create-deployment',

  /** Create note for the running deployment. */
  createDeploymentNote = 'create-deployment-note',

  /** Creates a deployment template. */
  createDeploymentTemplate = 'create-deployment-template',

  /** Creates a deployment template. */
  createDeploymentTemplateV2 = 'create-deployment-template-v2',

  /** Creates an enrollment token. */
  createEnrollmentToken = 'create-enrollment-token',

  /** DEPRECATED (Scheduled to be removed in the next major version): Creates an Elasticsearch cluster. */
  createEsCluster = 'create-es-cluster',

  /** Creates the extension.  The extensions API supports two types of usage patterns.  A). Specify a `download_url`, http or https URL,  where the extension is currently hosted. This will result in extension being copied to elastic repository.  B). Create only the extension metadata using the `POST` endpoint and then use `PUT` to upload the extension file. Leave the `download_url` unspecified in this case.  */
  createExtension = 'create-extension',

  /** Create instance configuration and return the auto-generated ID. */
  createInstanceConfiguration = 'create-instance-configuration',

  /** DEPRECATED: Creates a ruleset that combines a set of rules. Deprecated in favor of traffic-filter endpoints. */
  createIpFilterRuleset = 'create-ip-filter-ruleset',

  /** DEPRECATED: Applies the ruleset to the specified deployment. */
  createIpFilterRulesetAssociation = 'create-ip-filter-ruleset-association',

  /** DEPRECATED (Scheduled to be removed in the next major version): Creates a Kibana instance for the Elasticsearch cluster. */
  createKibanaCluster = 'create-kibana-cluster',

  /** Creates a new LDAP configuration. */
  createLdapConfiguration = 'create-ldap-configuration',

  /** Creates a new organization. */
  createOrganization = 'create-organization',

  /** Creates or refreshes an organization invitation. */
  createOrganizationInvitation = 'create-organization-invitation',

  /** Creates an organization membership. */
  createOrganizationMembership = 'create-organization-membership',

  /** Create the settings for a filtered group of proxies. */
  createProxiesFilteredGroup = 'create-proxies-filtered-group',

  /** Create SaaS user. */
  createSaasUser = 'create-saas-user',

  /** Create SaaS user. */
  createSaasUserAdmin = 'create-saas-user-admin',

  /** Creates a new SAML configuration. */
  createSamlConfiguration = 'create-saml-configuration',

  /** Creates a new security deployment configuration. */
  createSecurityDeployment = 'create-security-deployment',

  /** Creates a support case. */
  createSupportCase = 'create-support-case',

  /** Creates a ruleset that consists of a set of rules. */
  createTrafficFilterRuleset = 'create-traffic-filter-ruleset',

  /** Applies the ruleset to the specified deployment. */
  createTrafficFilterRulesetAssociation = 'create-traffic-filter-ruleset-association',

  /** Creates a trust relationship. */
  createTrustRelationship = 'create-trust-relationship',

  /** Creates a new user. */
  createUser = 'create-user',

  /** Inserts a new AccessManagement for stack versions. Overwrites existing data. */
  createVersionAccessManagement = 'create-version-access-management',

  /** Inserts a new AccessManagement for stack versions for a user. */
  createVersionUserAccessManagement = 'create-version-user-access-management',

  /** Deletes a single Active Directory configuration.  */
  deleteActiveDirectoryConfiguration = 'delete-active-directory-configuration',

  /** Reset the default logging settings for this adminconsole instance. */
  deleteAdminconsoleLoggingSettings = 'delete-adminconsole-logging-settings',

  /** Deletes the allocator. */
  deleteAllocator = 'delete-allocator',

  /** Reset the default logging settings for this allocator instance. */
  deleteAllocatorLoggingSettings = 'delete-allocator-logging-settings',

  /** Removes a single item from the allocator metadata. */
  deleteAllocatorMetadataItem = 'delete-allocator-metadata-item',

  /** Delete or invalidate the API key. */
  deleteApiKey = 'delete-api-key',

  /** Delete or invalidate API keys. */
  deleteApiKeys = 'delete-api-keys',

  /** DEPRECATED (Scheduled to be removed in the next major version): Deletes an APM cluster. Requires that you have already successfully issued `_shutdown` command against the cluster. */
  deleteApm = 'delete-apm',

  /** Delete Account Credentials by name. */
  deleteAwsS3AccountCredentials = 'delete-aws-s3-account-credentials',

  /** Delete a role. */
  deleteBlueprinterRole = 'delete-blueprinter-role',

  /** Deletes a Comment. */
  deleteComment = 'delete-comment',

  /** Delete Config Store Option by name. */
  deleteConfigStoreOption = 'delete-config-store-option',

  /** Reset the default logging settings for this constructor instance. */
  deleteConstructorLoggingSettings = 'delete-constructor-logging-settings',

  /** Deletes a container. */
  deleteContainer = 'delete-container',

  /** Deletes a container set. */
  deleteContainerSet = 'delete-container-set',

  /** Deletes a Deployment and all its resources. */
  deleteDeployment = 'delete-deployment',

  /** Delete note for the running deployment. */
  deleteDeploymentNote = 'delete-deployment-note',

  /** Delete Stateless Resource belonging to a given Deployment. Deployment must be shutdown already. */
  deleteDeploymentStatelessResource = 'delete-deployment-stateless-resource',

  /** Deletes a deployment template by id. */
  deleteDeploymentTemplate = 'delete-deployment-template',

  /** Deletes a deployment template by id. */
  deleteDeploymentTemplateV2 = 'delete-deployment-template-v2',

  /** Revokes and deletes the enrollment token. */
  deleteEnrollmentToken = 'delete-enrollment-token',

  /** DEPRECATED (Scheduled to be removed in the next major version): Deletes the Elasticsearch cluster. Before you delete the Elasticsearch cluster, you must first successfully issue a `_shutdown` command. */
  deleteEsCluster = 'delete-es-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP DELETE request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance. */
  deleteEsProxyRequests = 'delete-es-proxy-requests',

  /** Deletes a Extension. */
  deleteExtension = 'delete-extension',

  /** Delete an extra certificate. */
  deleteExtraCertificate = 'delete-extra-certificate',

  /** Delete the instance configuration with the given id. */
  deleteInstanceConfiguration = 'delete-instance-configuration',

  /** DEPRECATED: Deletes the ruleset by ID. Deprecated in favor of traffic-filter endpoints. */
  deleteIpFilterRuleset = 'delete-ip-filter-ruleset',

  /** DEPRECATED: Deletes the traffic rules in the ruleset from the deployment. */
  deleteIpFilterRulesetAssociation = 'delete-ip-filter-ruleset-association',

  /** DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP DELETE request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance. */
  deleteKibProxyRequests = 'delete-kib-proxy-requests',

  /** DEPRECATED (Scheduled to be removed in the next major version): Deletes the Kibana instance. Before you delete the Kibana instance, you must first successfully issue a `_shutdown` command. */
  deleteKibanaCluster = 'delete-kibana-cluster',

  /** Deletes a single LDAP configuration. */
  deleteLdapConfiguration = 'delete-ldap-configuration',

  /** Deletes the license. */
  deleteLicense = 'delete-license',

  /** Deletes an organization. */
  deleteOrganization = 'delete-organization',

  /** Deletes one or more organization invitations. */
  deleteOrganizationInvitations = 'delete-organization-invitations',

  /** Deletes one or more organization memberships. */
  deleteOrganizationMemberships = 'delete-organization-memberships',

  /** Deletes a filtered group of proxies by ID. */
  deleteProxiesFilteredGroup = 'delete-proxies-filtered-group',

  /** Deletes the resolved link ID based on connection name and ID. Doesn't delete the underlying Azure Private Link connection. */
  deleteResolvedLinkId = 'delete-resolved-link-id',

  /** Delete a runner by id. */
  deleteRunner = 'delete-runner',

  /** Reset the default logging settings for this runner instance. */
  deleteRunnerLoggingSettings = 'delete-runner-logging-settings',

  /** Deletes an enrolled MFA device for the current user. */
  deleteSaasCurrentUserMfaDevice = 'delete-saas-current-user-mfa-device',

  /** Remove email suppressions for given user and domain. */
  deleteSaasUserEmailSuppressions = 'delete-saas-user-email-suppressions',

  /** Deletes an enrolled MFA device for a user. */
  deleteSaasUserMfaDevice = 'delete-saas-user-mfa-device',

  /** Deletes a single SAML configuration. */
  deleteSamlConfiguration = 'delete-saml-configuration',

  /** Deletes the shared file: {shared_file} should be equal to an existing containerset's path, like '/container_sets/admin-consoles/shared/adminconsole.conf'. */
  deleteSharedFile = 'delete-shared-file',

  /** Deletes the snapshot repository configuration. */
  deleteSnapshotRepository = 'delete-snapshot-repository',

  /** Deletes the ruleset by ID. */
  deleteTrafficFilterRuleset = 'delete-traffic-filter-ruleset',

  /** Deletes the traffic rules in the ruleset from the deployment. */
  deleteTrafficFilterRulesetAssociation = 'delete-traffic-filter-ruleset-association',

  /** Deletes a trust relationship. */
  deleteTrustRelationship = 'delete-trust-relationship',

  /** Deletes an existing user. */
  deleteUser = 'delete-user',

  /** Delete or invalidate an API key for a user. */
  deleteUserApiKey = 'delete-user-api-key',

  /** Delete or invalidate all of the API keys for a user. */
  deleteUserApiKeys = 'delete-user-api-keys',

  /** Delete or invalidate the API keys for multiple users. */
  deleteUsersApiKeys = 'delete-users-api-keys',

  /** Uses the `deleted` flag, which removes only that version of the Elastic Stack from the list of available versions. To restore the version, send an update request. For more information, see the PUT request. */
  deleteVersionStack = 'delete-version-stack',

  /** Delete the AccessManagement for stack versions for a user. */
  deleteVersionUserAccessManagement = 'delete-version-user-access-management',

  /** Reset the token of an APM resource. */
  deploymentApmResetSecretToken = 'deployment-apm-reset-secret-token',

  /** Disables elevated permissions for the user. */
  disableElevatedPermissions = 'disable-elevated-permissions',

  /** DEPRECATED (Scheduled to be removed in the next major version): Disables the existing security deployment configuration. */
  disableSecurityDeployment = 'disable-security-deployment',

  /** Returns the given instance's heap dump for download. */
  downloadDeploymentInstanceHeapDump = 'download-deployment-instance-heap-dump',

  /** Migrates the specified Elasticsearch resource and its associated Kibana to enable CCR (if supported). */
  enableDeploymentResourceCcr = 'enable-deployment-resource-ccr',

  /** Migrates the specified Elasticsearch resource to use ILM. */
  enableDeploymentResourceIlm = 'enable-deployment-resource-ilm',

  /** Migrates the specified Elasticsearch resource to use SLM. */
  enableDeploymentResourceSlm = 'enable-deployment-resource-slm',

  /** Enables the elevated permissions for the current user. Elevated permissions allow the user to complete potentially destructive operations on clusters. Elevated permissions are available for a limited period of time and automatically expire if you do not renew them. */
  enableElevatedPermissions = 'enable-elevated-permissions',

  /** DEPRECATED (Scheduled to be removed in the next major version): Enables the existing security deployment configuration. */
  enableSecurityDeployment = 'enable-security-deployment',

  /** Enrolls a new MFA device for the current user. */
  enrollSaasCurrentUserMfaDevice = 'enroll-saas-current-user-mfa-device',

  /** Enrolls a new MFA device for a user. */
  enrollSaasUserMfaDevice = 'enroll-saas-user-mfa-device',

  /** Request a one-time trial extension. */
  extendTrial = 'extend-trial',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves a support diagnostic bundle from an active Elasticsearch cluster. To successfully retrieve a support diagnostic bundle, the cluster must be responsive. */
  generateEsClusterDiagnostics = 'generate-es-cluster-diagnostics',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the log file for the Elasticsearch cluster. */
  generateEsClusterLogs = 'generate-es-cluster-logs',

  /** Checks the health of the Accounter. */
  getAccounterHealth = 'get-accounter-health',

  /** Retrieves a single Active Directory security realm configuration.  */
  getActiveDirectoryConfiguration = 'get-active-directory-configuration',

  /** Retrieves the Adminconsole health. */
  getAdminconsoleHealth = 'get-adminconsole-health',

  /** Get the logging settings for this adminconsole instance. */
  getAdminconsoleLoggingSettings = 'get-adminconsole-logging-settings',

  /** Retrieves an overview of all adminconsoles. */
  getAdminconsoles = 'get-adminconsoles',

  /** Retrieves the allocator by the ID. */
  getAllocator = 'get-allocator',

  /** Get the logging settings for this allocator instance. */
  getAllocatorLoggingSettings = 'get-allocator-logging-settings',

  /** Retrieves the allocator metadata. */
  getAllocatorMetadata = 'get-allocator-metadata',

  /** Retrieves the allocator override settings. */
  getAllocatorSettings = 'get-allocator-settings',

  /** Retrieves the information for all of the allocators in the platform. */
  getAllocators = 'get-allocators',

  /** Gets the API base Url configuration value. */
  getApiBaseUrl = 'get-api-base-url',

  /** Retrieves the metadata for an API key. */
  getApiKey = 'get-api-key',

  /** Retrieves the metadata for all of the API keys that the user generated. */
  getApiKeys = 'get-api-keys',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster information for a APM cluster. */
  getApmCluster = 'get-apm-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the current and historical plan information for a APM cluster. */
  getApmClusterPlanActivity = 'get-apm-cluster-plan-activity',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster information for all APM clusters. */
  getApmClusters = 'get-apm-clusters',

  /** DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Retrieves the internal metadata, in free-form JSON, for the APM instance. */
  getApmMetadataRaw = 'get-apm-metadata-raw',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used. */
  getApmMetadataSettings = 'get-apm-metadata-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the pending plan of an APM cluster. */
  getApmPendingPlan = 'get-apm-pending-plan',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active plan of an APM cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint. */
  getApmPlan = 'get-apm-plan',

  /** Enable/Disable read-only mode on the given App Search resource. */
  getAppsearchReadOnlyMode = 'get-appsearch-read-only-mode',

  /** Provides authentication information about a user, including elevated permission status and TOTP device availability. */
  getAuthenticationInfo = 'get-authentication-info',

  /** Find Account Credentials by name. */
  getAwsS3AccountCredentials = 'get-aws-s3-account-credentials',

  /** Checks the health of the Biller. */
  getBillerHealth = 'get-biller-health',

  /** Retrieve a role. */
  getBlueprinterRole = 'get-blueprinter-role',

  /** Retrieves a Comment. */
  getComment = 'get-comment',

  /** Find Config Store Option by name. */
  getConfigStoreOption = 'get-config-store-option',

  /** Retrieves a constructor by id. */
  getConstructor = 'get-constructor',

  /** Get the logging settings for this constructor instance. */
  getConstructorLoggingSettings = 'get-constructor-logging-settings',

  /** Retrieves an overview of all constructors in an ECE installation. */
  getConstructors = 'get-constructors',

  /** Retrieves the line items of for the current organization. */
  getConsumptionLineItems = 'get-consumption-line-items',

  /** Retrieves a container by id. */
  getContainer = 'get-container',

  /** Retrieves a container set by id. */
  getContainerSet = 'get-container-set',

  /** Retrieves an overview of all container sets. */
  getContainerSets = 'get-container-sets',

  /** Lists containers by container-set id. */
  getContainers = 'get-containers',

  /** EXPERIMENTAL (it may change in future versions): Retrieves the costs associated with all deployments for the organization. */
  getCostsDeployments = 'get-costs-deployments',

  /** EXPERIMENTAL (it may change in future versions): Retrieves the itemized costs for the organization. */
  getCostsItems = 'get-costs-items',

  /** EXPERIMENTAL (it may change in future versions): Retrieves the itemized costs for the given deployment. */
  getCostsItemsByDeployment = 'get-costs-items-by-deployment',

  /** EXPERIMENTAL (it may change in future versions): Retrieves an overview of the costs by organization ID. */
  getCostsOverview = 'get-costs-overview',

  /** Fetch current account information. */
  getCurrentAccount = 'get-current-account',

  /** Fetch current user information. */
  getCurrentUser = 'get-current-user',

  /** Gets the default Deployment Domain Name configuration value. */
  getDefaultDeploymentDomainName = 'get-default-deployment-domain-name',

  /** Retrieves information about a Deployment. */
  getDeployment = 'get-deployment',

  /** Get info about an APM Resource belonging to a given Deployment. */
  getDeploymentApmResourceInfo = 'get-deployment-apm-resource-info',

  /** Get info about an App Search Resource belonging to a given Deployment. */
  getDeploymentAppsearchResourceInfo = 'get-deployment-appsearch-resource-info',

  /** Get info about an Enterprise Search Resource belonging to a given Deployment. */
  getDeploymentEnterpriseSearchResourceInfo = 'get-deployment-enterprise-search-resource-info',

  /** Returns the list of deployments which contain eligible remote clusters for the elasticsearch resource. */
  getDeploymentEsResourceEligibleRemoteClusters = 'get-deployment-es-resource-eligible-remote-clusters',

  /** Get info about an Elasticsearch Resource belonging to a given Deployment. */
  getDeploymentEsResourceInfo = 'get-deployment-es-resource-info',

  /** Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values. */
  getDeploymentEsResourceKeystore = 'get-deployment-es-resource-keystore',

  /** Returns the list of remote clusters for the elasticsearch resource. */
  getDeploymentEsResourceRemoteClusters = 'get-deployment-es-resource-remote-clusters',

  /** Gets details about existing heap dumps and in progress heap dump captures across all instances belonging to the deployment. */
  getDeploymentHeapDumps = 'get-deployment-heap-dumps',

  /** Get info about a Kibana Resource belonging to a given Deployment. */
  getDeploymentKibResourceInfo = 'get-deployment-kib-resource-info',

  /** Gets a deployment note. */
  getDeploymentNote = 'get-deployment-note',

  /** Get deployment notes. */
  getDeploymentNotes = 'get-deployment-notes',

  /** Retrieves a deployment template by id. */
  getDeploymentTemplate = 'get-deployment-template',

  /** Retrieves a deployment template by id. */
  getDeploymentTemplateV2 = 'get-deployment-template-v2',

  /** Retrieves all deployment templates. */
  getDeploymentTemplates = 'get-deployment-templates',

  /** Retrieves all deployment templates. */
  getDeploymentTemplatesV2 = 'get-deployment-templates-v2',

  /** Retrieves a list of active enrollment tokens. */
  getEnrollmentTokens = 'get-enrollment-tokens',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the Elasticsearch clusters that can selected as remotes in a given version. */
  getEsCcsEligibleRemotes = 'get-es-ccs-eligible-remotes',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the Elasticsearch cluster information. */
  getEsCluster = 'get-es-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): Returns the list of cross-cluster search clusters' IDs for the remote cluster. */
  getEsClusterCcs = 'get-es-cluster-ccs',

  /** DEPRECATED (Scheduled to be removed in the next major version): Returns cross-cluster search configuration for the Elasticsearch cluster. */
  getEsClusterCcsSettings = 'get-es-cluster-ccs-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster curation settings for an Elasticsearch cluster. */
  getEsClusterCurationSettings = 'get-es-cluster-curation-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Returns the available keys in the keystore. */
  getEsClusterKeystore = 'get-es-cluster-keystore',

  /** DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Retrieves the internal cluster metadata, in free-form JSON, for the Elasticsearch cluster. */
  getEsClusterMetadataRaw = 'get-es-cluster-metadata-raw',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used. */
  getEsClusterMetadataSettings = 'get-es-cluster-metadata-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the pending plan of the cluster. */
  getEsClusterPendingPlan = 'get-es-cluster-pending-plan',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active plan of the Elasticsearch cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint. */
  getEsClusterPlan = 'get-es-cluster-plan',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active and historical plan information for the Elasticsearch cluster. */
  getEsClusterPlanActivity = 'get-es-cluster-plan-activity',

  /** DEPRECATED (Scheduled to be removed in the next major version): Gets cluster snapshot settings. */
  getEsClusterSnapshotSettings = 'get-es-cluster-snapshot-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all Elasticsearch clusters. */
  getEsClusters = 'get-es-clusters',

  /** DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP GET request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance. */
  getEsProxyRequests = 'get-es-proxy-requests',

  /** Retrieves an extension. */
  getExtension = 'get-extension',

  /** Read an extra certificate. */
  getExtraCertificate = 'get-extra-certificate',

  /** List all of the extra certificates. */
  getExtraCertificates = 'get-extra-certificates',

  /** Retrieve a feature flags current state by name. */
  getFeatureFlag = 'get-feature-flag',

  /** Retrieves an overview of all feature flags and strategies in an ECE installation. */
  getFeatureFlags = 'get-feature-flags',

  /** Retrieves the features the account is using above its subscription level in the last hour. */
  getFeaturesUsage = 'get-features-usage',

  /** Global deployment template endpoint which fetches the deployment templates across all region services. */
  getGlobalDeploymentTemplates = 'get-global-deployment-templates',

  /** Get instance configuration by id. */
  getInstanceConfiguration = 'get-instance-configuration',

  /** Get instance configurations. */
  getInstanceConfigurations = 'get-instance-configurations',

  /** Retrieves a list of all instance types. */
  getInstanceTypes = 'get-instance-types',

  /** DEPRECATED: Retrieves the rulesets associated with a deployment. */
  getIpFilterDeploymentRulesetAssociations = 'get-ip-filter-deployment-ruleset-associations',

  /** DEPRECATED: Retrieves the ruleset by ID. Deprecated in favor of traffic-filter endpoints. */
  getIpFilterRuleset = 'get-ip-filter-ruleset',

  /** DEPRECATED: Retrieves a list of deployments that are associated to the specified ruleset. */
  getIpFilterRulesetDeploymentAssociations = 'get-ip-filter-ruleset-deployment-associations',

  /** DEPRECATED: Retrieves all of the user rulesets. Deprecated in favor of traffic-filter endpoints. */
  getIpFilterRulesets = 'get-ip-filter-rulesets',

  /** DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP GET request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance. */
  getKibProxyRequests = 'get-kib-proxy-requests',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the Kibana instance information. */
  getKibanaCluster = 'get-kibana-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Retrieves the internal metadata, in free-form JSON, for the Kibana instance. */
  getKibanaClusterMetadataRaw = 'get-kibana-cluster-metadata-raw',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used. */
  getKibanaClusterMetadataSettings = 'get-kibana-cluster-metadata-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the pending plan of the Kibana instance. */
  getKibanaClusterPendingPlan = 'get-kibana-cluster-pending-plan',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active plan of the Kibana instance. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint. */
  getKibanaClusterPlan = 'get-kibana-cluster-plan',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active and historical plan information for the Kibana instance. */
  getKibanaClusterPlanActivity = 'get-kibana-cluster-plan-activity',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all Kibana instances. */
  getKibanaClusters = 'get-kibana-clusters',

  /** Retrieves a single LDAP security realm configuration. */
  getLdapConfiguration = 'get-ldap-configuration',

  /** Retrieves the license. */
  getLicense = 'get-license',

  /** Checks the health of the Mailer. */
  getMailerHealth = 'get-mailer-health',

  /** Checks the health of the Marketo Syncer. */
  getMarketoHealth = 'get-marketo-health',

  /** Fetch a single organization by id. */
  getOrganization = 'get-organization',

  /** Returns ECE usage statistics for Elastic's internal use. */
  getPhoneHomeData = 'get-phone-home-data',

  /** Retrieves information about the active platform. */
  getPlatform = 'get-platform',

  /** Gets an individual platform health check by name. */
  getPlatformHealth = 'get-platform-health',

  /** Retrieves the list of Elastic Cloud products' prices by regions. */
  getPrices = 'get-prices',

  /** Retrieves an overview of all proxies. */
  getProxies = 'get-proxies',

  /** Get data for a filtered group of proxies. */
  getProxiesFilteredGroup = 'get-proxies-filtered-group',

  /** Get the health status of a filtered group of proxies. */
  getProxiesFilteredGroupHealth = 'get-proxies-filtered-group-health',

  /** Get the health status of all proxies. */
  getProxiesHealth = 'get-proxies-health',

  /** Retrieves the settings for all proxies. */
  getProxiesSettings = 'get-proxies-settings',

  /** Retrieves a single proxy by ID. */
  getProxy = 'get-proxy',

  /** Checks the health of the Recurly Syncer. */
  getRecurlyHealth = 'get-recurly-health',

  /** Retrieves the Azure Private Link ID for a given Private Endpoint name and ID. */
  getResolvedLinkId = 'get-resolved-link-id',

  /** Gets Deployment Domain Name configuration value for a resource kind. */
  getResourceKindDeploymentDomainName = 'get-resource-kind-deployment-domain-name',

  /** Get health for the resources of the given storage provider. */
  getResourcesHealth = 'get-resources-health',

  /** Retrieves a runner by id. */
  getRunner = 'get-runner',

  /** Get the logging settings for this runner instance. */
  getRunnerLoggingSettings = 'get-runner-logging-settings',

  /** Retrieves an overview of all runners. */
  getRunners = 'get-runners',

  /** Retrieves posts from the Elastic Blog. */
  getSaasBlog = 'get-saas-blog',

  /** Returns the current user based on the X-Found-Run-As header. */
  getSaasCurrentUser = 'get-saas-current-user',

  /** Retrieves the list of Applications the user can access. */
  getSaasCurrentUserApplications = 'get-saas-current-user-applications',

  /** Returns all available MFA devices for the current user. */
  getSaasCurrentUserMfaDevices = 'get-saas-current-user-mfa-devices',

  /** Returns the MFA enabled status for the current user. */
  getSaasCurrentUserMfaEnabled = 'get-saas-current-user-mfa-enabled',

  /** Fetch external user info. */
  getSaasExternalUser = 'get-saas-external-user',

  /** Retrieves the list of Elastic Cloud providers with their regions. */
  getSaasProviders = 'get-saas-providers',

  /** Retrieves the current Elastic Cloud Status summary. */
  getSaasStatus = 'get-saas-status',

  /** Fetch user info. */
  getSaasUser = 'get-saas-user',

  /** Get list of email suppressions for given user and domain. */
  getSaasUserEmailSuppressions = 'get-saas-user-email-suppressions',

  /** Returns all available MFA devices for a user. */
  getSaasUserMfaDevices = 'get-saas-user-mfa-devices',

  /** Fetch a user's MFA enabled status. */
  getSaasUserMfaEnabled = 'get-saas-user-mfa-enabled',

  /** Retrieves a single SAML security realm configuration. */
  getSamlConfiguration = 'get-saml-configuration',

  /** Checks the health of the Scaler. */
  getScalerHealth = 'get-scaler-health',

  /** Retrieves the current security deployment. */
  getSecurityDeployment = 'get-security-deployment',

  /** Retrieves a list of security realm configurations. */
  getSecurityRealmConfigurations = 'get-security-realm-configurations',

  /** Gets the value of the shared file: {shared_file} should be equal to an existing containerset's path, like '/container_sets/admin-consoles/shared/adminconsole.conf'. */
  getSharedFile = 'get-shared-file',

  /** Retrieves a list of available snapshot repository configurations. To access the configuration contents, you must have privileged permissions. */
  getSnapshotRepositories = 'get-snapshot-repositories',

  /** Retrieves the snapshot repository configuration. To access the configuration contents, you must have privileged permissions. */
  getSnapshotRepository = 'get-snapshot-repository',

  /** Returns whether ECE telemetry is enabled. */
  getTelemetryConfig = 'get-telemetry-config',

  /** Retrieves a certificate in the TLS certificate chain. */
  getTlsCertificate = 'get-tls-certificate',

  /** Retrieves the rulesets associated with a deployment. */
  getTrafficFilterDeploymentRulesetAssociations = 'get-traffic-filter-deployment-ruleset-associations',

  /** Retrieves a list of resources that are associated to the specified ruleset. */
  getTrafficFilterRuleset = 'get-traffic-filter-ruleset',

  /** Retrieves a list of deployments that are associated to the specified ruleset. */
  getTrafficFilterRulesetDeploymentAssociations = 'get-traffic-filter-ruleset-deployment-associations',

  /** List all of the traffic filter rulesets. */
  getTrafficFilterRulesets = 'get-traffic-filter-rulesets',

  /** Retrieves information about a trust relationship. `local` can be used as the ID to obtain the local trust relationship. */
  getTrustRelationship = 'get-trust-relationship',

  /** List trust relationships. */
  getTrustRelationships = 'get-trust-relationships',

  /** Fetches a single user. */
  getUser = 'get-user',

  /** Retrieves the API key metadata for a user. */
  getUserApiKey = 'get-user-api-key',

  /** Retrieves metadata for all API keys created by the given user. */
  getUserApiKeys = 'get-user-api-keys',

  /** Retrieves the features the account is using above its subscription level in the last hour. */
  getUserFeaturesUsage = 'get-user-features-usage',

  /** Fetches all available users. */
  getUsers = 'get-users',

  /** Retrieves the metadata for all of the API keys for all users. */
  getUsersApiKeys = 'get-users-api-keys',

  /** Lists existing AccessManagement for stack versions. */
  getVersionAccessManagement = 'get-version-access-management',

  /** Retrieves the Elastic Stack version and template. */
  getVersionStack = 'get-version-stack',

  /** By default, retrieves only the available Elastic Stack versions. To retrieve all of the Elastic Stack versions, use the `show_deleted parameter`. */
  getVersionStacks = 'get-version-stacks',

  /** Find a AccessManagement for stack versions for a user. */
  getVersionUserAccessManagement = 'get-version-user-access-management',

  /** Invites a new user with a given email and will apply a specific profile upon acceptance. */
  inviteSaasUser = 'invite-saas-user',

  /** List all existing Account Credentials. */
  listAwsS3AccountCredentials = 'list-aws-s3-account-credentials',

  /** Retrieve all persisted roles. */
  listBlueprinterRoles = 'list-blueprinter-roles',

  /** Retrieves all the comments for a given Resource, in reverse modified time order. */
  listComment = 'list-comment',

  /** List all existing Config Store Option. */
  listConfigStoreOption = 'list-config-store-option',

  /** List Deployments. */
  listDeployments = 'list-deployments',

  /** Retrieves all of the available extensions. */
  listExtensions = 'list-extensions',

  /** Fetch open invitations to the selected organization. */
  listOrganizationInvitations = 'list-organization-invitations',

  /** Fetch users belonging to the selected organization. */
  listOrganizationMembers = 'list-organization-members',

  /** Fetch organizations available to the current user. */
  listOrganizations = 'list-organizations',

  /** Retrieves the platform health. */
  listPlatformHealth = 'list-platform-health',

  /** Lists the resolved Azure Private Link IDs. */
  listResolvedLinkIds = 'list-resolved-link-ids',

  /** List a AccessManagement for stack versions for users. */
  listVersionUserAccessManagement = 'list-version-user-access-management',

  /** Authenticates against available users. */
  login = 'login',

  /** Primary authentication for an Elastic Cloud user via email address and password. */
  loginSaasCurrentUser = 'login-saas-current-user',

  /** Destroys the current session. */
  logout = 'logout',

  /** Ends an authenticated session for an Elastic Cloud user. */
  logoutSaasCurrentUser = 'logout-saas-current-user',

  /** Provides information about available authentication methods. */
  methods = 'methods',

  /** Returns a deployment update request that would transform this deployment from its template to the provided one. */
  migrateDeployment = 'migrate-deployment',

  /** DEPRECATED (Scheduled to be removed in the next major version): Migrates the configuration of the Elasticsearch cluster to a different template. */
  migrateEsClusterPlan = 'migrate-es-cluster-plan',

  /** DEPRECATED (Scheduled to be removed in the next major version): Moves one or more instances belonging to a Apm cluster. */
  moveApmInstances = 'move-apm-instances',

  /** DEPRECATED (Scheduled to be removed in the next major version): Moves instances belonging to a Apm cluster, with custom configuration posted in the body. */
  moveApmInstancesAdvanced = 'move-apm-instances-advanced',

  /** Moves the clusters to a different allocator. */
  moveClusters = 'move-clusters',

  /** Moves the clusters, by type, to a different allocator. */
  moveClustersByType = 'move-clusters-by-type',

  /** DEPRECATED (Scheduled to be removed in the next major version): Moves one or more instances in the Elasticsearch cluster. */
  moveEsClusterInstances = 'move-es-cluster-instances',

  /** DEPRECATED (Scheduled to be removed in the next major version): Moves one or more instances in the Elasticsearch cluster. The custom configuration settings are posted in the body. */
  moveEsClusterInstancesAdvanced = 'move-es-cluster-instances-advanced',

  /** DEPRECATED (Scheduled to be removed in the next major version): Moves one or more Kibana instances. */
  moveKibanaClusterInstances = 'move-kibana-cluster-instances',

  /** DEPRECATED (Scheduled to be removed in the next major version): Moves one or more Kibana instances. The custom configuration settings are posted in the body. */
  moveKibanaClusterInstancesAdvanced = 'move-kibana-cluster-instances-advanced',

  /** All changes in the specified object are applied to an existing container according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists. */
  patchContainer = 'patch-container',

  /** Updates the current account. */
  patchCurrentAccount = 'patch-current-account',

  /** Updates new AccessManagement for stack versions. Overwrites existing data. */
  patchVersionAccessManagement = 'patch-version-access-management',

  /** Handles a SAML response from the Identity Provider and extracts user's metadata to provision a new Portal Checkout user. */
  portalCheckoutSamlCallback = 'portal-checkout-saml-callback',

  /** Initiates a SAML Assertion Request to be processed by an Identity Provider. */
  portalCheckoutSamlInit = 'portal-checkout-saml-init',

  /** DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP POST request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance. */
  postEsProxyRequests = 'post-es-proxy-requests',

  /** DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP POST request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance. */
  postKibProxyRequests = 'post-kib-proxy-requests',

  /** Publishes IdP metadata to be picked up by SSO-enabled SPs. */
  publishSecurityDeploymentIdpMetadata = 'publish-security-deployment-idp-metadata',

  /** Update existing Account Credentials. */
  putAwsS3AccountCredentials = 'put-aws-s3-account-credentials',

  /** Update existing Config Store Option. */
  putConfigStoreOption = 'put-config-store-option',

  /** DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP PUT request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance. */
  putEsProxyRequests = 'put-es-proxy-requests',

  /** DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP PUT request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance. */
  putKibProxyRequests = 'put-kib-proxy-requests',

  /** Updates profile information for the current user. */
  putSaasCurrentUser = 'put-saas-current-user',

  /** Update a user's profile as an admin. */
  putSaasUser = 'put-saas-user',

  /** Update the AccessManagement for stack versions for a user. */
  putVersionUserAccessManagement = 'put-version-user-access-management',

  /** DEPRECATED (Scheduled to be removed in the next major version): Re-authenticate. */
  reAuthenticate = 're-authenticate',

  /** Ensures the Private Link connection from an endpoint with given name and ID is accepted. */
  refreshLinkId = 'refresh-link-id',

  /** Refreshes an authenticated session for an Elastic Cloud user with updated authorization. */
  refreshSaasCurrentUser = 'refresh-saas-current-user',

  /** Issues a new authentication token. */
  refreshToken = 'refresh-token',

  /** Removes a blacklisted upgrade version matcher by version-from matcher. */
  removeBlacklistedUpgrade = 'remove-blacklisted-upgrade',

  /** Removes a blacklisted upgrade-to version matcher from the given upgrade-from version matcher. If upgrade-from matcher no longer has any upgrade-to version matchers, it too is removed.  */
  removeBlacklistedUpgradePair = 'remove-blacklisted-upgrade-pair',

  /** Removes a whitelisted version from Access Management. */
  removeWhitelistedVersion = 'remove-whitelisted-version',

  /** Reorder security realms. */
  reorderSecurityRealms = 'reorder-security-realms',

  /** Resends the email for the user to verify their email address. */
  resendSaasVerificationEmail = 'resend-saas-verification-email',

  /** Resends the email for the user to verify their email address. */
  resendSaasVerificationEmailAdmin = 'resend-saas-verification-email-admin',

  /** DEPRECATED (Scheduled to be removed in the next major version): Resets the secret token for a given APM cluster. */
  resetApmSecretToken = 'reset-apm-secret-token',

  /** Resets the password of the 'elastic' user. */
  resetElasticsearchUserPassword = 'reset-elasticsearch-user-password',

  /** Resets MFA for the current user. */
  resetSaasCurrentUserMfa = 'reset-saas-current-user-mfa',

  /** Resets MFA for a user. */
  resetSaasUserMfa = 'reset-saas-user-mfa',

  /** Requests a password reset. A confirmation email is sent to existing users. */
  resetSaasUserPassword = 'reset-saas-user-password',

  /** DEPRECATED (Scheduled to be removed in the next major version): Restarts a Apm cluster. If a cluster is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a Apm restart command and waits for it to complete. If a cluster is inactive: this command starts it up with the most recent successful plan. */
  restartApm = 'restart-apm',

  /** Restarts an Elasticsearch Resource. If a Resource is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan. */
  restartDeploymentEsResource = 'restart-deployment-es-resource',

  /** Restarts a Stateless Resource. If a Resource is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan. */
  restartDeploymentStatelessResource = 'restart-deployment-stateless-resource',

  /** DEPRECATED (Scheduled to be removed in the next major version): Restarts the Elasticsearch cluster. When you restart an active cluster, the existing plan is used and a `cluster_reboot` is applied. A `cluster_reboot` issues an Elasticsearch restart command, then waits for the command to complete. When you restart an inactive cluster, the most recent successful plan is applied. */
  restartEsCluster = 'restart-es-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): Restarts the Kibana instance. When you restart an active instance, the existing plan is used and a `cluster_reboot` is applied. A `cluster_reboot` issues a Kibana restart command, then waits for the command to complete. When you restart an inactive instance, the most recent successful plan is applied. */
  restartKibanaCluster = 'restart-kibana-cluster',

  /** Restores all resources in a Deployment. */
  restoreDeployment = 'restore-deployment',

  /** Restores a shutdown resource belonging to a given Deployment. */
  restoreDeploymentResource = 'restore-deployment-resource',

  /** Immediately synchronizes the allocator information in the back-end search index and caches. */
  resyncAllocator = 'resync-allocator',

  /** Asynchronously synchronizes all allocator information in the back-end search index. */
  resyncAllocators = 'resync-allocators',

  /** DEPRECATED (Scheduled to be removed in the next major version): Immediately resynchronizes the search index and cache for the selected APM cluster. */
  resyncApmCluster = 'resync-apm-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): Asynchronously resynchronizes the search index for all APM clusters. */
  resyncApmClusters = 'resync-apm-clusters',

  /** Immediately resynchronizes the search index and cache for the selected constructor. */
  resyncConstructor = 'resync-constructor',

  /** Asynchronously synchronizes all constructor information in the back-end search index. */
  resyncConstructors = 'resync-constructors',

  /** Immediately resynchronizes the search index and cache for the selected container set. */
  resyncContainerSet = 'resync-container-set',

  /** Immediately resynchronizes the search index for the selected deployment. */
  resyncDeployment = 'resync-deployment',

  /** Resynchronizes the search index for all the deployments. */
  resyncDeployments = 'resync-deployments',

  /** DEPRECATED (Scheduled to be removed in the next major version): Immediately resynchronizes the search index and cache for the selected Elasticsearch cluster. */
  resyncEsCluster = 'resync-es-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): Asynchronously resynchronizes the search index for all Elasticsearch clusters. */
  resyncEsClusters = 'resync-es-clusters',

  /** DEPRECATED (Scheduled to be removed in the next major version): Immediately resynchronizes the search index and cache for the selected Kibana instance. */
  resyncKibanaCluster = 'resync-kibana-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): Asynchronously resynchronizes the search index for all Kibana instances. */
  resyncKibanaClusters = 'resync-kibana-clusters',

  /** Immediately resynchronizes the search index and cache for the selected runner. */
  resyncRunner = 'resync-runner',

  /** Asynchronously synchronizes all runner information in the search index. */
  resyncRunners = 'resync-runners',

  /** Finishes an OAuth2 authentication by validating and authorizing an ID token. */
  saasOpenidCallback = 'saas-openid-callback',

  /** Accepts a callback request from an identity provider and authenticates the user. */
  samlCallback = 'saml-callback',

  /** Calls the authentication cluster to initiate SAML Single Sign-on (Web Browser SSO profile) protocol and redirects the user to the identity provider for authentication. The authentication cluster must be configured prior to initiation. */
  samlInit = 'saml-init',

  /** Searches for entities matching the given query. */
  searchAll = 'search-all',

  /** Retrieves the information for all of the allocators in the platform that match the specified query. */
  searchAllocators = 'search-allocators',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster information for all Apm clusters that match a given query. */
  searchApms = 'search-apms',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the instances that match the specified query. */
  searchClusters = 'search-clusters',

  /** Retrieves container sets that match a given query. */
  searchContainerSets = 'search-container-sets',

  /** Retrieves the information for all of the deployments that match the specified query. */
  searchDeployments = 'search-deployments',

  /** Returns the list of deployments which contain eligible remote clusters for a specific version. */
  searchEligibleRemoteClusters = 'search-eligible-remote-clusters',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the Elasticsearch clusters that match the specified query. */
  searchEsClusters = 'search-es-clusters',

  /** DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the Kibana instances that match the specified query. */
  searchKibanaClusters = 'search-kibana-clusters',

  /** Retrieves runners that match a given query. */
  searchRunners = 'search-runners',

  /** Set the logging settings for this adminconsole instance. */
  setAdminconsoleLoggingSettings = 'set-adminconsole-logging-settings',

  /** Set the logging settings for this allocator instance. */
  setAllocatorLoggingSettings = 'set-allocator-logging-settings',

  /** Sets the allocator metadata. */
  setAllocatorMetadata = 'set-allocator-metadata',

  /** Adds or updates a single item in the allocator metadata. */
  setAllocatorMetadataItem = 'set-allocator-metadata-item',

  /** Overwrites the allocator settings with the specified settings. WARNING: Any unspecified fields are deleted. */
  setAllocatorSettings = 'set-allocator-settings',

  /** Saves the API base Url configuration value. */
  setApiBaseUrl = 'set-api-base-url',

  /** DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Sets the internal metadata, in free-form JSON, for the APM instance. Only use the parameters to set the modified JSON that is returned from the get version of the metadata. */
  setApmMetadataRaw = 'set-apm-metadata-raw',

  /** DEPRECATED (Scheduled to be removed in the next major version): Assigns a name to the APM instance. */
  setApmName = 'set-apm-name',

  /** Enable/Disable read-only mode on the given App Search resource. */
  setAppsearchReadOnlyMode = 'set-appsearch-read-only-mode',

  /** Set blessings for a role. */
  setBlueprinterBlessings = 'set-blueprinter-blessings',

  /** Set the logging settings for this constructor instance. */
  setConstructorLoggingSettings = 'set-constructor-logging-settings',

  /** Saves the default Deployment Domain Name configuration value. */
  setDefaultDeploymentDomainName = 'set-default-deployment-domain-name',

  /** Fetches the current values of the keystore for the Elasticsearch resource. */
  setDeploymentEsResourceKeystore = 'set-deployment-es-resource-keystore',

  /** Overwrites or creates the remote clusters for the elasticsearch resource. */
  setDeploymentEsResourceRemoteClusters = 'set-deployment-es-resource-remote-clusters',

  /** Advanced use only. Sets the internal metadata, in free-form JSON, for the resource. Only use the parameter to set the modified JSON that is returned from the get version of the metadata. */
  setDeploymentResourceRawMetadata = 'set-deployment-resource-raw-metadata',

  /** Creates or updates a deployment template. */
  setDeploymentTemplate = 'set-deployment-template',

  /** Creates or updates a deployment template. */
  setDeploymentTemplateV2 = 'set-deployment-template-v2',

  /** DEPRECATED (Scheduled to be removed in the next major version): Overwrites or creates the cross-cluster search configuration for the Elasticsearch cluster. */
  setEsClusterCcsSettings = 'set-es-cluster-ccs-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Overrides the settings for all of the instances in the Elasticsearch cluster. */
  setEsClusterInstancesAllSettingsOverrides = 'set-es-cluster-instances-all-settings-overrides',

  /** DEPRECATED (Scheduled to be removed in the next major version): Overrides the settings for the specified instances in the Elasticsearch cluster. */
  setEsClusterInstancesSettingsOverrides = 'set-es-cluster-instances-settings-overrides',

  /** DEPRECATED (Scheduled to be removed in the next major version): Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values. */
  setEsClusterKeystore = 'set-es-cluster-keystore',

  /** DEPRECATED (Scheduled to be removed in the next major version): Sets the legacy Shield security settings for a 2.x Elasticsearch cluster. */
  setEsClusterLegacySecuritySettings = 'set-es-cluster-legacy-security-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Sets the internal metadata, in free-form JSON, for the Elasticsearch cluster. Only use the parameter to set the modified JSON that is returned from the get version of the metadata. */
  setEsClusterMetadataRaw = 'set-es-cluster-metadata-raw',

  /** DEPRECATED (Scheduled to be removed in the next major version): Overwrites or creates the monitoring destination for the Elasticsearch cluster. */
  setEsClusterMonitoring = 'set-es-cluster-monitoring',

  /** DEPRECATED (Scheduled to be removed in the next major version): Assigns a name to the Elasticsearch cluster. */
  setEsClusterName = 'set-es-cluster-name',

  /** Add or update an extra certificate. */
  setExtraCertificate = 'set-extra-certificate',

  /** Sets a given feature flags state. */
  setFeatureFlag = 'set-feature-flag',

  /** Creates or updates an instance configuration. */
  setInstanceConfiguration = 'set-instance-configuration',

  /** DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Sets the internal metadata, in free-form JSON, for the Kibana instance. Only use the parameter to set the modified JSON that is returned from the get version of the metadata. */
  setKibanaClusterMetadataRaw = 'set-kibana-cluster-metadata-raw',

  /** DEPRECATED (Scheduled to be removed in the next major version): Assigns a name to the Kibana instance. */
  setKibanaClusterName = 'set-kibana-cluster-name',

  /** Adds a new or updates an existing license. */
  setLicense = 'set-license',

  /** Overwrites the proxy settings. All unspecified fields are deleted. */
  setProxiesSettings = 'set-proxies-settings',

  /** Saves the Deployment Domain Name configuration value for a resource kind. */
  setResourceKindDeploymentDomainName = 'set-resource-kind-deployment-domain-name',

  /** Set the logging settings for this runner instance. */
  setRunnerLoggingSettings = 'set-runner-logging-settings',

  /** Set runner roles. */
  setRunnerRoles = 'set-runner-roles',

  /** Updates a user's email address. User based on the X-Found-Run-As header. */
  setSaasCurrentUserEmail = 'set-saas-current-user-email',

  /** Enables or disables MFA for the current user. */
  setSaasCurrentUserMfaEnabled = 'set-saas-current-user-mfa-enabled',

  /** Updates a user's password. User based on the X-Found-Run-As header. */
  setSaasCurrentUserPassword = 'set-saas-current-user-password',

  /** Updates a user's password via password reset hash. User based on the X-Found-Run-As header. */
  setSaasCurrentUserPasswordHash = 'set-saas-current-user-password-hash',

  /** Enables or disables MFA for a user. */
  setSaasUserMfaEnabled = 'set-saas-user-mfa-enabled',

  /** Sets the value of the shared file from request body: {shared_file} should be equal to an existing containerset's path, like '/container_sets/admin-consoles/shared/adminconsole.conf'. */
  setSharedFile = 'set-shared-file',

  /** Creates or updates the snapshot repository configuration. */
  setSnapshotRepository = 'set-snapshot-repository',

  /** Sets whether to enable ECE telemetry. */
  setTelemetryConfig = 'set-telemetry-config',

  /** Creates or updates the TLS certificate chain. */
  setTlsCertificate = 'set-tls-certificate',

  /** DEPRECATED (Scheduled to be removed in the next major version): Shuts down a running cluster and removes all nodes belonging to the cluster. The cluster definition is retained. Warning: this will lose all cluster data that is not saved in a snapshot repository. */
  shutdownApm = 'shutdown-apm',

  /** Shuts down all resources in a Deployment. */
  shutdownDeployment = 'shutdown-deployment',

  /** Shutdown Elasticsearch Resource belonging to a given Deployment. */
  shutdownDeploymentEsResource = 'shutdown-deployment-es-resource',

  /** Shut down Stateless Resource belonging to a given Deployment. Kibana cannot be shut down on Elasticsearch Service as it is required for Elasticsearch administrative functions, such as Snapshot Lifecycle Management and version upgrades. */
  shutdownDeploymentStatelessResource = 'shutdown-deployment-stateless-resource',

  /** DEPRECATED (Scheduled to be removed in the next major version): Shuts down the active Elasticsearch cluster and removes all of the cluster nodes. The cluster plan is retained. WARNING: To avoid data loss, save the data outside of the cluster before you shut the cluster down. */
  shutdownEsCluster = 'shutdown-es-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): Shuts down the active Kibana instance and removes all of the instance nodes. The instance definition is retained. WARNING: To avoid data loss, save the snapshot repository before you shut down the instance. */
  shutdownKibanaCluster = 'shutdown-kibana-cluster',

  /** DEPRECATED (Scheduled to be removed in the next major version): To create a snapshot of the specified Elasticsearch cluster, uses the configured snapshot repository. */
  snapshotEsCluster = 'snapshot-es-cluster',

  /** Starts maintenance mode on the allocator. */
  startAllocatorMaintenanceMode = 'start-allocator-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts the instances belonging to a Apm cluster. */
  startApmInstances = 'start-apm-instances',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts all the instances belonging to a Apm cluster. */
  startApmInstancesAll = 'start-apm-instances-all',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode of all instances belonging to a Apm cluster. */
  startApmInstancesAllMaintenanceMode = 'start-apm-instances-all-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode of instances belonging to a Apm cluster. */
  startApmMaintenanceMode = 'start-apm-maintenance-mode',

  /** Start maintenance mode of a constructor. It will stop constructing new plans while continuing with on-going ones. */
  startConstructorMaintenanceMode = 'start-constructor-maintenance-mode',

  /** Starts instances belonging to a Deployment Resource. */
  startDeploymentResourceInstances = 'start-deployment-resource-instances',

  /** Starts all instances belonging to a Deployment Resource. */
  startDeploymentResourceInstancesAll = 'start-deployment-resource-instances-all',

  /** Starts maintenance mode of all instances belonging to a Deployment Resource. */
  startDeploymentResourceInstancesAllMaintenanceMode = 'start-deployment-resource-instances-all-maintenance-mode',

  /** Starts maintenance mode of instances belonging to a Deployment Resource. */
  startDeploymentResourceMaintenanceMode = 'start-deployment-resource-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts the instances in the Elasticsearch cluster. */
  startEsClusterInstances = 'start-es-cluster-instances',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts all of the instances in the Elasticsearch cluster. */
  startEsClusterInstancesAll = 'start-es-cluster-instances-all',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on all of the instances in the Elasticsearch cluster. */
  startEsClusterInstancesAllMaintenanceMode = 'start-es-cluster-instances-all-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on the specified instances in the Elasticsearch cluster. */
  startEsClusterMaintenanceMode = 'start-es-cluster-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts the specified Kibana instances. */
  startKibanaClusterInstances = 'start-kibana-cluster-instances',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts all of the Kibana instances. */
  startKibanaClusterInstancesAll = 'start-kibana-cluster-instances-all',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on all of the Kibana instances. */
  startKibanaClusterInstancesAllMaintenanceMode = 'start-kibana-cluster-instances-all-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on the specified Kibana instances. */
  startKibanaClusterMaintenanceMode = 'start-kibana-cluster-maintenance-mode',

  /** Stops maintenance mode on the allocator. */
  stopAllocatorMaintenanceMode = 'stop-allocator-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops the instances belonging to a Apm cluster. */
  stopApmInstances = 'stop-apm-instances',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops all the instances belonging to a Apm cluster. */
  stopApmInstancesAll = 'stop-apm-instances-all',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode of all instances belonging to a Apm cluster. */
  stopApmInstancesAllMaintenanceMode = 'stop-apm-instances-all-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode of instances belonging to a Apm cluster. */
  stopApmMaintenanceMode = 'stop-apm-maintenance-mode',

  /** Stop maintenance mode of a constructor. It will resume the construction of submitted plans. */
  stopConstructorMaintenanceMode = 'stop-constructor-maintenance-mode',

  /** Stops instances belonging to a Deployment Resource. */
  stopDeploymentResourceInstances = 'stop-deployment-resource-instances',

  /** Stops all instances belonging to a Deployment Resource. */
  stopDeploymentResourceInstancesAll = 'stop-deployment-resource-instances-all',

  /** Stops maintenance mode of all instances belonging to a Deployment Resource. */
  stopDeploymentResourceInstancesAllMaintenanceMode = 'stop-deployment-resource-instances-all-maintenance-mode',

  /** Stops maintenance mode of instances belonging to a Resource. */
  stopDeploymentResourceMaintenanceMode = 'stop-deployment-resource-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops the instances in the Elasticsearch cluster. */
  stopEsClusterInstances = 'stop-es-cluster-instances',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops all of the instances in the Elasticsearch cluster.. */
  stopEsClusterInstancesAll = 'stop-es-cluster-instances-all',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on all of the instances in the Elasticsearch cluster. */
  stopEsClusterInstancesAllMaintenanceMode = 'stop-es-cluster-instances-all-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on the specified instances in the Elasticsearch cluster. */
  stopEsClusterMaintenanceMode = 'stop-es-cluster-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops the specified Kibana instances. */
  stopKibanaClusterInstances = 'stop-kibana-cluster-instances',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops all of the Kibana instances. */
  stopKibanaClusterInstancesAll = 'stop-kibana-cluster-instances-all',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on all of the Kibana instances. */
  stopKibanaClusterInstancesAllMaintenanceMode = 'stop-kibana-cluster-instances-all-maintenance-mode',

  /** DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on the specified Kibana instances. */
  stopKibanaClusterMaintenanceMode = 'stop-kibana-cluster-maintenance-mode',

  /** Submit feedback. */
  submitFeedback = 'submit-feedback',

  /** Update subscription level request. */
  subscriptionLevel = 'subscription-level',

  /** Updates an existing Active Directory configuration.  */
  updateActiveDirectoryConfiguration = 'update-active-directory-configuration',

  /** All changes in the specified object are applied to the logging settings for this adminconsole instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists. */
  updateAdminconsoleLoggingSettings = 'update-adminconsole-logging-settings',

  /** All changes in the specified object are applied to the logging settings for this allocator instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists. */
  updateAllocatorLoggingSettings = 'update-allocator-logging-settings',

  /** Applies the settings as a patch. Only the fields that are referenced in the update are altered. */
  updateAllocatorSettings = 'update-allocator-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the metadata object according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists. */
  updateApmMetadataSettings = 'update-apm-metadata-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Updates the configuration of an existing Apm cluster. */
  updateApmPlan = 'update-apm-plan',

  /** Update a role. */
  updateBlueprinterRole = 'update-blueprinter-role',

  /** Updates a Comment. */
  updateComment = 'update-comment',

  /** All changes in the specified object are applied to the logging settings for this constructor instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists. */
  updateConstructorLoggingSettings = 'update-constructor-logging-settings',

  /** Updates the current account. */
  updateCurrentAccount = 'update-current-account',

  /** Updates the current user. */
  updateCurrentUser = 'update-current-user',

  /** Updates a Deployment. */
  updateDeployment = 'update-deployment',

  /** Update note for the running deployment. */
  updateDeploymentNote = 'update-deployment-note',

  /** DEPRECATED (Scheduled to be removed in the next major version): Overrides cluster curation settings for an Elasticsearch cluster. */
  updateEsClusterCurationSettings = 'update-es-cluster-curation-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the metadata object according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists. */
  updateEsClusterMetadataSettings = 'update-es-cluster-metadata-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Updates the configuration of the Elasticsearch cluster. */
  updateEsClusterPlan = 'update-es-cluster-plan',

  /** DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the snapshot settings according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists. */
  updateEsClusterSnapshotSettings = 'update-es-cluster-snapshot-settings',

  /** Updates an extension. */
  updateExtension = 'update-extension',

  /** DEPRECATED: Updates the ruleset with the definition. Deprecated in favor of traffic-filter endpoints. */
  updateIpFilterRuleset = 'update-ip-filter-ruleset',

  /** DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the metadata object according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists. */
  updateKibanaClusterMetadataSettings = 'update-kibana-cluster-metadata-settings',

  /** DEPRECATED (Scheduled to be removed in the next major version): Updates the configuration of the Kibana instance. */
  updateKibanaClusterPlan = 'update-kibana-cluster-plan',

  /** Updates an existing LDAP configuration. */
  updateLdapConfiguration = 'update-ldap-configuration',

  /** Updates an existing organization. */
  updateOrganization = 'update-organization',

  /** Update the settings for a filtered group of proxies. */
  updateProxiesFilteredGroup = 'update-proxies-filtered-group',

  /** Applies the settings as a patch. Only the fields that are referenced in the update are changed. */
  updateProxiesSettings = 'update-proxies-settings',

  /** All changes in the specified object are applied to the logging settings for this runner instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists. */
  updateRunnerLoggingSettings = 'update-runner-logging-settings',

  /** Updates an existing SAML configuration. */
  updateSamlConfiguration = 'update-saml-configuration',

  /** Updates an existing security deployment configuration. */
  updateSecurityDeployment = 'update-security-deployment',

  /** Creates or updates an Elastic Stack pack and template. The endpoint supports `multipart/form-data` requests, as well as `application/zip` and `application/octet-stream` requests with a binary body. The maximum size of the payload is 1Mb. When the archive contains an Elastic Stack configuration that is available through the API, the configuration and template are overwritten. */
  updateStackPacks = 'update-stack-packs',

  /** Updates the ruleset with the definition. */
  updateTrafficFilterRuleset = 'update-traffic-filter-ruleset',

  /** Updates a trust relationship. */
  updateTrustRelationship = 'update-trust-relationship',

  /** Updates an existing user. */
  updateUser = 'update-user',

  /** Updates the Elastic Stack version configuration. */
  updateVersionStack = 'update-version-stack',

  /** DEPRECATED (Scheduled to be removed in the next major version): Upgrades a running cluster. */
  upgradeApm = 'upgrade-apm',

  /** Upgrades a running cluster. */
  upgradeDeploymentStatelessResource = 'upgrade-deployment-stateless-resource',

  /** DEPRECATED (Scheduled to be removed in the next major version): Upgrades an active Kibana instance. */
  upgradeKibanaCluster = 'upgrade-kibana-cluster',

  /** Uploads archive for an extension. */
  uploadExtension = 'upload-extension',

  /** Called in response to a primary (password) authentication request demanding an additional factor. This endpoint requires the state_id input field to be set. */
  verifySaasCurrentUserMfaChallenge = 'verify-saas-current-user-mfa-challenge',

  /** Verifies the user's email address and activates those users with pending activation. */
  verifySaasUserEmail = 'verify-saas-user-email',
}

export default Permission
