/*
 * ELASTICSEARCH CONFIDENTIAL
 * __________________
 *
 *  Copyright Elasticsearch B.V. All rights reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Elasticsearch B.V. and its suppliers, if any.
 * The intellectual and technical concepts contained herein
 * are proprietary to Elasticsearch B.V. and its suppliers and
 * may be covered by U.S. and Foreign Patents, patents in
 * process, and are protected by trade secret or copyright
 * law.  Dissemination of this information or reproduction of
 * this material is strictly forbidden unless prior written
 * permission is obtained from Elasticsearch B.V.
 */

/*!
 *!   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *!   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *!   @@@                                         @@@@
 *!   @@@   THIS FILE WAS AUTOGENERATED BY TOOL   @@@@
 *!   @@@   CHANGES MUST TARGET SCRIPTS/SWAGGER   @@@@
 *!   @@@                                         @@@@
 *!   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *!   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *!
 */

import { stringify } from 'query-string'
import { isEmpty, pickBy } from 'lodash'

const emptyParams = Object.freeze({})

const getRawBasePath = () => `/api/v1`
const getBasePath = () => `/api/v1/regions`

function buildQueryString(parameters) {
  const nonNullParams = pickBy(parameters, (parameter) => parameter != null)
  return isEmpty(nonNullParams) ? `` : `?${stringify(nonNullParams)}`
}

export function encode(strings, ...params) {
  let result = ''

  for (let i = 0; i < strings.length; i++) {
    result += strings[i]

    if (params[i]) {
      const value = params[i]

      if (Array.isArray(value)) {
        result += value.map(encodeURIComponent).join(`,`)
      } else if (
        value != null &&
        typeof value === 'object' &&
        value.hasOwnProperty('__path') &&
        typeof value.__path === 'string'
      ) {
        result += value.__path
      } else {
        result += encodeURIComponent(value)
      }
    }
  }

  return result
}

/**
 * GET /api/v1/account
 * Operation: `get-current-account`
 * Fetch current account information.
 * @see 200 Account fetched successfully. See {@link AccountResponse}
 * @see 404 Account not found. (code: `accounts.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getCurrentAccountUrl(): string {
  const path = `/account`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/account
 * Operation: `update-current-account`
 * Updates the current account.
 * @see Accepts a request payload of type {@link AccountUpdateRequest}
 * @see 200 Account updated successfully. See {@link AccountResponse}
 * @see 404 Account not found. (code: `accounts.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateCurrentAccountUrl(): string {
  const path = `/account`
  return `${getRawBasePath()}${path}`
}

/**
 * PATCH /api/v1/account
 * Operation: `patch-current-account`
 * Updates the current account.
 * @see Accepts a request payload of type {@link string}
 * @see 200 Account updated successfully. See {@link AccountResponse}
 * @see 404 Account not found. (code: `accounts.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function patchCurrentAccountUrl(): string {
  const path = `/account`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/all/_search
 * Operation: `search-all`
 * Searches for entities matching the given query.
 * @param {string} params.q The query string to search with.
 * @param {boolean} params.showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses.
 * @see 200 The results of the search. See {@link SearchResults}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchAllUrl(params: { q: string; showPlanLogs?: boolean | null }): string {
  const queryString = buildQueryString({
    q: params.q,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
  })
  const path = `/all/_search`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/billing/costs/{organization_id}
 * Operation: `get-costs-overview`
 * EXPERIMENTAL (it may change in future versions): Retrieves an overview of the costs by organization ID.
 * @param {string} params.organizationId Identifier for the organization.
 * @param {string} params.from A datetime for the beginning of the desired range for which to fetch costs. Defaults to start of current month. Note: there is currently a three-month maximum date range.
 * @param {string} params.to A datetime for the end of the desired range for which to fetch costs. Defaults to the current date. Note: there is currently a three-month maximum date range.git s.
 * @see 200 Top-level cost overview for the organization. See {@link CostsOverview}
 * @see 403 The current user does not have access to the requested organization. (code: `organization.invalid_access`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getCostsOverviewUrl(params: {
  organizationId: string
  from?: string | null
  to?: string | null
}): string {
  const queryString = buildQueryString({
    from: params.from,
    to: params.to,
  })
  const path = encode`/billing/costs/${params.organizationId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/billing/costs/{organization_id}/deployments
 * Operation: `get-costs-deployments`
 * EXPERIMENTAL (it may change in future versions): Retrieves the costs associated with all deployments for the organization.
 * @param {string} params.organizationId Identifier for the organization.
 * @param {string} params.from A datetime for the beginning of the desired range for which to fetch activity. Defaults to start of current month. Note: there is currently a three-month maximum date range.
 * @param {string} params.to A datetime for the end of the desired range for which to fetch activity. Defaults to end of current month. Note: there is currently a three-month maximum date range.
 * @see 200 The costs associated to a set of products. See {@link DeploymentsCosts}
 * @see 403 The current user does not have access to the requested organization. (code: `organization.invalid_access`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getCostsDeploymentsUrl(params: {
  organizationId: string
  from?: string | null
  to?: string | null
}): string {
  const queryString = buildQueryString({
    from: params.from,
    to: params.to,
  })
  const path = encode`/billing/costs/${params.organizationId}/deployments`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/billing/costs/{organization_id}/deployments/{deployment_id}/items
 * Operation: `get-costs-items-by-deployment`
 * EXPERIMENTAL (it may change in future versions): Retrieves the itemized costs for the given deployment.
 * @param {string} params.organizationId Identifier for the organization.
 * @param {string} params.deploymentId Id of a Deployment.
 * @param {string} params.from A datetime for the beginning of the desired range for which to fetch costs. Defaults to start of current month. Note: there is currently a three-month maximum date range.
 * @param {string} params.to A datetime for the end of the desired range for which to fetch costs. Defaults to end of current month. Note: there is currently a three-month maximum date range.
 * @see 200 The costs associated to a set items billed for a single deployment. See {@link ItemsCosts}
 * @see 403 The current user does not have access to the requested organization. (code: `organization.invalid_access`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getCostsItemsByDeploymentUrl(params: {
  organizationId: string
  deploymentId: string
  from?: string | null
  to?: string | null
}): string {
  const queryString = buildQueryString({
    from: params.from,
    to: params.to,
  })
  const path = encode`/billing/costs/${params.organizationId}/deployments/${params.deploymentId}/items`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/billing/costs/{organization_id}/items
 * Operation: `get-costs-items`
 * EXPERIMENTAL (it may change in future versions): Retrieves the itemized costs for the organization.
 * @param {string} params.organizationId Identifier for the organization.
 * @param {string} params.from A datetime for the beginning of the desired range for which to fetch costs. Defaults to start of current month. Note: there is currently a three-month maximum date range.
 * @param {string} params.to A datetime for the end of the desired range for which to fetch costs. Defaults to end of current month. Note: there is currently a three-month maximum date range.
 * @see 200 The costs associated to a set of items. See {@link ItemsCosts}
 * @see 403 The current user does not have access to the requested organization. (code: `organization.invalid_access`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getCostsItemsUrl(params: {
  organizationId: string
  from?: string | null
  to?: string | null
}): string {
  const queryString = buildQueryString({
    from: params.from,
    to: params.to,
  })
  const path = encode`/billing/costs/${params.organizationId}/items`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1(/regions/{region_id})?/clusters/_search
 * Operation: `search-clusters`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the instances that match the specified query.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 A list of clusters that matched the given search query. See {@link ClustersInfo}
 * @see 400 The search request failed. (code: `search.invalid_request`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchClustersUrl(params: { regionId?: string | null } = emptyParams): string {
  const path =
    (params.regionId == null ? '' : '/' + encodeURIComponent(params.regionId)) + `/clusters/_search`
  return `${params.regionId == null ? getRawBasePath() : getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/apm
 * Operation: `get-apm-clusters`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster information for all APM clusters.
 * @param {integer} params.from The number of clusters to skip.
 * @param {integer} params.size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. Default: 100
 * @param {string} params.q An optional query to filter APM clusters by. Maps to an Elasticsearch query_string query.
 * @param {boolean} params.showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials.
 * @param {boolean} params.showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses.
 * @param {boolean} params.showHidden Includes the hidden clusters in the response.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.showSettings Includes the cluster settings in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The information for the APM server is retrieved. See {@link ApmsInfo}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApmClustersUrl(params: {
  from?: number | null
  size?: number | null
  q?: string | null
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showHidden?: boolean | null
  showPlanDefaults?: boolean | null
  showSettings?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    from: params.from === undefined ? 0 : params.from,
    size: params.size === undefined ? 100 : params.size,
    q: params.q,
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans,
    show_hidden: params.showHidden === undefined ? false : params.showHidden,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
  })
  const path = encode`/${params.regionId}/clusters/apm`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm
 * Operation: `create-apm`
 * DEPRECATED (Scheduled to be removed in the next major version): Creates an APM cluster for a given Elasticsearch cluster.
 * @param {boolean} params.validateOnly When `true`, validates the cluster definition without creating the cluster.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link CreateApmRequest}
 * @see 200 The APM server plan is valid. The return object contains an internal representation of the plan that you can use for debugging. See {@link ApmCrudResponse}
 * @see 201 The APM server plan is valid and the creation process has started. See {@link ApmCrudResponse}
 * @see 400 The APM server plan contains errors. (code: 'clusters.cluster_invalid_plan' and 'clusters.plan_feature_not_implemented'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.needs_elevated_permissions"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createApmUrl(params: { validateOnly?: boolean | null; regionId: string }): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/apm`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/_resync
 * Operation: `resync-apm-clusters`
 * DEPRECATED (Scheduled to be removed in the next major version): Asynchronously resynchronizes the search index for all APM clusters.
 * @param {boolean} params.skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. Default: true
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The ids of documents, organized by model version, that will be synchronized. See {@link ModelVersionIndexSynchronizationResults}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncApmClustersUrl(params: {
  skipMatchingVersion?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    skip_matching_version:
      params.skipMatchingVersion === undefined ? true : params.skipMatchingVersion,
  })
  const path = encode`/${params.regionId}/clusters/apm/_resync`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/_search
 * Operation: `search-apms`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster information for all Apm clusters that match a given query.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 The search request succeeded. See {@link ApmsInfo}
 * @see 400 The search request failed. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchApmsUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/apm/_search`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/apm/{cluster_id}
 * Operation: `get-apm-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster information for a APM cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {boolean} params.showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials.
 * @param {boolean} params.showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. Default: true
 * @param {boolean} params.showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.showSettings Includes the cluster settings in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returning the information for the specified APM cluster. See {@link ApmInfo}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApmClusterUrl(params: {
  clusterId: string
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanLogs?: boolean | null
  showPlanDefaults?: boolean | null
  showSettings?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? true : params.showPlans,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/clusters/apm/{cluster_id}
 * Operation: `delete-apm`
 * DEPRECATED (Scheduled to be removed in the next major version): Deletes an APM cluster. Requires that you have already successfully issued `_shutdown` command against the cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The APM server is deleted.
 * @see 404 The {cluster_id} can't be found. (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 412 To delete the APM server, you must first shut it down. (code: 'clusters.cluster_plan_state_error'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.needs_elevated_permissions"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteApmUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/_reset-token
 * Operation: `reset-apm-secret-token`
 * DEPRECATED (Scheduled to be removed in the next major version): Resets the secret token for a given APM cluster.
 * @param {string} params.clusterId APM instance identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The token was successfully reset. See {@link ApmCrudResponse}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 412 There is not currently applied plan - eg the cluster has not finished provisioning, or the provisioning failed (code: 'clusters.cluster_plan_state_error'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resetApmSecretTokenUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/_reset-token`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/_restart
 * Operation: `restart-apm`
 * DEPRECATED (Scheduled to be removed in the next major version): Restarts a Apm cluster. If a cluster is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a Apm restart command and waits for it to complete. If a cluster is inactive: this command starts it up with the most recent successful plan.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {boolean} params.cancelPending When `true`, cancels the pending plans, then restarts the cluster.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 412 The command sent to a cluster found the cluster in an illegal state, the error message gives more details. (code: `clusters.cluster_plan_state_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function restartApmUrl(params: {
  clusterId: string
  cancelPending?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    cancel_pending: params.cancelPending === undefined ? false : params.cancelPending,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/_restart`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/_resync
 * Operation: `resync-apm-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Immediately resynchronizes the search index and cache for the selected APM cluster.
 * @param {string} params.clusterId The APM cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster resync operation executed successfully
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 The cluster resync operation failed for cluster {cluster_id}. (code: `clusters.resync_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncApmClusterUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/_resync`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/_shutdown
 * Operation: `shutdown-apm`
 * DEPRECATED (Scheduled to be removed in the next major version): Shuts down a running cluster and removes all nodes belonging to the cluster. The cluster definition is retained. Warning: this will lose all cluster data that is not saved in a snapshot repository.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {boolean} params.hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The shutdown command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function shutdownApmUrl(params: {
  clusterId: string
  hide?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    hide: params.hide === undefined ? false : params.hide,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/_shutdown`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/_upgrade
 * Operation: `upgrade-apm`
 * DEPRECATED (Scheduled to be removed in the next major version): Upgrades a running cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {boolean} params.validateOnly When `true`, returns the update version without performing the upgrade.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The upgrade command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterUpgradeInfo}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function upgradeApmUrl(params: {
  clusterId: string
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/_upgrade`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/_move
 * Operation: `move-apm-instances-advanced`
 * DEPRECATED (Scheduled to be removed in the next major version): Moves instances belonging to a Apm cluster, with custom configuration posted in the body.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {boolean} params.forceUpdate When `true`, cancels and overwrites the pending plans, or treats the instance as an error.
 * @param {boolean} params.validateOnly When `true`, validates the move request, then returns the calculated plan without applying the plan.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link TransientApmPlanConfiguration}
 * @see 202 The move command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The cluster definition contained errors. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 403 The move command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function moveApmInstancesAdvancedUrl(params: {
  clusterId: string
  forceUpdate?: boolean | null
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    force_update: params.forceUpdate === undefined ? false : params.forceUpdate,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/_move`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/_start
 * Operation: `start-apm-instances-all`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts all the instances belonging to a Apm cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startApmInstancesAllUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/_start`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/_stop
 * Operation: `stop-apm-instances-all`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops all the instances belonging to a Apm cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopApmInstancesAllUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/_stop`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/maintenance-mode/_start
 * Operation: `start-apm-instances-all-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode of all instances belonging to a Apm cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startApmInstancesAllMaintenanceModeUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/maintenance-mode/_start`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/maintenance-mode/_stop
 * Operation: `stop-apm-instances-all-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode of all instances belonging to a Apm cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopApmInstancesAllMaintenanceModeUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/maintenance-mode/_stop`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/{instance_ids}/_move
 * Operation: `move-apm-instances`
 * DEPRECATED (Scheduled to be removed in the next major version): Moves one or more instances belonging to a Apm cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {boolean} params.forceUpdate When `true`, cancels and overwrites the pending plans, or treats the instance as an error.
 * @param {boolean} params.validateOnly When `true`, validates the move request, then returns the calculated plan without applying the plan.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link TransientApmPlanConfiguration}
 * @see 202 The move command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The cluster definition contained errors. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 403 The move command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function moveApmInstancesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  forceUpdate?: boolean | null
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
    force_update: params.forceUpdate === undefined ? false : params.forceUpdate,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/${params.instanceIds}/_move`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/{instance_ids}/_start
 * Operation: `start-apm-instances`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts the instances belonging to a Apm cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startApmInstancesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/${params.instanceIds}/_start`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/{instance_ids}/_stop
 * Operation: `stop-apm-instances`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops the instances belonging to a Apm cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopApmInstancesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/${params.instanceIds}/_stop`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start
 * Operation: `start-apm-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode of instances belonging to a Apm cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startApmMaintenanceModeUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/${params.instanceIds}/maintenance-mode/_start`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop
 * Operation: `stop-apm-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode of instances belonging to a Apm cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopApmMaintenanceModeUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/instances/${params.instanceIds}/maintenance-mode/_stop`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/metadata/name/{new_name}
 * Operation: `set-apm-name`
 * DEPRECATED (Scheduled to be removed in the next major version): Assigns a name to the APM instance.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.newName The new name for the cluster.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster name was successfully changed
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setApmNameUrl(params: {
  clusterId: string
  newName: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/metadata/name/${params.newName}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/metadata/raw
 * Operation: `get-apm-metadata-raw`
 * DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Retrieves the internal metadata, in free-form JSON, for the APM instance.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster metadata was successfully returned. See {@link object}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApmMetadataRawUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/metadata/raw`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/metadata/raw
 * Operation: `set-apm-metadata-raw`
 * DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Sets the internal metadata, in free-form JSON, for the APM instance. Only use the parameters to set the modified JSON that is returned from the get version of the metadata.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {integer} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 The cluster metadata was successfully changed (the updated JSON is returned). See {@link object}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setApmMetadataRawUrl(params: {
  clusterId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/metadata/raw`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/metadata/settings
 * Operation: `get-apm-metadata-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster metadata was successfully returned. See {@link ClusterMetadataSettings}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApmMetadataSettingsUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/metadata/settings`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/metadata/settings
 * Operation: `update-apm-metadata-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the metadata object according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {integer} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ClusterMetadataSettings}
 * @see 200 The cluster metadata was successfully updated. See {@link ClusterMetadataSettings}
 * @see 403 The provided action was prohibited for the given cluster. See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateApmMetadataSettingsUrl(params: {
  clusterId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/metadata/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/plan
 * Operation: `get-apm-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active plan of an APM cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The pending plan is applied to the APM server. See {@link ApmPlan}
 * @see 404 The {cluster_id} can't be found. (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 412 The APM server is unable to finish provisioning, or the provisioning failed. Apply a plan, then try again. (code: 'clusters.cluster_plan_state_error'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApmPlanUrl(params: {
  clusterId: string
  showPlanDefaults?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/plan`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/plan
 * Operation: `update-apm-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Updates the configuration of an existing Apm cluster.
 * @param {boolean} params.validateOnly When `true`, validates the cluster definition without performing the update.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ApmPlan}
 * @see 200 The APM server plan is valid. The return object contains an internal representation of the plan that you can use for debugging. See {@link ApmCrudResponse}
 * @see 202 The APM server plan is valid and the plan update is in progress. See {@link ApmCrudResponse}
 * @see 400 The APM server plan contains errors. (code: 'clusters.cluster_invalid_plan' and 'clusters.plan_feature_not_implemented'). See {@link BasicFailedReply}
 * @see 404 The {cluster_id} can't be found. (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.needs_elevated_permissions"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateApmPlanUrl(params: {
  validateOnly?: boolean | null
  clusterId: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/plan`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/plan/activity
 * Operation: `get-apm-cluster-plan-activity`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the current and historical plan information for a APM cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {boolean} params.showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. Default: true
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returning the plan activity for the specified APM cluster. See {@link ApmPlansInfo}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApmClusterPlanActivityUrl(params: {
  clusterId: string
  showPlanLogs?: boolean | null
  showPlanDefaults?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_plan_logs: params.showPlanLogs === undefined ? true : params.showPlanLogs,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/plan/activity`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/plan/pending
 * Operation: `get-apm-pending-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the pending plan of an APM cluster.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The pending plan is applied to the APM server. See {@link ApmPlan}
 * @see 404 The {cluster_id} can't be found. (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 412 The APM server is unable to finish provisioning, or the provisioning failed. Apply a plan, then try again. (code: 'clusters.cluster_plan_state_error'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApmPendingPlanUrl(params: {
  clusterId: string
  showPlanDefaults?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/plan/pending`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/clusters/apm/{cluster_id}/plan/pending
 * Operation: `cancel-apm-pending-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Cancels the pending plan of an APM cluster.
 * @param {boolean} params.ignoreMissing When `true`, returns successfully, even when plans are pending. The default is `false`.
 * @param {boolean} params.forceDelete When `true`, deletes the pending plan instead of attempting a graceful cancellation. The default is `false`.
 * @param {string} params.clusterId The APM deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The pending plan is cancelled. See {@link ApmCrudResponse}
 * @see 404 The {cluster_id} can't be found. (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 412 The APM server is unable to finish provisioning, or the provisioning failed. Apply a plan, then try again. (code: 'clusters.cluster_plan_state_error'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.needs_elevated_permissions"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function cancelApmPendingPlanUrl(params: {
  ignoreMissing?: boolean | null
  forceDelete?: boolean | null
  clusterId: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
    force_delete: params.forceDelete === undefined ? false : params.forceDelete,
  })
  const path = encode`/${params.regionId}/clusters/apm/${params.clusterId}/plan/pending`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch
 * Operation: `get-es-clusters`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all Elasticsearch clusters.
 * @param {integer} params.from The number of clusters to skip.
 * @param {integer} params.size Maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses and is not supported if a query is also specified. Default: 100
 * @param {string} params.q An optional query to filter Elasticsearch clusters by. Maps to an Elasticsearch query_string query.
 * @param {boolean} params.showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials.
 * @param {boolean} params.showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials.
 * @param {boolean} params.showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.convertLegacyPlans When `true`, converts the plans to the 2.0.x format. When `false`, uses the 1.x format. The default is `false`.
 * @param {boolean} params.enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template.
 * @param {integer} params.showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts.
 * @param {boolean} params.showHidden Includes the hidden clusters in the response.
 * @param {boolean} params.showSettings Includes the cluster settings in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returning the specified set of clusters from the platform. See {@link ElasticsearchClustersInfo}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClustersUrl(params: {
  from?: number | null
  size?: number | null
  q?: string | null
  showSecurity?: boolean | null
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  enrichWithTemplate?: boolean | null
  showSystemAlerts?: number | null
  showHidden?: boolean | null
  showSettings?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    from: params.from === undefined ? 0 : params.from,
    size: params.size === undefined ? 100 : params.size,
    q: params.q,
    show_security: params.showSecurity === undefined ? false : params.showSecurity,
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? false : params.showPlans,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
    enrich_with_template:
      params.enrichWithTemplate === undefined ? false : params.enrichWithTemplate,
    show_system_alerts: params.showSystemAlerts === undefined ? 0 : params.showSystemAlerts,
    show_hidden: params.showHidden,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch
 * Operation: `create-es-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Creates an Elasticsearch cluster.
 * @param {boolean} params.validateOnly When `true`, validates the cluster definition without creating the cluster.
 * @param {string} params.requestId (Optional) The idempotency token. When two create requests share the same `request_id` (minimum size of 32 characters, maximum size of 128 characters), only one cluster is created. The second request returns the information for that cluster, but the password field is blank.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link CreateElasticsearchClusterRequest}
 * @see 200 The cluster definition was valid - no further action was requested. The return object contains an internal representation of the plan, for use in debugging. See {@link ClusterCrudResponse}
 * @see 201 The cluster definition was valid and the cluster creation has started. See {@link ClusterCrudResponse}
 * @see 202 The cluster definition was valid and the cluster creation has already started. See {@link ClusterCrudResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The features used in the cluster definition have not been implemented yet. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createEsClusterUrl(params: {
  validateOnly?: boolean | null
  requestId?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
    request_id: params.requestId,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/_resync
 * Operation: `resync-es-clusters`
 * DEPRECATED (Scheduled to be removed in the next major version): Asynchronously resynchronizes the search index for all Elasticsearch clusters.
 * @param {boolean} params.skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. Default: true
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The ids of documents, organized by model version, that will be synchronized. See {@link ModelVersionIndexSynchronizationResults}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncEsClustersUrl(params: {
  skipMatchingVersion?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    skip_matching_version:
      params.skipMatchingVersion === undefined ? true : params.skipMatchingVersion,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/_resync`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1(/regions/{region_id})?/clusters/elasticsearch/_search
 * Operation: `search-es-clusters`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the Elasticsearch clusters that match the specified query.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 A list of Elasticsearch clusters that matched the given search query. See {@link ElasticsearchClustersInfo}
 * @see 400 The search request failed. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchEsClustersUrl(params: { regionId?: string | null } = emptyParams): string {
  const path =
    (params.regionId == null ? '' : '/' + encodeURIComponent(params.regionId)) +
    `/clusters/elasticsearch/_search`
  return `${params.regionId == null ? getRawBasePath() : getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/ccs/eligible_remotes
 * Operation: `get-es-ccs-eligible-remotes`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the Elasticsearch clusters that can selected as remotes in a given version.
 * @param {string} params.version The version of the cross-cluster search cluster that will link with the remote candidates.
 * @param {string} params.q (Optional) Cluster name or id prefix to filters the candidates.
 * @param {string} params.ownerId (Optional) Returns only clusters filtered by the provided owner id.
 * @param {integer} params.size (Optional) Maximum number of clusters to include in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 A list of Elasticsearch clusters that can be used as cross-cluster search remotes in deployments with the provided version. See {@link ElasticsearchClustersInfo}
 * @see 400 The search request failed. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsCcsEligibleRemotesUrl(params: {
  version: string
  q?: string | null
  ownerId?: string | null
  size?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
    q: params.q,
    owner_id: params.ownerId,
    size: params.size,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/ccs/eligible_remotes`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}
 * Operation: `get-es-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the Elasticsearch cluster information.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.showSecurity Includes the Elasticsearch 2.x security information in the response. NOTE: Responses can include a large amount of metadata, as well as credentials.
 * @param {boolean} params.showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials.
 * @param {boolean} params.showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. Default: true
 * @param {boolean} params.showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.convertLegacyPlans When `true`, converts the plans to the 2.0.x format. When `false`, uses the 1.x format. The default is `false`.
 * @param {integer} params.showSystemAlerts The number of system alerts to include in the response. For example, the number of forced restarts caused from a limited amount of memory. Only numbers greater than zero return a field. NOTE: Responses can include a large number of system alerts.
 * @param {boolean} params.showSettings Includes the cluster settings in the response.
 * @param {boolean} params.enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returning the information for the specified Elasticsearch cluster. See {@link ElasticsearchClusterInfo}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterUrl(params: {
  clusterId: string
  showSecurity?: boolean | null
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanLogs?: boolean | null
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  showSystemAlerts?: number | null
  showSettings?: boolean | null
  enrichWithTemplate?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_security: params.showSecurity === undefined ? false : params.showSecurity,
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? true : params.showPlans,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
    show_system_alerts: params.showSystemAlerts === undefined ? 0 : params.showSystemAlerts,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
    enrich_with_template:
      params.enrichWithTemplate === undefined ? false : params.enrichWithTemplate,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}
 * Operation: `delete-es-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Deletes the Elasticsearch cluster. Before you delete the Elasticsearch cluster, you must first successfully issue a `_shutdown` command.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster has been successfully deleted
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 412 The Elasticsearch cluster has not been shutdown yet. (code: `clusters.cluster_plan_state_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteEsClusterUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/_restart
 * Operation: `restart-es-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Restarts the Elasticsearch cluster. When you restart an active cluster, the existing plan is used and a `cluster_reboot` is applied. A `cluster_reboot` issues an Elasticsearch restart command, then waits for the command to complete. When you restart an inactive cluster, the most recent successful plan is applied.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.restoreSnapshot When `true` and restoring from a shutdown, restores the cluster from the last available snapshot. Default: true
 * @param {boolean} params.skipSnapshot When `true`, does not capture a snapshot before restarting the cluster. Default: true
 * @param {boolean} params.cancelPending When `true`, cancels the pending plans, then restarts the cluster.
 * @param {string} params.groupAttribute Specifies the properties that divide the instances into groups. To restart all of the instances, use '__all__'. To restart the instances by logical zone, use '__zone__'. To restart one instance at a time, use '__name__', or use a comma-separated list of instance attributes. Default: __zone__
 * @param {integer} params.shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes). Default: 600
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 400 The cluster specified by {cluster_id} is unable to restart. (code: `clusters.restart.failed`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 412 The command sent to a cluster found the cluster in an illegal state, the error message gives more details. (code: `clusters.cluster_plan_state_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function restartEsClusterUrl(params: {
  clusterId: string
  restoreSnapshot?: boolean | null
  skipSnapshot?: boolean | null
  cancelPending?: boolean | null
  groupAttribute?: string | null
  shardInitWaitTime?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    restore_snapshot: params.restoreSnapshot === undefined ? true : params.restoreSnapshot,
    skip_snapshot: params.skipSnapshot === undefined ? true : params.skipSnapshot,
    cancel_pending: params.cancelPending === undefined ? false : params.cancelPending,
    group_attribute: params.groupAttribute === undefined ? `__zone__` : params.groupAttribute,
    shard_init_wait_time: params.shardInitWaitTime === undefined ? 600 : params.shardInitWaitTime,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/_restart`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/_resync
 * Operation: `resync-es-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Immediately resynchronizes the search index and cache for the selected Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster resync operation executed successfully
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 The cluster resync operation failed for cluster {cluster_id}. (code: `clusters.resync_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncEsClusterUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/_resync`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/_shutdown
 * Operation: `shutdown-es-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Shuts down the active Elasticsearch cluster and removes all of the cluster nodes. The cluster plan is retained. WARNING: To avoid data loss, save the data outside of the cluster before you shut the cluster down.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.skipSnapshot When `true`, skips the snapshot when the cluster is shut down.
 * @param {boolean} params.hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The shutdown command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function shutdownEsClusterUrl(params: {
  clusterId: string
  skipSnapshot?: boolean | null
  hide?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    skip_snapshot: params.skipSnapshot === undefined ? false : params.skipSnapshot,
    hide: params.hide === undefined ? false : params.hide,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/_shutdown`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/_snapshot
 * Operation: `snapshot-es-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): To create a snapshot of the specified Elasticsearch cluster, uses the configured snapshot repository.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link ClusterSnapshotRequest}
 * @see 202 The create command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterSnapshotResponse}
 * @see 401 The supplied credentials for the snapshot repository are invalid. (code: `clusters.snapshot.invalid_credentials`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * The snapshot repository was not found. (code: `clusters.snapshot.repository_not_found`). See {@link BasicFailedReply}
 * @see 409 The cluster name specified is already in use. (code: `clusters.snapshot.name_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 * The snapshot request failed. (code: `clusters.snapshot.failed`)
 * The snapshot request failed. (code: `clusters.snapshot.repository_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function snapshotEsClusterUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/_snapshot`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/ccs
 * Operation: `get-es-cluster-ccs`
 * DEPRECATED (Scheduled to be removed in the next major version): Returns the list of cross-cluster search clusters' IDs for the remote cluster.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 List of cross-cluster search clusters' IDs for the remote cluster. See {@link CrossClusterSearchClusters}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterCcsUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/ccs`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/ccs/settings
 * Operation: `get-es-cluster-ccs-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): Returns cross-cluster search configuration for the Elasticsearch cluster.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The configuration for cross-cluster search. See {@link CrossClusterSearchSettings}
 * @see 404 The cluster specified by {cluster_id} or a remote cluster cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterCcsSettingsUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/ccs/settings`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/ccs/settings
 * Operation: `set-es-cluster-ccs-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): Overwrites or creates the cross-cluster search configuration for the Elasticsearch cluster.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link CrossClusterSearchSettings}
 * @see 202 The configuration for remote clusters was updated
 * @see 404 The cluster specified by {cluster_id} or a remote cluster cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setEsClusterCcsSettingsUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/ccs/settings`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/curation/settings
 * Operation: `get-es-cluster-curation-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves cluster curation settings for an Elasticsearch cluster.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster curation settings were successfully returned. See {@link ClusterCurationSettings}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterCurationSettingsUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/curation/settings`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/curation/settings
 * Operation: `update-es-cluster-curation-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): Overrides cluster curation settings for an Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {integer} params.version If specified then checks for conflicts against the version of the cluster curation settings (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ClusterCurationSettings}
 * @see 200 The cluster curation settings were successfully updated. See {@link ClusterCurationSettings}
 * @see 403 The provided action was prohibited for the given cluster. See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateEsClusterCurationSettingsUrl(params: {
  clusterId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/curation/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/_move
 * Operation: `move-es-cluster-instances-advanced`
 * DEPRECATED (Scheduled to be removed in the next major version): Moves one or more instances in the Elasticsearch cluster. The custom configuration settings are posted in the body.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.forceUpdate When `true`, cancels and overwrites the pending plans, or treats the instance as an error.
 * @param {boolean} params.instancesDown When `true`, the instances specified by `instance_ids` permanently shut down for data migration logic.
 * @param {boolean} params.moveOnly When `true`, moves the instances and ignores the changes for the cluster state.
 * @param {boolean} params.validateOnly When `true`, validates the move request, then returns the calculated plan without applying the plan.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link TransientElasticsearchPlanConfiguration}
 * @see 202 The move command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The cluster definition contained errors. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 403 The move command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function moveEsClusterInstancesAdvancedUrl(params: {
  clusterId: string
  forceUpdate?: boolean | null
  instancesDown?: boolean | null
  moveOnly?: boolean | null
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    force_update: params.forceUpdate === undefined ? false : params.forceUpdate,
    instances_down: params.instancesDown === undefined ? false : params.instancesDown,
    move_only: params.moveOnly === undefined ? false : params.moveOnly,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/_move`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/_start
 * Operation: `start-es-cluster-instances-all`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts all of the instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startEsClusterInstancesAllUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/_start`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/_stop
 * Operation: `stop-es-cluster-instances-all`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops all of the instances in the Elasticsearch cluster..
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopEsClusterInstancesAllUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/_stop`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/maintenance-mode/_start
 * Operation: `start-es-cluster-instances-all-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on all of the instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startEsClusterInstancesAllMaintenanceModeUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/maintenance-mode/_start`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/maintenance-mode/_stop
 * Operation: `stop-es-cluster-instances-all-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on all of the instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopEsClusterInstancesAllMaintenanceModeUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/maintenance-mode/_stop`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/settings
 * Operation: `set-es-cluster-instances-all-settings-overrides`
 * DEPRECATED (Scheduled to be removed in the next major version): Overrides the settings for all of the instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.restartAfterUpdate After overrides are applied, restarts the instances.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ElasticsearchClusterInstanceSettingsOverrides}
 * @see 200 Returns the updated settings overrides for the specified instances. See {@link ElasticsearchClusterInstanceSettingsOverrides}
 * @see 404 The cluster specified at {cluster_id} could not be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setEsClusterInstancesAllSettingsOverridesUrl(params: {
  clusterId: string
  restartAfterUpdate?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    restart_after_update:
      params.restartAfterUpdate === undefined ? false : params.restartAfterUpdate,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/_move
 * Operation: `move-es-cluster-instances`
 * DEPRECATED (Scheduled to be removed in the next major version): Moves one or more instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {boolean} params.forceUpdate When `true`, cancels and overwrites the pending plans, or treats the instance as an error.
 * @param {boolean} params.instancesDown When `true`, the instances specified by `instance_ids` permanently shut down for data migration logic.
 * @param {boolean} params.moveOnly When `true`, moves the specified instances and ignores the changes for the cluster state.
 * @param {boolean} params.validateOnly When `true`, validates the move request, then returns the calculated plan without applying the plan.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link TransientElasticsearchPlanConfiguration}
 * @see 202 The move command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The cluster definition contained errors. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 403 The move command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function moveEsClusterInstancesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  forceUpdate?: boolean | null
  instancesDown?: boolean | null
  moveOnly?: boolean | null
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
    force_update: params.forceUpdate === undefined ? false : params.forceUpdate,
    instances_down: params.instancesDown === undefined ? false : params.instancesDown,
    move_only: params.moveOnly === undefined ? false : params.moveOnly,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/${params.instanceIds}/_move`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/_start
 * Operation: `start-es-cluster-instances`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts the instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startEsClusterInstancesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/${params.instanceIds}/_start`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/_stop
 * Operation: `stop-es-cluster-instances`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops the instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopEsClusterInstancesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/${params.instanceIds}/_stop`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start
 * Operation: `start-es-cluster-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on the specified instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startEsClusterMaintenanceModeUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/${params.instanceIds}/maintenance-mode/_start`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop
 * Operation: `stop-es-cluster-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on the specified instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopEsClusterMaintenanceModeUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/${params.instanceIds}/maintenance-mode/_stop`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/instances/{instance_ids}/settings
 * Operation: `set-es-cluster-instances-settings-overrides`
 * DEPRECATED (Scheduled to be removed in the next major version): Overrides the settings for the specified instances in the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {boolean} params.restartAfterUpdate After overrides are applied, restarts the instances.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ElasticsearchClusterInstanceSettingsOverrides}
 * @see 200 Returns the updated settings overrides for the specified instances. See {@link ElasticsearchClusterInstanceSettingsOverrides}
 * @see 404 One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setEsClusterInstancesSettingsOverridesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  restartAfterUpdate?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
    restart_after_update:
      params.restartAfterUpdate === undefined ? false : params.restartAfterUpdate,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/instances/${params.instanceIds}/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/keystore
 * Operation: `get-es-cluster-keystore`
 * DEPRECATED (Scheduled to be removed in the next major version): Returns the available keys in the keystore.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The keystore settings are returned. See {@link KeystoreContents}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterKeystoreUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/keystore`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/keystore
 * Operation: `set-es-cluster-keystore`
 * DEPRECATED (Scheduled to be removed in the next major version): Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values.
 * @param {string} params.clusterId Identifier for the Elasticsearch cluster.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link KeystoreContents}
 * @see 202 The keystore will be updated. See {@link KeystoreContents}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setEsClusterKeystoreUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/keystore`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/metadata/name/{new_name}
 * Operation: `set-es-cluster-name`
 * DEPRECATED (Scheduled to be removed in the next major version): Assigns a name to the Elasticsearch cluster.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {string} params.newName The new name for the cluster.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster name was successfully changed
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setEsClusterNameUrl(params: {
  clusterId: string
  newName: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/metadata/name/${params.newName}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/metadata/raw
 * Operation: `get-es-cluster-metadata-raw`
 * DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Retrieves the internal cluster metadata, in free-form JSON, for the Elasticsearch cluster.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster metadata was successfully returned. See {@link object}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterMetadataRawUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/metadata/raw`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/metadata/raw
 * Operation: `set-es-cluster-metadata-raw`
 * DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Sets the internal metadata, in free-form JSON, for the Elasticsearch cluster. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {integer} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 The cluster metadata was successfully changed (the updated JSON is returned). See {@link object}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setEsClusterMetadataRawUrl(params: {
  clusterId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/metadata/raw`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/metadata/settings
 * Operation: `get-es-cluster-metadata-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster metadata was successfully returned. See {@link ClusterMetadataSettings}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterMetadataSettingsUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/metadata/settings`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/metadata/settings
 * Operation: `update-es-cluster-metadata-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the metadata object according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {integer} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ClusterMetadataSettings}
 * @see 200 The cluster metadata was successfully updated. See {@link ClusterMetadataSettings}
 * @see 403 The provided action was prohibited for the given cluster. See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateEsClusterMetadataSettingsUrl(params: {
  clusterId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/metadata/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/monitoring
 * Operation: `cancel-es-cluster-monitoring`
 * DEPRECATED (Scheduled to be removed in the next major version): Deletes all monitoring destinations for the Elasticsearch cluster.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The destination monitoring cluster removal request was initiated
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function cancelEsClusterMonitoringUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/monitoring`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/monitoring/{dest_cluster_id}
 * Operation: `set-es-cluster-monitoring`
 * DEPRECATED (Scheduled to be removed in the next major version): Overwrites or creates the monitoring destination for the Elasticsearch cluster.
 * @param {string} params.clusterId Elasticsearch cluster identifier.
 * @param {string} params.destClusterId The Elasticsearch cluster identifier for the monitoring destination.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The destination monitoring cluster creation/overwrite request was initiated
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setEsClusterMonitoringUrl(params: {
  clusterId: string
  destClusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/monitoring/${params.destClusterId}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/plan
 * Operation: `get-es-cluster-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active plan of the Elasticsearch cluster. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.convertLegacyPlans When `true`, converts the plans to the 2.0.x format. When `false`, uses the 1.x format. The default is `false`.
 * @param {boolean} params.enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster has a current applied plan. See {@link ElasticsearchClusterPlan}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 412 There is not currently applied plan - eg the cluster has not finished provisioning, or the provisioning failed. (code: `clusters.cluster_plan_state_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterPlanUrl(params: {
  clusterId: string
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  enrichWithTemplate?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
    enrich_with_template:
      params.enrichWithTemplate === undefined ? false : params.enrichWithTemplate,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/plan`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/plan
 * Operation: `update-es-cluster-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Updates the configuration of the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.validateOnly When `true`, validates the cluster definition without performing the update.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ElasticsearchClusterPlan}
 * @see 200 The cluster definition was valid - no further action was requested. The return object contains an internal representation of the plan, for use in debugging. See {@link ClusterCrudResponse}
 * @see 202 The plan definition was valid and the updated plan is in progress. See {@link ClusterCrudResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The features used in the cluster definition have not been implemented yet. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 412 Potential risky settings have been specified. (code: `clusters.cluster_plan_state_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateEsClusterPlanUrl(params: {
  clusterId: string
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/plan`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/plan/_migrate
 * Operation: `migrate-es-cluster-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Migrates the configuration of the Elasticsearch cluster to a different template.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.template The ID of the deployment template to migrate to.
 * @param {boolean} params.validateOnly When true, validates the cluster definition, but does not perform the update.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The current cluster plan migrated to the specified deployment template. See {@link ClusterPlanMigrationResponse}
 * @see 202 The plan definition was valid and the updated plan is in progress. See {@link ClusterPlanMigrationResponse}
 * @see 400 Migrating to the specified template would lead to an invalid or unsupported cluster definition. (code: `clusters.cluster_invalid_plan`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 412 There is not currently applied plan - eg the cluster has not finished provisioning, or the provisioning failed. (code: `clusters.cluster_plan_state_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function migrateEsClusterPlanUrl(params: {
  clusterId: string
  template: string
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    template: params.template,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/plan/_migrate`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/plan/activity
 * Operation: `get-es-cluster-plan-activity`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active and historical plan information for the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. Default: true
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.convertLegacyPlans When `true`, converts the plans to the 2.0.x format. When `false`, uses the 1.x format. The default is `false`.
 * @param {boolean} params.enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returning the plan activity for the specified Elasticsearch cluster. See {@link ElasticsearchClusterPlansInfo}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterPlanActivityUrl(params: {
  clusterId: string
  showPlanLogs?: boolean | null
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  enrichWithTemplate?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_plan_logs: params.showPlanLogs === undefined ? true : params.showPlanLogs,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
    enrich_with_template:
      params.enrichWithTemplate === undefined ? false : params.enrichWithTemplate,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/plan/activity`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/plan/pending
 * Operation: `get-es-cluster-pending-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the pending plan of the cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.convertLegacyPlans When `true`, converts the plans to the 2.0.x format. When `false`, uses the 1.x format. The default is `false`.
 * @param {boolean} params.enrichWithTemplate When plans are shown, includes the missing elements from the applicable deployment template.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster has a pending plan currently being applied to the cluster. See {@link ElasticsearchClusterPlan}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 412 There is not currently applied plan - eg the cluster has not finished provisioning, or the provisioning failed. (code: `clusters.cluster_plan_state_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterPendingPlanUrl(params: {
  clusterId: string
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  enrichWithTemplate?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
    enrich_with_template:
      params.enrichWithTemplate === undefined ? false : params.enrichWithTemplate,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/plan/pending`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/plan/pending
 * Operation: `cancel-es-cluster-pending-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Cancels the pending plan of the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {boolean} params.ignoreMissing When `true`, returns successfully, even when plans are pending. The default is `false`.
 * @param {boolean} params.forceDelete "When `true`, deletes the pending plan instead of attempting a graceful cancellation. The default is `false`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The pending plan has been successfully cancelled
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 412 There is not currently applied plan - eg the cluster has not finished provisioning, or the provisioning failed. (code: `clusters.cluster_plan_state_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function cancelEsClusterPendingPlanUrl(params: {
  clusterId: string
  ignoreMissing?: boolean | null
  forceDelete?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
    force_delete: params.forceDelete === undefined ? false : params.forceDelete,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/plan/pending`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}
 * Operation: `get-es-proxy-requests`
 * DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP GET request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
 * @param {string} params.clusterId Identifier for the Elasticsearch cluster.
 * @param {string} params.elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&h=i,tm&s=tm:desc.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link string}
 * @see 200 The request has been processed successfully through the proxy. See {@link void}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsProxyRequestsUrl(params: {
  clusterId: string
  elasticsearchPath: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/proxy/${{
    __path: params.elasticsearchPath,
  }}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}
 * Operation: `post-es-proxy-requests`
 * DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP POST request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
 * @param {string} params.clusterId Identifier for the Elasticsearch cluster.
 * @param {string} params.elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&h=i,tm&s=tm:desc.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link string}
 * @see 200 The request has been processed successfully through the proxy. See {@link void}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function postEsProxyRequestsUrl(params: {
  clusterId: string
  elasticsearchPath: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/proxy/${{
    __path: params.elasticsearchPath,
  }}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}
 * Operation: `put-es-proxy-requests`
 * DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP PUT request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
 * @param {string} params.clusterId Identifier for the Elasticsearch cluster.
 * @param {string} params.elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&h=i,tm&s=tm:desc.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link string}
 * @see 200 The request has been processed successfully through the proxy. See {@link void}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function putEsProxyRequestsUrl(params: {
  clusterId: string
  elasticsearchPath: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/proxy/${{
    __path: params.elasticsearchPath,
  }}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/proxy/{elasticsearch_path}
 * Operation: `delete-es-proxy-requests`
 * DEPRECATED (Scheduled to be removed in the next major version): Proxies HTTP DELETE request to the cluster. Requires that HTTP header X-Management-Request be specified. This endpoint is for management use and does not provide high performance.
 * @param {string} params.clusterId Identifier for the Elasticsearch cluster.
 * @param {string} params.elasticsearchPath The URL part to proxy to the Elasticsearch cluster. Example: _search or _cat/indices?v&h=i,tm&s=tm:desc.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link string}
 * @see 200 The request has been processed successfully through the proxy. See {@link void}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteEsProxyRequestsUrl(params: {
  clusterId: string
  elasticsearchPath: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/proxy/${{
    __path: params.elasticsearchPath,
  }}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/settings/security/legacy
 * Operation: `set-es-cluster-legacy-security-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): Sets the legacy Shield security settings for a 2.x Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link LegacySecuritySettings}
 * @see 200 Returns the updated legacy security settings for the specified cluster. See {@link LegacySecuritySettings}
 * @see 404 The cluster specified at {cluster_id} could not be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setEsClusterLegacySecuritySettingsUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/settings/security/legacy`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/snapshot/settings
 * Operation: `get-es-cluster-snapshot-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): Gets cluster snapshot settings.
 * @param {string} params.clusterId Identifier for the Elasticsearch cluster.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster snapshot settings were successfully returned. See {@link ClusterSnapshotSettings}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEsClusterSnapshotSettingsUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/snapshot/settings`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/snapshot/settings
 * Operation: `update-es-cluster-snapshot-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the snapshot settings according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
 * @param {string} params.clusterId Identifier for the Elasticsearch cluster.
 * @param {integer} params.version If specified then checks for conflicts against the version of the cluster snapshot settings (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ClusterSnapshotSettings}
 * @see 200 The cluster snapshot settings were successfully updated. See {@link ClusterSnapshotSettings}
 * @see 403 The provided action was prohibited for the given cluster. See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateEsClusterSnapshotSettingsUrl(params: {
  clusterId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/snapshot/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/support/_generate-diagnostics
 * Operation: `generate-es-cluster-diagnostics`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves a support diagnostic bundle from an active Elasticsearch cluster. To successfully retrieve a support diagnostic bundle, the cluster must be responsive.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The support diagnostic bundle was successfully generated. See {@link string}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function generateEsClusterDiagnosticsUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/support/_generate-diagnostics`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/elasticsearch/{cluster_id}/support/_generate-logs
 * Operation: `generate-es-cluster-logs`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the log file for the Elasticsearch cluster.
 * @param {string} params.clusterId The Elasticsearch cluster identifier.
 * @param {string} params.date The log retrieval start date in standard format. For example, `YYYY-MM-DD [THH [:mm] ]`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The support diagnostic bundle was successfully generated. See {@link string}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function generateEsClusterLogsUrl(params: {
  clusterId: string
  date: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    date: params.date,
  })
  const path = encode`/${params.regionId}/clusters/elasticsearch/${params.clusterId}/support/_generate-logs`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/kibana
 * Operation: `get-kibana-clusters`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all Kibana instances.
 * @param {integer} params.from The number of clusters to skip.
 * @param {integer} params.size The maximum number of clusters to include in the response. For all clusters, use -1. NOTE: This option can result in large responses. Default: 100
 * @param {string} params.q An optional query to filter Kibana clusters by. Maps to an Elasticsearch query_string query.
 * @param {boolean} params.showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials.
 * @param {boolean} params.showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses.
 * @param {boolean} params.showHidden Includes the hidden clusters in the response.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.showSettings Includes the cluster settings in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returning the specified set of clusters from the platform. See {@link KibanaClustersInfo}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getKibanaClustersUrl(params: {
  from?: number | null
  size?: number | null
  q?: string | null
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showHidden?: boolean | null
  showPlanDefaults?: boolean | null
  showSettings?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    from: params.from === undefined ? 0 : params.from,
    size: params.size === undefined ? 100 : params.size,
    q: params.q,
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans,
    show_hidden: params.showHidden === undefined ? false : params.showHidden,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
  })
  const path = encode`/${params.regionId}/clusters/kibana`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana
 * Operation: `create-kibana-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Creates a Kibana instance for the Elasticsearch cluster.
 * @param {boolean} params.validateOnly When `true`, validates the cluster definition without creating the cluster.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link CreateKibanaRequest}
 * @see 200 The cluster definition was valid - no further action was requested. The return object contains an internal representation of the plan, for use in debugging. See {@link ClusterCrudResponse}
 * @see 201 The cluster definition was valid and the cluster creation has started. See {@link ClusterCrudResponse}
 * @see 400 The cluster definition contained errors (code: 'clusters.cluster_invalid_plan' and 'clusters.plan_feature_not_implemented'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createKibanaClusterUrl(params: {
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/kibana`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/_resync
 * Operation: `resync-kibana-clusters`
 * DEPRECATED (Scheduled to be removed in the next major version): Asynchronously resynchronizes the search index for all Kibana instances.
 * @param {boolean} params.skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. Default: true
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The ids of documents, organized by model version, that will be synchronized. See {@link ModelVersionIndexSynchronizationResults}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncKibanaClustersUrl(params: {
  skipMatchingVersion?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    skip_matching_version:
      params.skipMatchingVersion === undefined ? true : params.skipMatchingVersion,
  })
  const path = encode`/${params.regionId}/clusters/kibana/_resync`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1(/regions/{region_id})?/clusters/kibana/_search
 * Operation: `search-kibana-clusters`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the information for all of the Kibana instances that match the specified query.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 A list of Kibana clusters that matched the given search query. See {@link KibanaClustersInfo}
 * @see 400 The search request failed. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchKibanaClustersUrl(
  params: { regionId?: string | null } = emptyParams,
): string {
  const path =
    (params.regionId == null ? '' : '/' + encodeURIComponent(params.regionId)) +
    `/clusters/kibana/_search`
  return `${params.regionId == null ? getRawBasePath() : getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}
 * Operation: `get-kibana-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the Kibana instance information.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {boolean} params.showMetadata Includes all of the cluster metadata in the response. NOTE: Responses can include a large amount of metadata, as well as credentials.
 * @param {boolean} params.showPlans Includes the active and pending plan information in the response. NOTE: This option can result in large responses. Default: true
 * @param {boolean} params.showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.showSettings Includes the cluster settings in the response.
 * @param {boolean} params.convertLegacyPlans When `true`, converts the plans to the 2.0.x format. When `false`, uses the 1.x format. The default is `false`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returning the information for the specified Kibana cluster. See {@link KibanaClusterInfo}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getKibanaClusterUrl(params: {
  clusterId: string
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanLogs?: boolean | null
  showPlanDefaults?: boolean | null
  showSettings?: boolean | null
  convertLegacyPlans?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? true : params.showPlans,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}
 * Operation: `delete-kibana-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Deletes the Kibana instance. Before you delete the Kibana instance, you must first successfully issue a `_shutdown` command.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster has been successfully deleted
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 412 The Kibana cluster has not been shutdown yet (code: 'clusters.cluster_plan_state_error'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteKibanaClusterUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/_restart
 * Operation: `restart-kibana-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Restarts the Kibana instance. When you restart an active instance, the existing plan is used and a `cluster_reboot` is applied. A `cluster_reboot` issues a Kibana restart command, then waits for the command to complete. When you restart an inactive instance, the most recent successful plan is applied.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {boolean} params.cancelPending When `true`, cancels the pending plans, then restarts the cluster.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 412 The command sent to a cluster found the cluster in an illegal state, the error message gives more details. (code: `clusters.cluster_plan_state_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function restartKibanaClusterUrl(params: {
  clusterId: string
  cancelPending?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    cancel_pending: params.cancelPending === undefined ? false : params.cancelPending,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/_restart`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/_resync
 * Operation: `resync-kibana-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Immediately resynchronizes the search index and cache for the selected Kibana instance.
 * @param {string} params.clusterId The Kibana instance identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster resync operation executed successfully
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 The cluster resync operation failed for cluster {cluster_id}. (code: `clusters.resync_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncKibanaClusterUrl(params: { clusterId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/_resync`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/_shutdown
 * Operation: `shutdown-kibana-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Shuts down the active Kibana instance and removes all of the instance nodes. The instance definition is retained. WARNING: To avoid data loss, save the snapshot repository before you shut down the instance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {boolean} params.hide Hides the clusters during shutdown. NOTE: By default, hidden clusters are not listed.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The shutdown command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function shutdownKibanaClusterUrl(params: {
  clusterId: string
  hide?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    hide: params.hide === undefined ? false : params.hide,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/_shutdown`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/_upgrade
 * Operation: `upgrade-kibana-cluster`
 * DEPRECATED (Scheduled to be removed in the next major version): Upgrades an active Kibana instance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {boolean} params.validateOnly When `true`, returns the update version without performing the upgrade.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The upgrade command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterUpgradeInfo}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function upgradeKibanaClusterUrl(params: {
  clusterId: string
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/_upgrade`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/_move
 * Operation: `move-kibana-cluster-instances-advanced`
 * DEPRECATED (Scheduled to be removed in the next major version): Moves one or more Kibana instances. The custom configuration settings are posted in the body.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {boolean} params.forceUpdate When `true`, cancels and overwrites the pending plans, or treats the instance as an error.
 * @param {boolean} params.validateOnly When `true`, validates the move request, then returns the calculated plan without applying the plan.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link TransientKibanaPlanConfiguration}
 * @see 202 The move command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The cluster definition contained errors. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 403 The move command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function moveKibanaClusterInstancesAdvancedUrl(params: {
  clusterId: string
  forceUpdate?: boolean | null
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    force_update: params.forceUpdate === undefined ? false : params.forceUpdate,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/_move`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/_start
 * Operation: `start-kibana-cluster-instances-all`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts all of the Kibana instances.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startKibanaClusterInstancesAllUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/_start`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/_stop
 * Operation: `stop-kibana-cluster-instances-all`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops all of the Kibana instances.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopKibanaClusterInstancesAllUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/_stop`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/maintenance-mode/_start
 * Operation: `start-kibana-cluster-instances-all-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on all of the Kibana instances.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startKibanaClusterInstancesAllMaintenanceModeUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/maintenance-mode/_start`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/maintenance-mode/_stop
 * Operation: `stop-kibana-cluster-instances-all-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on all of the Kibana instances.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopKibanaClusterInstancesAllMaintenanceModeUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/maintenance-mode/_stop`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/{instance_ids}/_move
 * Operation: `move-kibana-cluster-instances`
 * DEPRECATED (Scheduled to be removed in the next major version): Moves one or more Kibana instances.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {boolean} params.forceUpdate When `true`, cancels and overwrites the pending plans, or treats the instance as an error.
 * @param {boolean} params.validateOnly When `true`, validates the move request, then returns the calculated plan without applying the plan.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link TransientKibanaPlanConfiguration}
 * @see 202 The move command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The cluster definition contained errors. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 403 The move command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function moveKibanaClusterInstancesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  forceUpdate?: boolean | null
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
    force_update: params.forceUpdate === undefined ? false : params.forceUpdate,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/${params.instanceIds}/_move`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/{instance_ids}/_start
 * Operation: `start-kibana-cluster-instances`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts the specified Kibana instances.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startKibanaClusterInstancesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/${params.instanceIds}/_start`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/{instance_ids}/_stop
 * Operation: `stop-kibana-cluster-instances`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops the specified Kibana instances.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopKibanaClusterInstancesUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/${params.instanceIds}/_stop`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/{instance_ids}/maintenance-mode/_start
 * Operation: `start-kibana-cluster-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Starts maintenance mode on the specified Kibana instances.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startKibanaClusterMaintenanceModeUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/${params.instanceIds}/maintenance-mode/_start`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/instances/{instance_ids}/maintenance-mode/_stop
 * Operation: `stop-kibana-cluster-maintenance-mode`
 * DEPRECATED (Scheduled to be removed in the next major version): Stops maintenance mode on the specified Kibana instances.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing When `true` and the instance does not exist, proceeds to the next instance, or treats the instance as an error.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop maintenance mode command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link ClusterCommandResponse}
 * @see 403 The stop maintenance mode command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 * The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`)
 * One or more of the instances specified at {instance_ids} could not be found. (code: `clusters.instances_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopKibanaClusterMaintenanceModeUrl(params: {
  clusterId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/instances/${params.instanceIds}/maintenance-mode/_stop`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/metadata/name/{new_name}
 * Operation: `set-kibana-cluster-name`
 * DEPRECATED (Scheduled to be removed in the next major version): Assigns a name to the Kibana instance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.newName The new name for the cluster.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster name was successfully changed
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setKibanaClusterNameUrl(params: {
  clusterId: string
  newName: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/metadata/name/${params.newName}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/metadata/raw
 * Operation: `get-kibana-cluster-metadata-raw`
 * DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Retrieves the internal metadata, in free-form JSON, for the Kibana instance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster metadata was successfully returned. See {@link object}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getKibanaClusterMetadataRawUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/metadata/raw`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/metadata/raw
 * Operation: `set-kibana-cluster-metadata-raw`
 * DEPRECATED (Scheduled to be removed in the next major version): Advanced use only. Sets the internal metadata, in free-form JSON, for the Kibana instance. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {integer} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 The cluster metadata was successfully changed (the updated JSON is returned). See {@link object}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setKibanaClusterMetadataRawUrl(params: {
  clusterId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/metadata/raw`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/metadata/settings
 * Operation: `get-kibana-cluster-metadata-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves a structured version of the cluster metadata as a collection of top-level settings. If a particular setting isn't returned, then the free-form JSON endpoint (`/metadata/raw`) must be used.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster metadata was successfully returned. See {@link ClusterMetadataSettings}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getKibanaClusterMetadataSettingsUrl(params: {
  clusterId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/metadata/settings`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/metadata/settings
 * Operation: `update-kibana-cluster-metadata-settings`
 * DEPRECATED (Scheduled to be removed in the next major version): All changes in the specified object are applied to the metadata object according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {integer} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ClusterMetadataSettings}
 * @see 200 The cluster metadata was successfully updated. See {@link ClusterMetadataSettings}
 * @see 403 The provided action was prohibited for the given cluster. See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateKibanaClusterMetadataSettingsUrl(params: {
  clusterId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/metadata/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/plan
 * Operation: `get-kibana-cluster-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active plan of the Kibana instance. Transient settings are not show by this endpoint. To view the transient settings that have been applied with a specific plan, use the activity endpoint.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.convertLegacyPlans When `true`, converts the plans to the 2.0.x format. When `false`, uses the 1.x format. The default is `false`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster has a current applied plan. See {@link KibanaClusterPlan}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 412 There is not currently applied plan - eg the cluster has not finished provisioning, or the provisioning failed (code: 'clusters.cluster_plan_state_error'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getKibanaClusterPlanUrl(params: {
  clusterId: string
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/plan`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/plan
 * Operation: `update-kibana-cluster-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Updates the configuration of the Kibana instance.
 * @param {boolean} params.validateOnly When `true`, validates the cluster definition without performing the update.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link KibanaClusterPlan}
 * @see 200 The cluster definition was valid - no further action was requested. The return object contains an internal representation of the plan, for use in debugging. See {@link ClusterCrudResponse}
 * @see 202 The plan definition was valid and the updated plan is in progress. See {@link ClusterCrudResponse}
 * @see 400 The cluster definition contained errors (code: 'clusters.cluster_invalid_plan' and 'clusters.plan_feature_not_implemented'). See {@link BasicFailedReply}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateKibanaClusterPlanUrl(params: {
  validateOnly?: boolean | null
  clusterId: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/plan`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/plan/activity
 * Operation: `get-kibana-cluster-plan-activity`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the active and historical plan information for the Kibana instance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {boolean} params.showPlanLogs Includes the active, pending, and historical plan information in the attempt log. NOTE: This option can result in large responses. Default: true
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.convertLegacyPlans When `true`, converts the plans to the 2.0.x format. When `false`, uses the 1.x format. The default is `false`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returning the plan activity for the specified Kibana cluster. See {@link KibanaClusterPlansInfo}
 * @see 404 The cluster specified by {cluster_id} cannot be found. (code: `clusters.cluster_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getKibanaClusterPlanActivityUrl(params: {
  clusterId: string
  showPlanLogs?: boolean | null
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_plan_logs: params.showPlanLogs === undefined ? true : params.showPlanLogs,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/plan/activity`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/plan/pending
 * Operation: `get-kibana-cluster-pending-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Retrieves the pending plan of the Kibana instance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {boolean} params.showPlanDefaults When plans are shown, includes the default values in the response. NOTE: This option results in large responses.
 * @param {boolean} params.convertLegacyPlans When `true`, converts the plans to the 2.0.x format. When `false`, uses the 1.x format. The default is `false`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The cluster has a pending plan currently being applied to the cluster. See {@link KibanaClusterPlan}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 412 There is not currently applied plan - eg the cluster has not finished provisioning, or the provisioning failed (code: 'clusters.cluster_plan_state_error'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getKibanaClusterPendingPlanUrl(params: {
  clusterId: string
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/plan/pending`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/plan/pending
 * Operation: `cancel-kibana-cluster-pending-plan`
 * DEPRECATED (Scheduled to be removed in the next major version): Cancels the pending plan of the Kibana instance.
 * @param {boolean} params.ignoreMissing When `true`, returns successfully, even when plans are pending. The default is `false`.
 * @param {boolean} params.forceDelete When `true`, deletes the pending plan instead of attempting a graceful cancellation. The default is `false`.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The pending plan has been successfully cancelled
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @see 412 There is not currently applied plan - eg the cluster has not finished provisioning, or the provisioning failed (code: 'clusters.cluster_plan_state_error'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function cancelKibanaClusterPendingPlanUrl(params: {
  ignoreMissing?: boolean | null
  forceDelete?: boolean | null
  clusterId: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
    force_delete: params.forceDelete === undefined ? false : params.forceDelete,
  })
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/plan/pending`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/proxy/{kibana_path}
 * Operation: `get-kib-proxy-requests`
 * DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP GET request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The request has been processed successfully through the proxy. See {@link void}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getKibProxyRequestsUrl(params: {
  clusterId: string
  kibanaPath: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/proxy/${{
    __path: params.kibanaPath,
  }}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/proxy/{kibana_path}
 * Operation: `post-kib-proxy-requests`
 * DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP POST request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link string}
 * @see 200 The request has been processed successfully through the proxy. See {@link void}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function postKibProxyRequestsUrl(params: {
  clusterId: string
  kibanaPath: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/proxy/${{
    __path: params.kibanaPath,
  }}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/proxy/{kibana_path}
 * Operation: `put-kib-proxy-requests`
 * DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP PUT request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link string}
 * @see 200 The request has been processed successfully through the proxy. See {@link void}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function putKibProxyRequestsUrl(params: {
  clusterId: string
  kibanaPath: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/proxy/${{
    __path: params.kibanaPath,
  }}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/clusters/kibana/{cluster_id}/proxy/{kibana_path}
 * Operation: `delete-kib-proxy-requests`
 * DEPRECATED (Scheduled to be removed in the next major version): Proxies the HTTP DELETE request to the cluster. You must specify the `X-Management-Request` HTTP header. NOTE: Use this endpoint for management purposes. It does not provide high performance.
 * @param {string} params.clusterId The Kibana deployment identifier.
 * @param {string} params.kibanaPath The URL part to proxy to the Kibana cluster. Example: /api/spaces/space or /api/upgrade_assistant/status.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The request has been processed successfully through the proxy. See {@link void}
 * @see 404 The cluster specified by {cluster_id} cannot be found (code: 'clusters.cluster_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteKibProxyRequestsUrl(params: {
  clusterId: string
  kibanaPath: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/clusters/kibana/${params.clusterId}/proxy/${{
    __path: params.kibanaPath,
  }}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/comments/{resource_type}/{resource_id}
 * Operation: `list-comment`
 * Retrieves all the comments for a given Resource, in reverse modified time order.
 * @param {string} params.resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprise_search, allocator, constructor, runner, proxy].
 * @param {string} params.resourceId Id of the Resource that a Comment belongs to.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Comments. See {@link CommentsWithMetas}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listCommentUrl(params: {
  resourceType: string
  resourceId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/comments/${params.resourceType}/${params.resourceId}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/comments/{resource_type}/{resource_id}
 * Operation: `create-comment`
 * Creates a comment for the given Resource.
 * @param {string} params.resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprise_search, allocator, constructor, runner, proxy].
 * @param {string} params.resourceId Id of the Resource that a Comment belongs to.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link CommentCreateRequest}
 * @see 201 The Comment that was just created. See {@link Comment}
 * @see 401 Your current session does not have a user id associated with it. (code: `comments.no_user_id`). See {@link BasicFailedReply}
 * @see 404 No Resource of the given type and id exist. (code: `comments.resource_does_not_exist`). See {@link BasicFailedReply}
 * @see 409 A Comment already exists with the generated id. Please try again. (code: `comments.id_already_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createCommentUrl(params: {
  resourceType: string
  resourceId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/comments/${params.resourceType}/${params.resourceId}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/comments/{resource_type}/{resource_id}/{comment_id}
 * Operation: `get-comment`
 * Retrieves a Comment.
 * @param {string} params.resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprise_search, allocator, constructor, runner, proxy].
 * @param {string} params.resourceId Id of the Resource that a Comment belongs to.
 * @param {string} params.commentId Id of a Comment.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Comment. See {@link Comment}
 * @see 404 The Comment you want does not exist. (code: `comments.comment_does_not_exist`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getCommentUrl(params: {
  resourceType: string
  resourceId: string
  commentId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/comments/${params.resourceType}/${params.resourceId}/${params.commentId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/comments/{resource_type}/{resource_id}/{comment_id}
 * Operation: `update-comment`
 * Updates a Comment.
 * @param {string} params.resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprise_search, allocator, constructor, runner, proxy].
 * @param {string} params.resourceId Id of the Resource that a Comment belongs to.
 * @param {string} params.commentId Id of a Comment.
 * @param {string} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link CommentUpdateRequest}
 * @see 200 Comment updated successfully. See {@link Comment}
 * @see 401 * The Comment does not belong to you. (code: `comments.unauthorised`)
 * Your current session does not have a user id associated with it. (code: `comments.no_user_id`). See {@link BasicFailedReply}
 * @see 404 The Comment you want does not exist. (code: `comments.comment_does_not_exist`). See {@link BasicFailedReply}
 * @see 409 The version you sent does not match the persisted version. (code: `comments.version_conflict`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateCommentUrl(params: {
  resourceType: string
  resourceId: string
  commentId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/comments/${params.resourceType}/${params.resourceId}/${params.commentId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/comments/{resource_type}/{resource_id}/{comment_id}
 * Operation: `delete-comment`
 * Deletes a Comment.
 * @param {string} params.resourceType The kind of Resource that a Comment belongs to. Should be one of [elasticsearch, kibana, apm, appsearch, enterprise_search, allocator, constructor, runner, proxy].
 * @param {string} params.resourceId Id of the Resource that a Comment belongs to.
 * @param {string} params.commentId Id of a Comment.
 * @param {string} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Comment deleted successfully.
 * @see 401 * The Comment does not belong to you. (code: `comments.unauthorised`)
 * Your current session does not have a user id associated with it. (code: `comments.no_user_id`). See {@link BasicFailedReply}
 * @see 404 The Comment you want does not exist. (code: `comments.comment_does_not_exist`). See {@link BasicFailedReply}
 * @see 409 The version you sent does not match the persisted version. (code: `comments.version_conflict`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteCommentUrl(params: {
  resourceType: string
  resourceId: string
  commentId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/comments/${params.resourceType}/${params.resourceId}/${params.commentId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/deployments
 * Operation: `list-deployments`
 * List Deployments.
 * @see 200 The list of deployments that belong to the authenticated user. See {@link DeploymentsListResponse}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listDeploymentsUrl(): string {
  const path = `/deployments`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments
 * Operation: `create-deployment`
 * Creates a Deployment.
 * @param {string} params.requestId An optional idempotency token - if two create requests share the same request_id token (min size 32 characters, max 128) then only one deployment will be created, the second request will return the info of that deployment (in the same format described below, but with blanks for auth-related fields).
 * @param {boolean} params.validateOnly If true, will just validate the Deployment definition but will not perform the creation.
 * @see Accepts a request payload of type {@link DeploymentCreateRequest}
 * @see 200 The request was valid (used when validate_only is true). See {@link DeploymentCreateResponse}
 * @see 201 The request was valid and a new deployment was created. See {@link DeploymentCreateResponse}
 * @see 202 The request was valid and deployment creation had already been started. See {@link DeploymentCreateResponse}
 * @see 400 The deployment request had errors. See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createDeploymentUrl(
  params: { requestId?: string | null; validateOnly?: boolean | null } = emptyParams,
): string {
  const queryString = buildQueryString({
    request_id: params.requestId,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = `/deployments`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/deployments/_resync
 * Operation: `resync-deployments`
 * Resynchronizes the search index for all the deployments.
 * @param {boolean} params.skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. Default: true
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The deployments resync operation executed successfully. See {@link IndexSynchronizationResults}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 The deployments resync operation failed. (code: `deployments.resync_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncDeploymentsUrl(params: {
  skipMatchingVersion?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    skip_matching_version:
      params.skipMatchingVersion === undefined ? true : params.skipMatchingVersion,
  })
  const path = encode`/${params.regionId}/deployments/_resync`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/_search
 * Operation: `search-deployments`
 * Retrieves the information for all of the deployments that match the specified query.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 The list of deployments that match the specified query and belong to the authenticated user. See {@link DeploymentsSearchResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchDeploymentsUrl(): string {
  const path = `/deployments/_search`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/eligible-remote-clusters
 * Operation: `search-eligible-remote-clusters`
 * Returns the list of deployments which contain eligible remote clusters for a specific version.
 * @param {string} params.version The version of the Elasticsearch cluster cluster that will potentially be configured to have remote clusters.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 List of deployments which contains eligible remote clusters for a specific version. See {@link DeploymentsSearchResponse}
 * @see 400 The provided version is invalid. (code: `stackpack.invalid_version`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchEligibleRemoteClustersUrl(params: { version: string }): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = `/deployments/eligible-remote-clusters`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/deployments/extensions
 * Operation: `list-extensions`
 * Retrieves all of the available extensions.
 * @param {boolean} params.includeDeployments Include deployments referencing this extension.
DEPRECATED: To get the list of deployments that reference an extension, use the Get Extension API.
.
 * @see 200 The extensions that are available. See {@link Extensions}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listExtensionsUrl(
  params: { includeDeployments?: boolean | null } = emptyParams,
): string {
  const queryString = buildQueryString({
    include_deployments:
      params.includeDeployments === undefined ? false : params.includeDeployments,
  })
  const path = `/deployments/extensions`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/extensions
 * Operation: `create-extension`
 * Creates the extension.  The extensions API supports two types of usage patterns.  A). Specify a `download_url`, http or https URL,  where the extension is currently hosted. This will result in extension being copied to elastic repository.  B). Create only the extension metadata using the `POST` endpoint and then use `PUT` to upload the extension file. Leave the `download_url` unspecified in this case. .
 * @see Accepts a request payload of type {@link CreateExtensionRequest}
 * @see 201 The extension that was just created. See {@link Extension}
 * @see 400 Could not download the extension from the specified URL. (code: `extensions.request_execution_failed`). See {@link BasicFailedReply}
 * @see 404 Your current session does not have a user id associated with it. (code: `extensions.no_user_id`). See {@link BasicFailedReply}
 * @see 409 An extension already exists with the generated id. Please try again. (code: `extensions.id_already_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createExtensionUrl(): string {
  const path = `/deployments/extensions`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/deployments/extensions/{extension_id}
 * Operation: `get-extension`
 * Retrieves an extension.
 * @param {string} params.extensionId Id of an extension.
 * @param {boolean} params.includeDeployments Include deployments referencing this extension. Up to only 10000 deployments will be included.
 * @see 200 The Extension. See {@link Extension}
 * @see 404 The extension requested does not exist. (code: `extensions.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getExtensionUrl(params: {
  extensionId: string
  includeDeployments?: boolean | null
}): string {
  const queryString = buildQueryString({
    include_deployments:
      params.includeDeployments === undefined ? false : params.includeDeployments,
  })
  const path = encode`/deployments/extensions/${params.extensionId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/extensions/{extension_id}
 * Operation: `update-extension`
 * Updates an extension.
 * @param {string} params.extensionId Id of an extension.
 * @see Accepts a request payload of type {@link UpdateExtensionRequest}
 * @see 200 Extension updated successfully. See {@link Extension}
 * @see 400 Could not download the extension from the specified URL. (code: `extensions.request_execution_failed`). See {@link BasicFailedReply}
 * @see 401 * The extension does not belong to you. (code: `extensions.unauthorised`)
 * Your current session does not have a user id associated with it. (code: `extensions.no_user_id`). See {@link BasicFailedReply}
 * @see 404 The extension you want does not exist. (code: `extensions.not_found`). See {@link BasicFailedReply}
 * @see 409 The version you sent does not match the persisted version. (code: `extensions.version_conflict`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateExtensionUrl(params: { extensionId: string }): string {
  const path = encode`/deployments/extensions/${params.extensionId}`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/deployments/extensions/{extension_id}
 * Operation: `upload-extension`
 * Uploads archive for an extension.
 * @param {string} params.extensionId Id of an extension.
 * @see Accepts a request payload of type {@link File}
 * @see 200 Archive uploaded successfully. See {@link Extension}
 * @see 400 Could not accept the extensions file. (code: `extensions.request_execution_failed`). See {@link BasicFailedReply}
 * @see 401 * The extension does not belong to you. (code: `extensions.unauthorised`)
 * Your current session does not have a user id associated with it. (code: `extensions.no_user_id`). See {@link BasicFailedReply}
 * @see 404 The extension you want does not exist. (code: `extensions.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function uploadExtensionUrl(params: { extensionId: string }): string {
  const path = encode`/deployments/extensions/${params.extensionId}`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/deployments/extensions/{extension_id}
 * Operation: `delete-extension`
 * Deletes a Extension.
 * @param {string} params.extensionId Id of an extension.
 * @see 200 Extension deleted successfully.
 * @see 401 * The extension does not belong to you. (code: `extensions.unauthorised`)
 * Your current session does not have a user id associated with it. (code: `extensions.no_user_id`). See {@link BasicFailedReply}
 * @see 404 The extension requested does not exist. (code: `extensions.not_found`). See {@link BasicFailedReply}
 * @see 409 The version you sent does not match the persisted version. (code: `extensions.version_conflict`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteExtensionUrl(params: { extensionId: string }): string {
  const path = encode`/deployments/extensions/${params.extensionId}`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/ip-filtering/associations/{association_type}/{associated_entity_id}/rulesets
 * Operation: `get-ip-filter-deployment-ruleset-associations`
 * DEPRECATED: Retrieves the rulesets associated with a deployment.
 * @param {string} params.associationType Mandatory association type ID.
 * @param {string} params.associatedEntityId Mandatory associated entity ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Rulesets in the deployment were successfully returned. See {@link IpFilteringSettings}
 * @see 500 Request execution failed (code: 'ip_filtering.request_execution_failed'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getIpFilterDeploymentRulesetAssociationsUrl(params: {
  associationType: string
  associatedEntityId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/deployments/ip-filtering/associations/${params.associationType}/${params.associatedEntityId}/rulesets`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/ip-filtering/rulesets
 * Operation: `get-ip-filter-rulesets`
 * DEPRECATED: Retrieves all of the user rulesets. Deprecated in favor of traffic-filter endpoints.
 * @param {boolean} params.includeAssociations Retrieves a list of resources that are associated to the specified ruleset.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The IP filter rulesets for the user were successfully returned. See {@link IpFilterRulesets}
 * @see 500 The request execution failed (code: 'ip_filtering.request_execution_failed'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getIpFilterRulesetsUrl(params: {
  includeAssociations?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    include_associations:
      params.includeAssociations === undefined ? false : params.includeAssociations,
  })
  const path = encode`/${params.regionId}/deployments/ip-filtering/rulesets`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/deployments/ip-filtering/rulesets
 * Operation: `create-ip-filter-ruleset`
 * DEPRECATED: Creates a ruleset that combines a set of rules. Deprecated in favor of traffic-filter endpoints.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link IpFilterRuleset}
 * @see 201 The ruleset definition is valid and the creation has started. See {@link RuleSetResponse}
 * @see 400 The ruleset definition contains errors (code: 'ip_filtering.ruleset_invalid'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @see 500 The request execution failed (code: 'ip_filtering.request_execution_failed'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createIpFilterRulesetUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/deployments/ip-filtering/rulesets`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/ip-filtering/rulesets/{ruleset_id}
 * Operation: `get-ip-filter-ruleset`
 * DEPRECATED: Retrieves the ruleset by ID. Deprecated in favor of traffic-filter endpoints.
 * @param {string} params.rulesetId The mandatory ruleset ID.
 * @param {boolean} params.includeAssociations Retrieves a list of resources that are associated to the specified ruleset.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The IP filter ruleset was successfully returned. See {@link IpFilterRuleset}
 * @see 404 The IP filter ruleset specified by {ruleset_id} cannot be found (code: 'ip_filtering.ruleset_not_found'). See {@link BasicFailedReply}
 * @see 500 The request execution failed (code: 'ip_filtering.request_execution_failed'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getIpFilterRulesetUrl(params: {
  rulesetId: string
  includeAssociations?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    include_associations:
      params.includeAssociations === undefined ? false : params.includeAssociations,
  })
  const path = encode`/${params.regionId}/deployments/ip-filtering/rulesets/${params.rulesetId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/deployments/ip-filtering/rulesets/{ruleset_id}
 * Operation: `update-ip-filter-ruleset`
 * DEPRECATED: Updates the ruleset with the definition. Deprecated in favor of traffic-filter endpoints.
 * @param {string} params.rulesetId The mandatory ruleset ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link IpFilterRuleset}
 * @see 200 The ruleset definition was valid and the update has started. See {@link RuleSetResponse}
 * @see 400 The ruleset definition contains errors (code: 'ip_filtering.ruleset_invalid'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @see 500 The request execution failed (code: 'ip_filtering.request_execution_failed'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateIpFilterRulesetUrl(params: { rulesetId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/deployments/ip-filtering/rulesets/${params.rulesetId}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/deployments/ip-filtering/rulesets/{ruleset_id}
 * Operation: `delete-ip-filter-ruleset`
 * DEPRECATED: Deletes the ruleset by ID. Deprecated in favor of traffic-filter endpoints.
 * @param {string} params.rulesetId The mandatory ruleset ID.
 * @param {boolean} params.ignoreAssociations When true, ignores the associations and deletes the rule set. When false, recognizes the associations, which prevents the deletion of the rule set.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The IP filter ruleset was successfully deleted
 * @see 404 The IP filter ruleset specified by {ruleset_id} cannot be found (code: 'ip_filtering.ruleset_not_found'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @see 500 The request execution failed (code: 'ip_filtering.request_execution_failed'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteIpFilterRulesetUrl(params: {
  rulesetId: string
  ignoreAssociations?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    ignore_associations: params.ignoreAssociations,
  })
  const path = encode`/${params.regionId}/deployments/ip-filtering/rulesets/${params.rulesetId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/ip-filtering/rulesets/{ruleset_id}/associations
 * Operation: `get-ip-filter-ruleset-deployment-associations`
 * DEPRECATED: Retrieves a list of deployments that are associated to the specified ruleset.
 * @param {string} params.rulesetId Mandatory ruleset ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Associations referred by IP filter rulesets were successfully returned. See {@link RulesetAssociations}
 * @see 500 Request execution failed (code: 'ip_filtering.request_execution_failed'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getIpFilterRulesetDeploymentAssociationsUrl(params: {
  rulesetId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/deployments/ip-filtering/rulesets/${params.rulesetId}/associations`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/deployments/ip-filtering/rulesets/{ruleset_id}/associations
 * Operation: `create-ip-filter-ruleset-association`
 * DEPRECATED: Applies the ruleset to the specified deployment.
 * @param {string} params.rulesetId Mandatory ruleset ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link FilterAssociation}
 * @see 201 Create association request was valid and the association has been created
 * @see 404 Associated entity specified by {id} cannot be found (code: 'ip_filtering.associated_entity_not_found'). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @see 500 Request execution failed (code: 'ip_filtering.request_execution_failed'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createIpFilterRulesetAssociationUrl(params: {
  rulesetId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/deployments/ip-filtering/rulesets/${params.rulesetId}/associations`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/deployments/ip-filtering/rulesets/{ruleset_id}/associations/{association_type}/{associated_entity_id}
 * Operation: `delete-ip-filter-ruleset-association`
 * DEPRECATED: Deletes the traffic rules in the ruleset from the deployment.
 * @param {string} params.rulesetId Mandatory ruleset ID.
 * @param {string} params.associationType Mandatory association type ID.
 * @param {string} params.associatedEntityId Mandatory associated entity ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Delete association request was valid and the association has been deleted
 * @see 449 Elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @see 500 Request execution failed (code: 'ip_filtering.request_execution_failed'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteIpFilterRulesetAssociationUrl(params: {
  rulesetId: string
  associationType: string
  associatedEntityId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/deployments/ip-filtering/rulesets/${params.rulesetId}/associations/${params.associationType}/${params.associatedEntityId}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/deployments/templates
 * Operation: `get-deployment-templates-v2`
 * Retrieves all deployment templates.
 * @param {string} params.metadata An optional key/value pair in the form of (key:value) that will act as a filter and exclude any templates that do not have a matching metadata item associated.
 * @param {boolean} params.showInstanceConfigurations If true, will return details for each instance configuration referenced by the template. Default: true
 * @param {string} params.stackVersion If present, it will cause the returned deployment templates to be adapted to return only the elements allowed in that version.
 * @param {boolean} params.showHidden If true, templates flagged as hidden will be returned.
 * @param {string} params.region Region of the deployment templates.
 * @see 200 The deployment templates were returned successfully. See {@link Array<DeploymentTemplateInfoV2>}
 * @see 400 The requested region was not found. (code: `templates.region_not_found`). See {@link BasicFailedReply}
 * @see 401 The user is not authorized to access requested region. (code: `templates.region_not_allowed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentTemplatesV2Url(params: {
  metadata?: string | null
  showInstanceConfigurations?: boolean | null
  stackVersion?: string | null
  showHidden?: boolean | null
  region: string
}): string {
  const queryString = buildQueryString({
    metadata: params.metadata,
    show_instance_configurations:
      params.showInstanceConfigurations === undefined ? true : params.showInstanceConfigurations,
    stack_version: params.stackVersion,
    show_hidden: params.showHidden === undefined ? false : params.showHidden,
    region: params.region,
  })
  const path = `/deployments/templates`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/templates
 * Operation: `create-deployment-template-v2`
 * Creates a deployment template.
 * @param {string} params.region Region of the deployment template.
 * @see Accepts a request payload of type {@link DeploymentTemplateRequestBody}
 * @see 201 The deployment definition was valid and the template has been created. See {@link IdResponse}
 * @see 400 The requested region is not supported. (code: `templates.region_not_found`). See {@link BasicFailedReply}
 * @see 401 The user is not authorized to access requested region. (code: `templates.region_not_allowed`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createDeploymentTemplateV2Url(params: { region: string }): string {
  const queryString = buildQueryString({
    region: params.region,
  })
  const path = `/deployments/templates`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/deployments/templates/{template_id}
 * Operation: `get-deployment-template-v2`
 * Retrieves a deployment template by id.
 * @param {string} params.templateId The identifier for the deployment template.
 * @param {boolean} params.showInstanceConfigurations If true, will return details for each instance configuration referenced by the template. Default: true
 * @param {string} params.stackVersion If present, it will cause the returned deployment template to be adapted to return only the elements allowed in that version.
 * @param {string} params.region Region of the deployment template.
 * @see 200 The deployment template was found and returned successfully. See {@link DeploymentTemplateInfoV2}
 * @see 400 The requested region is not supported. (code: `templates.region_not_found`). See {@link BasicFailedReply}
 * @see 401 The user is not authorized to access requested region. (code: `templates.region_not_allowed`). See {@link BasicFailedReply}
 * @see 404 The deployment template specified by {template_id} cannot be found. (code: `templates.template_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentTemplateV2Url(params: {
  templateId: string
  showInstanceConfigurations?: boolean | null
  stackVersion?: string | null
  region: string
}): string {
  const queryString = buildQueryString({
    show_instance_configurations:
      params.showInstanceConfigurations === undefined ? true : params.showInstanceConfigurations,
    stack_version: params.stackVersion,
    region: params.region,
  })
  const path = encode`/deployments/templates/${params.templateId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/deployments/templates/{template_id}
 * Operation: `set-deployment-template-v2`
 * Creates or updates a deployment template.
 * @param {string} params.templateId The identifier for the deployment template.
 * @param {string} params.version If specified, checks for conflicts against the version of the template (returned in 'x-cloud-resource-version' of the GET request).
 * @param {boolean} params.createOnly If true, will fail if the deployment template already exists at the given id.
 * @param {string} params.region Region of the deployment template.
 * @see Accepts a request payload of type {@link DeploymentTemplateRequestBody}
 * @see 200 The deployment definition was valid and the template has been updated. See {@link IdResponse}
 * @see 201 The deployment definition was valid and the template was created. See {@link IdResponse}
 * @see 400 The requested region is not supported. (code: `templates.region_not_found`). See {@link BasicFailedReply}
 * @see 401 The user is not authorized to access requested region. (code: `templates.region_not_allowed`). See {@link BasicFailedReply}
 * @see 404 The deployment template specified by {template_id} cannot be found. (code: `templates.template_not_found`). See {@link BasicFailedReply}
 * @see 409 The version supplied in the request conflicted with the version found on the server. (code: `templates.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setDeploymentTemplateV2Url(params: {
  templateId: string
  version?: string | null
  createOnly?: boolean | null
  region: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
    create_only: params.createOnly === undefined ? false : params.createOnly,
    region: params.region,
  })
  const path = encode`/deployments/templates/${params.templateId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/deployments/templates/{template_id}
 * Operation: `delete-deployment-template-v2`
 * Deletes a deployment template by id.
 * @param {string} params.templateId The identifier for the deployment template.
 * @param {string} params.region Region of the deployment template.
 * @see 200 The deployment template was successfully deleted.
 * @see 400 The requested region is not supported. (code: `templates.region_not_found`). See {@link BasicFailedReply}
 * @see 401 The user is not authorized to access requested region. (code: `templates.region_not_allowed`). See {@link BasicFailedReply}
 * @see 404 The deployment template specified by {template_id} cannot be found. (code: `templates.template_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteDeploymentTemplateV2Url(params: {
  templateId: string
  region: string
}): string {
  const queryString = buildQueryString({
    region: params.region,
  })
  const path = encode`/deployments/templates/${params.templateId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/deployments/traffic-filter/associations/{association_type}/{associated_entity_id}/rulesets
 * Operation: `get-traffic-filter-deployment-ruleset-associations`
 * Retrieves the rulesets associated with a deployment.
 * @param {string} params.associationType Association type.
 * @param {string} params.associatedEntityId Associated entity ID.
 * @see 200 Rulesets in the deployment were successfully returned. See {@link TrafficFilterSettings}
 * @see 400 Invalid association type. (code: `traffic_filter.invalid_association_type`). See {@link BasicFailedReply}
 * @see 500 Error fetching traffic filter rulesets. (code: `traffic_filter.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getTrafficFilterDeploymentRulesetAssociationsUrl(params: {
  associationType: string
  associatedEntityId: string
}): string {
  const path = encode`/deployments/traffic-filter/associations/${params.associationType}/${params.associatedEntityId}/rulesets`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/deployments/traffic-filter/rulesets
 * Operation: `get-traffic-filter-rulesets`
 * List all of the traffic filter rulesets.
 * @param {boolean} params.includeAssociations Retrieves a list of resources that are associated to the specified ruleset.
 * @param {string} params.region If provided limits the rulesets to that region only.
 * @see 200 The collection of traffic filter routes. See {@link TrafficFilterRulesets}
 * @see 500 Error fetching traffic filter rulesets. (code: `traffic_filter.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getTrafficFilterRulesetsUrl(
  params: { includeAssociations?: boolean | null; region?: string | null } = emptyParams,
): string {
  const queryString = buildQueryString({
    include_associations:
      params.includeAssociations === undefined ? false : params.includeAssociations,
    region: params.region,
  })
  const path = `/deployments/traffic-filter/rulesets`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/traffic-filter/rulesets
 * Operation: `create-traffic-filter-ruleset`
 * Creates a ruleset that consists of a set of rules.
 * @see Accepts a request payload of type {@link TrafficFilterRulesetRequest}
 * @see 201 The ruleset definition is valid and the creation has started. See {@link TrafficFilterRulesetResponse}
 * @see 500 Error creating the traffic filter ruleset. (code: `traffic_filter.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createTrafficFilterRulesetUrl(): string {
  const path = `/deployments/traffic-filter/rulesets`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/deployments/traffic-filter/rulesets/{ruleset_id}
 * Operation: `get-traffic-filter-ruleset`
 * Retrieves a list of resources that are associated to the specified ruleset.
 * @param {string} params.rulesetId The mandatory ruleset ID.
 * @param {boolean} params.includeAssociations Retrieves a list of resources that are associated to the specified ruleset.
 * @see 200 The container for a set of traffic filter rules. See {@link TrafficFilterRulesetInfo}
 * @see 404 The traffic filter ruleset specified by {ruleset_id} cannot be found. (code: `traffic_filter.not_found`). See {@link BasicFailedReply}
 * @see 500 Error reading the traffic filter ruleset. (code: `traffic_filter.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getTrafficFilterRulesetUrl(params: {
  rulesetId: string
  includeAssociations?: boolean | null
}): string {
  const queryString = buildQueryString({
    include_associations:
      params.includeAssociations === undefined ? false : params.includeAssociations,
  })
  const path = encode`/deployments/traffic-filter/rulesets/${params.rulesetId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/deployments/traffic-filter/rulesets/{ruleset_id}
 * Operation: `update-traffic-filter-ruleset`
 * Updates the ruleset with the definition.
 * @param {string} params.rulesetId The mandatory ruleset ID.
 * @see Accepts a request payload of type {@link TrafficFilterRulesetRequest}
 * @see 200 The ruleset definition was valid and the update has started. See {@link TrafficFilterRulesetResponse}
 * @see 404 The traffic filter ruleset specified by {ruleset_id} cannot be found. (code: `traffic_filter.not_found`). See {@link BasicFailedReply}
 * @see 500 Error reading the traffic filter ruleset. (code: `traffic_filter.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateTrafficFilterRulesetUrl(params: { rulesetId: string }): string {
  const path = encode`/deployments/traffic-filter/rulesets/${params.rulesetId}`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/deployments/traffic-filter/rulesets/{ruleset_id}
 * Operation: `delete-traffic-filter-ruleset`
 * Deletes the ruleset by ID.
 * @param {string} params.rulesetId The mandatory ruleset ID.
 * @param {boolean} params.ignoreAssociations When true, ignores the associations and deletes the ruleset. When false, recognizes the associations, which prevents the deletion of the rule set.
 * @see 200 The traffic filter ruleset was successfully deleted.
 * @see 404 The traffic filter ruleset specified by {ruleset_id} cannot be found. (code: `traffic_filter.not_found`). See {@link BasicFailedReply}
 * @see 500 Error deleting the traffic filter ruleset. (code: `traffic_filter.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteTrafficFilterRulesetUrl(params: {
  rulesetId: string
  ignoreAssociations?: boolean | null
}): string {
  const queryString = buildQueryString({
    ignore_associations:
      params.ignoreAssociations === undefined ? false : params.ignoreAssociations,
  })
  const path = encode`/deployments/traffic-filter/rulesets/${params.rulesetId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/deployments/traffic-filter/rulesets/{ruleset_id}/associations
 * Operation: `get-traffic-filter-ruleset-deployment-associations`
 * Retrieves a list of deployments that are associated to the specified ruleset.
 * @param {string} params.rulesetId The mandatory ruleset ID.
 * @see 200 Associations referred by traffic filter rulesets were successfully returned. See {@link RulesetAssociations}
 * @see 500 Error fetching deployments. (code: `traffic_filter.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getTrafficFilterRulesetDeploymentAssociationsUrl(params: {
  rulesetId: string
}): string {
  const path = encode`/deployments/traffic-filter/rulesets/${params.rulesetId}/associations`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/traffic-filter/rulesets/{ruleset_id}/associations
 * Operation: `create-traffic-filter-ruleset-association`
 * Applies the ruleset to the specified deployment.
 * @param {string} params.rulesetId The mandatory ruleset ID.
 * @see Accepts a request payload of type {@link FilterAssociation}
 * @see 200 Create association request was valid and the association already exists
 * @see 201 Create association request was valid and the association has been created
 * @see 404 The traffic filter ruleset specified by {ruleset_id} cannot be found. (code: `traffic_filter.not_found`). See {@link BasicFailedReply}
 * @see 500 Creation failed. (code: `traffic_filter.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createTrafficFilterRulesetAssociationUrl(params: { rulesetId: string }): string {
  const path = encode`/deployments/traffic-filter/rulesets/${params.rulesetId}/associations`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/deployments/traffic-filter/rulesets/{ruleset_id}/associations/{association_type}/{associated_entity_id}
 * Operation: `delete-traffic-filter-ruleset-association`
 * Deletes the traffic rules in the ruleset from the deployment.
 * @param {string} params.rulesetId The mandatory ruleset ID.
 * @param {string} params.associationType Association type.
 * @param {string} params.associatedEntityId Associated entity ID.
 * @see 200 Delete association request was valid and the association has been deleted
 * @see 404 The traffic filter ruleset association cannot be found. (code: `traffic_filter.not_found`). See {@link BasicFailedReply}
 * @see 500 Deletion failed. (code: `traffic_filter.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteTrafficFilterRulesetAssociationUrl(params: {
  rulesetId: string
  associationType: string
  associatedEntityId: string
}): string {
  const path = encode`/deployments/traffic-filter/rulesets/${params.rulesetId}/associations/${params.associationType}/${params.associatedEntityId}`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/deployments/{deployment_id}
 * Operation: `get-deployment`
 * Retrieves information about a Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {boolean} params.showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials.
 * @param {boolean} params.showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials.
 * @param {boolean} params.showPlans Whether to include the full current and pending plan information in the response - can be large per cluster. Default: true
 * @param {boolean} params.showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster.
 * @param {boolean} params.showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster.
 * @param {boolean} params.showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative).
 * @param {boolean} params.convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if 'true').
 * @param {integer} params.showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field.
 * @param {boolean} params.showSettings Whether to show cluster settings in the response.
 * @param {boolean} params.enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on. Default: true
 * @see 200 The Deployment info response. See {@link DeploymentGetResponse}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentUrl(params: {
  deploymentId: string
  showSecurity?: boolean | null
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanLogs?: boolean | null
  showPlanHistory?: boolean | null
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  showSystemAlerts?: number | null
  showSettings?: boolean | null
  enrichWithTemplate?: boolean | null
}): string {
  const queryString = buildQueryString({
    show_security: params.showSecurity === undefined ? false : params.showSecurity,
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? true : params.showPlans,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
    show_plan_history: params.showPlanHistory === undefined ? false : params.showPlanHistory,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
    show_system_alerts: params.showSystemAlerts === undefined ? 0 : params.showSystemAlerts,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
    enrich_with_template:
      params.enrichWithTemplate === undefined ? true : params.enrichWithTemplate,
  })
  const path = encode`/deployments/${params.deploymentId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/deployments/{deployment_id}
 * Operation: `update-deployment`
 * Updates a Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {boolean} params.hidePrunedOrphans Whether or not to hide orphaned resources that were shut down (relevant if prune on the request is true).
 * @param {boolean} params.skipSnapshot Whether or not to skip snapshots before shutting down orphaned resources (relevant if prune on the request is true).
 * @param {boolean} params.validateOnly If true, will just validate the Deployment definition but will not perform the update.
 * @param {string} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @see Accepts a request payload of type {@link DeploymentUpdateRequest}
 * @see 200 The request was valid and the deployment was updated. See {@link DeploymentUpdateResponse}
 * @see 400 The deployment request had errors. See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateDeploymentUrl(params: {
  deploymentId: string
  hidePrunedOrphans?: boolean | null
  skipSnapshot?: boolean | null
  validateOnly?: boolean | null
  version?: string | null
}): string {
  const queryString = buildQueryString({
    hide_pruned_orphans: params.hidePrunedOrphans === undefined ? false : params.hidePrunedOrphans,
    skip_snapshot: params.skipSnapshot === undefined ? false : params.skipSnapshot,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
    version: params.version,
  })
  const path = encode`/deployments/${params.deploymentId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/deployments/{deployment_id}
 * Operation: `delete-deployment`
 * Deletes a Deployment and all its resources.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @see 200 The request was valid and the deployment was deleted. See {@link DeploymentDeleteResponse}
 * @see 400 The Deployment resources have not been shutdown yet. See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteDeploymentUrl(params: { deploymentId: string }): string {
  const path = encode`/deployments/${params.deploymentId}`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/deployments/{deployment_id}/_migrate
 * Operation: `migrate-deployment`
 * Returns a deployment update request that would transform this deployment from its template to the provided one.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.template The ID of the deployment template to migrate to.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The request was valid and the deployment can be migrated to the template with the provided id. See {@link DeploymentTemplateMigrateResponse}
 * @see 400 The deployment cannot be successfully migrated to the template with the provided id. See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function migrateDeploymentUrl(params: {
  deploymentId: string
  template: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    template: params.template,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/_migrate`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/_restore
 * Operation: `restore-deployment`
 * Restores all resources in a Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {boolean} params.restoreSnapshot Whether or not to restore a snapshot for those resources that allow it.
 * @see 200 The request was valid and the resources of the deployment were restored. See {@link DeploymentRestoreResponse}
 * @see 400 There are Elasticsearch resources in the deployment which are not shut down. See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function restoreDeploymentUrl(params: {
  deploymentId: string
  restoreSnapshot?: boolean | null
}): string {
  const queryString = buildQueryString({
    restore_snapshot: params.restoreSnapshot === undefined ? false : params.restoreSnapshot,
  })
  const path = encode`/deployments/${params.deploymentId}/_restore`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/deployments/{deployment_id}/_resync
 * Operation: `resync-deployment`
 * Immediately resynchronizes the search index for the selected deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The deployment resync operation executed successfully. See {@link IndexSynchronizationResults}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 The deployment resync operation failed for deployment {deployment_id}. (code: `deployments.resync_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncDeploymentUrl(params: { deploymentId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/_resync`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/_shutdown
 * Operation: `shutdown-deployment`
 * Shuts down all resources in a Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {boolean} params.hide Whether or not to hide the deployment and its resources.Only applicable for Platform administrators.
 * @param {boolean} params.skipSnapshot Whether or not to skip snapshots before shutting down the resources.
 * @see 200 The request was valid and the resources of the deployment were shutdown. See {@link DeploymentShutdownResponse}
 * @see 400 Parameter is restricted and can only be set by a Platform administrator. (code: `deployments.restricted_parameter`). See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function shutdownDeploymentUrl(params: {
  deploymentId: string
  hide?: boolean | null
  skipSnapshot?: boolean | null
}): string {
  const queryString = buildQueryString({
    hide: params.hide,
    skip_snapshot: params.skipSnapshot === undefined ? false : params.skipSnapshot,
  })
  const path = encode`/deployments/${params.deploymentId}/_shutdown`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/{deployment_id}/apm/{ref_id}
 * Operation: `get-deployment-apm-resource-info`
 * Get info about an APM Resource belonging to a given Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials.
 * @param {boolean} params.showPlans Whether to include the full current and pending plan information in the response - can be large per cluster. Default: true
 * @param {boolean} params.showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster.
 * @param {boolean} params.showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster.
 * @param {boolean} params.showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative).
 * @param {boolean} params.showSettings Whether to show cluster settings in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Standard response. See {@link ApmResourceInfo}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentApmResourceInfoUrl(params: {
  deploymentId: string
  refId: string
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanLogs?: boolean | null
  showPlanHistory?: boolean | null
  showPlanDefaults?: boolean | null
  showSettings?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? true : params.showPlans,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
    show_plan_history: params.showPlanHistory === undefined ? false : params.showPlanHistory,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/apm/${params.refId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/deployments/{deployment_id}/apm/{ref_id}/_reset-token
 * Operation: `deployment-apm-reset-secret-token`
 * Reset the token of an APM resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 Response containing the new secret token, plan to apply it starts. See {@link ApmCrudResponse}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deploymentApmResetSecretTokenUrl(params: {
  deploymentId: string
  refId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/apm/${params.refId}/_reset-token`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/{deployment_id}/appsearch/{ref_id}
 * Operation: `get-deployment-appsearch-resource-info`
 * Get info about an App Search Resource belonging to a given Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials.
 * @param {boolean} params.showPlans Whether to include the full current and pending plan information in the response - can be large per cluster. Default: true
 * @param {boolean} params.showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster.
 * @param {boolean} params.showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster.
 * @param {boolean} params.showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative).
 * @param {boolean} params.showSettings Whether to show cluster settings in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Standard response. See {@link AppSearchResourceInfo}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentAppsearchResourceInfoUrl(params: {
  deploymentId: string
  refId: string
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanLogs?: boolean | null
  showPlanHistory?: boolean | null
  showPlanDefaults?: boolean | null
  showSettings?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? true : params.showPlans,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
    show_plan_history: params.showPlanHistory === undefined ? false : params.showPlanHistory,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/appsearch/${params.refId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/deployments/{deployment_id}/appsearch/{ref_id}/read_only_mode
 * Operation: `get-appsearch-read-only-mode`
 * Enable/Disable read-only mode on the given App Search resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see 200 Standard response. See {@link ReadOnlyResponse}
 * @see 404 The Resource specified by ref_id cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAppsearchReadOnlyModeUrl(params: {
  deploymentId: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/appsearch/${params.refId}/read_only_mode`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/deployments/{deployment_id}/appsearch/{ref_id}/read_only_mode
 * Operation: `set-appsearch-read-only-mode`
 * Enable/Disable read-only mode on the given App Search resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see Accepts a request payload of type {@link ReadOnlyRequest}
 * @see 200 Standard response. See {@link ReadOnlyResponse}
 * @see 404 The Resource specified by ref_id cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setAppsearchReadOnlyModeUrl(params: {
  deploymentId: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/appsearch/${params.refId}/read_only_mode`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/{deployment_id}/elasticsearch/{ref_id}
 * Operation: `get-deployment-es-resource-info`
 * Get info about an Elasticsearch Resource belonging to a given Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.showSecurity Whether to include the Elasticsearch 2.x security information in the response - can be large per cluster and also include credentials.
 * @param {boolean} params.showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials.
 * @param {boolean} params.showPlans Whether to include the full current and pending plan information in the response - can be large per cluster. Default: true
 * @param {boolean} params.showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster.
 * @param {boolean} params.showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster.
 * @param {boolean} params.showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative).
 * @param {boolean} params.convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if 'true').
 * @param {integer} params.showSystemAlerts Number of system alerts (such as forced restarts due to memory limits) to be included in the response - can be large per cluster. Negative numbers or 0 will not return field.
 * @param {boolean} params.showSettings Whether to show cluster settings in the response.
 * @param {boolean} params.enrichWithTemplate If showing plans, whether to enrich the plan by including the missing elements from the deployment template it is based on. Default: true
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Standard response. See {@link ElasticsearchResourceInfo}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentEsResourceInfoUrl(params: {
  deploymentId: string
  refId: string
  showSecurity?: boolean | null
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanLogs?: boolean | null
  showPlanHistory?: boolean | null
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  showSystemAlerts?: number | null
  showSettings?: boolean | null
  enrichWithTemplate?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_security: params.showSecurity === undefined ? false : params.showSecurity,
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? true : params.showPlans,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
    show_plan_history: params.showPlanHistory === undefined ? false : params.showPlanHistory,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
    show_system_alerts: params.showSystemAlerts === undefined ? 0 : params.showSystemAlerts,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
    enrich_with_template:
      params.enrichWithTemplate === undefined ? true : params.enrichWithTemplate,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/elasticsearch/${params.refId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/_enable-ccr
 * Operation: `enable-deployment-resource-ccr`
 * Migrates the specified Elasticsearch resource and its associated Kibana to enable CCR (if supported).
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.validateOnly When `true`, will not enable CCR but returns warnings if any elements may lose availability during CCR enablement.
 * @see 200 Standard response. See {@link DeploymentResourceCommandResponse}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function enableDeploymentResourceCcrUrl(params: {
  deploymentId: string
  refId: string
  validateOnly?: boolean | null
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/_enable-ccr`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/_enable-ilm
 * Operation: `enable-deployment-resource-ilm`
 * Migrates the specified Elasticsearch resource to use ILM.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.validateOnly When `true`, does not enable ILM but returns warnings if any applications may lose availability during ILM migration.
 * @see Accepts a request payload of type {@link EnableIlmRequest}
 * @see 200 Standard response. See {@link DeploymentResourceCommandResponse}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function enableDeploymentResourceIlmUrl(params: {
  deploymentId: string
  refId: string
  validateOnly?: boolean | null
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/_enable-ilm`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/_enable-slm
 * Operation: `enable-deployment-resource-slm`
 * Migrates the specified Elasticsearch resource to use SLM.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.validateOnly When `true`, does not enable SLM but returns warnings if any applications may lose availability during SLM migration.
 * @see 200 Standard response. See {@link DeploymentResourceCommandResponse}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function enableDeploymentResourceSlmUrl(params: {
  deploymentId: string
  refId: string
  validateOnly?: boolean | null
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/_enable-slm`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/_reset-password
 * Operation: `reset-elasticsearch-user-password`
 * Resets the password of the 'elastic' user.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see 200 The password reset was out carried successfully. See {@link ElasticsearchElasticUserPasswordResetResponse}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 Failed to reset the 'elastic' user's password. (code: `deployments.elasticsearch.password_reset_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resetElasticsearchUserPasswordUrl(params: {
  deploymentId: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/_reset-password`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/_restart
 * Operation: `restart-deployment-es-resource`
 * Restarts an Elasticsearch Resource. If a Resource is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.restoreSnapshot When set to true and restoring from shutdown, then will restore the cluster from the last snapshot (if available). Default: true
 * @param {boolean} params.skipSnapshot If true, will not take a snapshot of the cluster before restarting. Default: true
 * @param {boolean} params.cancelPending If true, cancels any pending plans before restarting. If false and there are pending plans, returns an error.
 * @param {string} params.groupAttribute Indicates the property or properties used to divide the list of instances to restart in groups. Valid options are: '__all__' (restart all at once), '__zone__' by logical zone, '__name__' one instance at a time, or a comma-separated list of attributes of the instances. Default: __zone__
 * @param {integer} params.shardInitWaitTime The time, in seconds, to wait for shards that show no progress of initializing, before rolling the next group (default: 10 minutes). Default: 600
 * @see 202 The restart command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 422 The command sent to a Resource found the Resource in an illegal state, the error message gives more details. (code: `deployments.deployment_resource_plan_change_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function restartDeploymentEsResourceUrl(params: {
  deploymentId: string
  refId: string
  restoreSnapshot?: boolean | null
  skipSnapshot?: boolean | null
  cancelPending?: boolean | null
  groupAttribute?: string | null
  shardInitWaitTime?: number | null
}): string {
  const queryString = buildQueryString({
    restore_snapshot: params.restoreSnapshot === undefined ? true : params.restoreSnapshot,
    skip_snapshot: params.skipSnapshot === undefined ? true : params.skipSnapshot,
    cancel_pending: params.cancelPending === undefined ? false : params.cancelPending,
    group_attribute: params.groupAttribute === undefined ? `__zone__` : params.groupAttribute,
    shard_init_wait_time: params.shardInitWaitTime === undefined ? 600 : params.shardInitWaitTime,
  })
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/_restart`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/_shutdown
 * Operation: `shutdown-deployment-es-resource`
 * Shutdown Elasticsearch Resource belonging to a given Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.hide Hide cluster on shutdown. Hidden clusters are not listed by default. Only applicable for Platform administrators.
 * @param {boolean} params.skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible).
 * @see 200 Standard response. See {@link DeploymentResourceCommandResponse}
 * @see 400 Parameter is restricted and can only be set by a Platform administrator. (code: `deployments.restricted_parameter`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function shutdownDeploymentEsResourceUrl(params: {
  deploymentId: string
  refId: string
  hide?: boolean | null
  skipSnapshot?: boolean | null
}): string {
  const queryString = buildQueryString({
    hide: params.hide,
    skip_snapshot: params.skipSnapshot === undefined ? false : params.skipSnapshot,
  })
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/_shutdown`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/eligible-remote-clusters
 * Operation: `get-deployment-es-resource-eligible-remote-clusters`
 * Returns the list of deployments which contain eligible remote clusters for the elasticsearch resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 List of deployments which contains eligible remote clusters for the resource. See {@link DeploymentsSearchResponse}
 * @see 400 The resource specified doesn't yet have a valid version for the current plan or the pending plan. (code: `deployments.resource_does_not_have_a_valid_version`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentEsResourceEligibleRemoteClustersUrl(params: {
  deploymentId: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/eligible-remote-clusters`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/keystore
 * Operation: `get-deployment-es-resource-keystore`
 * Adds the specified values to the Elasticsearch keystore, or removes the keys for the unspecified values.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see 200 The new value for the keystore contents. See {@link KeystoreContents}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.metadata_internal_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentEsResourceKeystoreUrl(params: {
  deploymentId: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/keystore`
  return `${getRawBasePath()}${path}`
}

/**
 * PATCH /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/keystore
 * Operation: `set-deployment-es-resource-keystore`
 * Fetches the current values of the keystore for the Elasticsearch resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see Accepts a request payload of type {@link KeystoreContents}
 * @see 200 The new value for the keystore contents. See {@link KeystoreContents}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.metadata_internal_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setDeploymentEsResourceKeystoreUrl(params: {
  deploymentId: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/keystore`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/remote-clusters
 * Operation: `get-deployment-es-resource-remote-clusters`
 * Returns the list of remote clusters for the elasticsearch resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see 200 List of remote clusters for the resource. See {@link RemoteResources}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentEsResourceRemoteClustersUrl(params: {
  deploymentId: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/remote-clusters`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/deployments/{deployment_id}/elasticsearch/{ref_id}/remote-clusters
 * Operation: `set-deployment-es-resource-remote-clusters`
 * Overwrites or creates the remote clusters for the elasticsearch resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see Accepts a request payload of type {@link RemoteResources}
 * @see 202 The Remote Clusters were updated
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setDeploymentEsResourceRemoteClustersUrl(params: {
  deploymentId: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/elasticsearch/${params.refId}/remote-clusters`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/{deployment_id}/enterprise_search/{ref_id}
 * Operation: `get-deployment-enterprise-search-resource-info`
 * Get info about an Enterprise Search Resource belonging to a given Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials.
 * @param {boolean} params.showPlans Whether to include the full current and pending plan information in the response - can be large per cluster. Default: true
 * @param {boolean} params.showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster.
 * @param {boolean} params.showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster.
 * @param {boolean} params.showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative).
 * @param {boolean} params.showSettings Whether to show cluster settings in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Standard response. See {@link EnterpriseSearchResourceInfo}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentEnterpriseSearchResourceInfoUrl(params: {
  deploymentId: string
  refId: string
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanLogs?: boolean | null
  showPlanHistory?: boolean | null
  showPlanDefaults?: boolean | null
  showSettings?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? true : params.showPlans,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
    show_plan_history: params.showPlanHistory === undefined ? false : params.showPlanHistory,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/enterprise_search/${params.refId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/{deployment_id}/heap_dumps
 * Operation: `get-deployment-heap-dumps`
 * Gets details about existing heap dumps and in progress heap dump captures across all instances belonging to the deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @see 200 The heap dump details for all instances belonging to the deployment. See {@link DeploymentHeapDumps}
 * @see 404 The deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentHeapDumpsUrl(params: { deploymentId: string }): string {
  const path = encode`/deployments/${params.deploymentId}/heap_dumps`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/{deployment_id}/kibana/{ref_id}
 * Operation: `get-deployment-kib-resource-info`
 * Get info about a Kibana Resource belonging to a given Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.showMetadata Whether to include the full cluster metadata in the response - can be large per cluster and also include credentials.
 * @param {boolean} params.showPlans Whether to include the full current and pending plan information in the response - can be large per cluster. Default: true
 * @param {boolean} params.showPlanLogs Whether to include with the current and pending plan information the attempt log - can be very large per cluster.
 * @param {boolean} params.showPlanHistory Whether to include with the current and pending plan information the plan history- can be very large per cluster.
 * @param {boolean} params.showPlanDefaults If showing plans, whether to show values that are left at their default value (less readable but more informative).
 * @param {boolean} params.convertLegacyPlans If showing plans, whether to leave pre-2.0.0 plans in their legacy format (the default), or whether to update them to 2.0.x+ format (if 'true').
 * @param {boolean} params.showSettings Whether to show cluster settings in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Standard response. See {@link KibanaResourceInfo}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentKibResourceInfoUrl(params: {
  deploymentId: string
  refId: string
  showMetadata?: boolean | null
  showPlans?: boolean | null
  showPlanLogs?: boolean | null
  showPlanHistory?: boolean | null
  showPlanDefaults?: boolean | null
  convertLegacyPlans?: boolean | null
  showSettings?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_metadata: params.showMetadata === undefined ? false : params.showMetadata,
    show_plans: params.showPlans === undefined ? true : params.showPlans,
    show_plan_logs: params.showPlanLogs === undefined ? false : params.showPlanLogs,
    show_plan_history: params.showPlanHistory === undefined ? false : params.showPlanHistory,
    show_plan_defaults: params.showPlanDefaults === undefined ? false : params.showPlanDefaults,
    convert_legacy_plans:
      params.convertLegacyPlans === undefined ? false : params.convertLegacyPlans,
    show_settings: params.showSettings === undefined ? false : params.showSettings,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/kibana/${params.refId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/{deployment_id}/notes
 * Operation: `get-deployment-notes`
 * Get deployment notes.
 * @param {string} params.deploymentId Identifier for the deployment.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The deployment notes were successfully returned. See {@link Notes}
 * @see 404 The deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentNotesUrl(params: { deploymentId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/notes`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/deployments/{deployment_id}/notes
 * Operation: `create-deployment-note`
 * Create note for the running deployment.
 * @param {string} params.deploymentId Identifier for the deployment.
 * @param {string} params.version If specified then checks for conflicts against the version of the deployment note.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link Note}
 * @see 201 List of deployment notes after the new deployment note has been added. See {@link Notes}
 * @see 404 The deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createDeploymentNoteUrl(params: {
  deploymentId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/notes`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/deployments/{deployment_id}/notes/{note_id}
 * Operation: `get-deployment-note`
 * Gets a deployment note.
 * @param {string} params.deploymentId Identifier for the deployment.
 * @param {string} params.noteId Identifier of the note to be fetched.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The deployment note was successfully returned. See {@link Note}
 * @see 404 * "The deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The note specified by {note_id} cannot be found. (code: `notes.note_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentNoteUrl(params: {
  deploymentId: string
  noteId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/notes/${params.noteId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/deployments/{deployment_id}/notes/{note_id}
 * Operation: `update-deployment-note`
 * Update note for the running deployment.
 * @param {string} params.deploymentId Identifier for the deployment.
 * @param {string} params.noteId Identifier of the note to be updated.
 * @param {string} params.version If specified then checks for conflicts against the version of the deployment note.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link Note}
 * @see 200 Updated deployment note. See {@link Note}
 * @see 404 * "The deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The note specified by {note_id} cannot be found. (code: `notes.note_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateDeploymentNoteUrl(params: {
  deploymentId: string
  noteId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/notes/${params.noteId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/deployments/{deployment_id}/notes/{note_id}
 * Operation: `delete-deployment-note`
 * Delete note for the running deployment.
 * @param {string} params.deploymentId Identifier for the deployment.
 * @param {string} params.noteId Identifier of the note to be deleted.
 * @param {string} params.version If specified then checks for conflicts against the version of the deployment note.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 List of deployment notes after {note_id} has been deleted. See {@link Notes}
 * @see 404 * "The deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The note specified by {note_id} cannot be found. (code: `notes.note_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteDeploymentNoteUrl(params: {
  deploymentId: string
  noteId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/notes/${params.noteId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/deployments/{deployment_id}/{resource_kind}/{ref_id}/_restore
 * Operation: `restore-deployment-resource`
 * Restores a shutdown resource belonging to a given Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.restoreSnapshot Whether or not to restore a snapshot for those resources that allow it.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Standard Deployment Resource Crud Response. See {@link DeploymentResourceCrudResponse}
 * @see 400 * The Resource does not have a pending plan. (code: `deployments.resource_does_not_have_a_pending_plan`)
 * The resource is not shut down. (code: `deployments.resource_not_shutdown`). See {@link BasicFailedReply}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function restoreDeploymentResourceUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
  restoreSnapshot?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    restore_snapshot: params.restoreSnapshot === undefined ? false : params.restoreSnapshot,
  })
  const path = encode`/${params.regionId}/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/_restore`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_start
 * Operation: `start-deployment-resource-instances-all`
 * Starts all instances belonging to a Deployment Resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see 202 The start command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given Resource. (code: `deployments.instance_update_prohibited_error`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * One or more instances of the given resource type are missing. (code: `deployments.instances_missing_on_update_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startDeploymentResourceInstancesAllUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/_start`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/_stop
 * Operation: `stop-deployment-resource-instances-all`
 * Stops all instances belonging to a Deployment Resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see 202 The stop command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 403 The stop maintenance mode command was prohibited for the given Resource. (code: `deployments.instance_update_prohibited_error`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * One or more instances of the given resource type are missing. (code: `deployments.instances_missing_on_update_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopDeploymentResourceInstancesAllUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/_stop`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/maintenance-mode/_start
 * Operation: `start-deployment-resource-instances-all-maintenance-mode`
 * Starts maintenance mode of all instances belonging to a Deployment Resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see 202 The start maintenance command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given Resource. (code: `deployments.instance_update_prohibited_error`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * One or more instances of the given resource type are missing. (code: `deployments.instances_missing_on_update_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startDeploymentResourceInstancesAllMaintenanceModeUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/maintenance-mode/_start`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/maintenance-mode/_stop
 * Operation: `stop-deployment-resource-instances-all-maintenance-mode`
 * Stops maintenance mode of all instances belonging to a Deployment Resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see 202 The stop maintenance mode command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 403 The stop maintenance mode command was prohibited for the given Resource. (code: `deployments.instance_update_prohibited_error`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * One or more instances of the given resource type are missing. (code: `deployments.instances_missing_on_update_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopDeploymentResourceInstancesAllMaintenanceModeUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/maintenance-mode/_stop`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/_start
 * Operation: `start-deployment-resource-instances`
 * Starts instances belonging to a Deployment Resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error.
 * @see 202 The start command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given Resource. (code: `deployments.instance_update_prohibited_error`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * One or more instances of the given resource type are missing. (code: `deployments.instances_missing_on_update_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startDeploymentResourceInstancesUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/${params.instanceIds}/_start`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/_stop
 * Operation: `stop-deployment-resource-instances`
 * Stops instances belonging to a Deployment Resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error.
 * @see 202 The stop command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given Resource. (code: `deployments.instance_update_prohibited_error`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * One or more instances of the given resource type are missing. (code: `deployments.instances_missing_on_update_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopDeploymentResourceInstancesUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/${params.instanceIds}/_stop`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/maintenance-mode/_start
 * Operation: `start-deployment-resource-maintenance-mode`
 * Starts maintenance mode of instances belonging to a Deployment Resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error.
 * @see 202 The start maintenance command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 403 The start maintenance mode command was prohibited for the given Resource. (code: `deployments.instance_update_prohibited_error`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * One or more instances of the given resource type are missing. (code: `deployments.instances_missing_on_update_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startDeploymentResourceMaintenanceModeUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/${params.instanceIds}/maintenance-mode/_start`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_ids}/maintenance-mode/_stop
 * Operation: `stop-deployment-resource-maintenance-mode`
 * Stops maintenance mode of instances belonging to a Resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {array} params.instanceIds A comma-separated list of instance identifiers.
 * @param {boolean} params.ignoreMissing If true and the instance does not exist then quietly proceed to the next instance, otherwise treated as an error.
 * @see 202 The stop maintenance mode command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 403 The stop maintenance mode command was prohibited for the given Resource. (code: `deployments.instance_update_prohibited_error`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * One or more instances of the given resource type are missing. (code: `deployments.instances_missing_on_update_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 A Resource that was previously stored no longer exists. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopDeploymentResourceMaintenanceModeUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
  instanceIds: string[]
  ignoreMissing?: boolean | null
}): string {
  const queryString = buildQueryString({
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/${params.instanceIds}/maintenance-mode/_stop`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_id}/heap_dump/_capture
 * Operation: `capture-deployment-instance-heap-dump`
 * Captures a new on-demand heap dump for the given instance. The capture is completed asynchronously, and you can check its progress by getting heap dumps for the given resource.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {string} params.instanceId The instance identifier.
 * @see 202 Indicates that the capture has started
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * The specified instance cannot be found. (code: `deployments.instance_not_found_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function captureDeploymentInstanceHeapDumpUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
  instanceId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/${params.instanceId}/heap_dump/_capture`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/instances/{instance_id}/heap_dump/_download
 * Operation: `download-deployment-instance-heap-dump`
 * Returns the given instance's heap dump for download.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource (one of elasticsearch, kibana or apm).
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {string} params.instanceId The instance identifier.
 * @see 200 The given instance's heap dump. See {@link string}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`)
 * The specified instance cannot be found. (code: `deployments.instance_not_found_error`)
 * The specified instance does not have a heap dump available to download. (code: `heap_dumps.heap_dump_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function downloadDeploymentInstanceHeapDumpUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
  instanceId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/instances/${params.instanceId}/heap_dump/_download`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/metadata/raw
 * Operation: `set-deployment-resource-raw-metadata`
 * Advanced use only. Sets the internal metadata, in free-form JSON, for the resource. Only use the parameter to set the modified JSON that is returned from the get version of the metadata.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {string} params.version If specified, checks for conflicts against the metadata version (returned in 'x-cloud-resource-version' of the GET request).
 * @see Accepts a request payload of type {@link string}
 * @see 200 The resource metadata was successfully changed (the updated JSON is returned). See {@link string}
 * @see 400 The metadata is invalid. (code: `deployments.invalid_metadata`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.metadata_internal_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setDeploymentResourceRawMetadataUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
  version?: string | null
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/metadata/raw`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/deployments/{deployment_id}/{resource_kind}/{ref_id}/plan/pending
 * Operation: `cancel-deployment-resource-pending-plan`
 * Cancels the pending plan of a Resource belonging to a given Deployment.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.resourceKind The kind of resource.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.forceDelete When `true`, deletes the pending plan instead of attempting a graceful cancellation. The default is `false`.
 * @param {boolean} params.ignoreMissing When `true`, returns successfully, even when plans are missing. The default is `false`.
 * @see 200 Standard Deployment Resource Crud Response. See {@link DeploymentResourceCrudResponse}
 * @see 400 The Resource does not have a pending plan. (code: `deployments.resource_does_not_have_a_pending_plan`). See {@link BasicFailedReply}
 * @see 404 The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function cancelDeploymentResourcePendingPlanUrl(params: {
  deploymentId: string
  resourceKind: string
  refId: string
  forceDelete?: boolean | null
  ignoreMissing?: boolean | null
}): string {
  const queryString = buildQueryString({
    force_delete: params.forceDelete === undefined ? false : params.forceDelete,
    ignore_missing: params.ignoreMissing === undefined ? false : params.ignoreMissing,
  })
  const path = encode`/deployments/${params.deploymentId}/${params.resourceKind}/${params.refId}/plan/pending`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}
 * Operation: `delete-deployment-stateless-resource`
 * Delete Stateless Resource belonging to a given Deployment. Deployment must be shutdown already.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.statelessResourceKind The kind of stateless resource.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @see 200 Standard Deployment Resource Crud Response. See {@link DeploymentResourceCrudResponse}
 * @see 400 Resource has still instances. (code: `deployments.resource_has_instances`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteDeploymentStatelessResourceUrl(params: {
  deploymentId: string
  statelessResourceKind: string
  refId: string
}): string {
  const path = encode`/deployments/${params.deploymentId}/${params.statelessResourceKind}/${params.refId}`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_restart
 * Operation: `restart-deployment-stateless-resource`
 * Restarts a Stateless Resource. If a Resource is active: this command re-applies the existing plan but applies a "cluster_reboot", which issues a restart command and waits for it to complete. If a Resource is inactive: this command starts it up with the most recent successful plan.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.statelessResourceKind The kind of stateless resource.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.cancelPending If true, cancels any pending plans before restarting. If false and there are pending plans, returns an error.
 * @see 202 The restart command was issued successfully. See {@link DeploymentResourceCommandResponse}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 422 The command sent to a Resource found the Resource in an illegal state, the error message gives more details. (code: `deployments.deployment_resource_plan_change_error`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function restartDeploymentStatelessResourceUrl(params: {
  deploymentId: string
  statelessResourceKind: string
  refId: string
  cancelPending?: boolean | null
}): string {
  const queryString = buildQueryString({
    cancel_pending: params.cancelPending === undefined ? false : params.cancelPending,
  })
  const path = encode`/deployments/${params.deploymentId}/${params.statelessResourceKind}/${params.refId}/_restart`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_shutdown
 * Operation: `shutdown-deployment-stateless-resource`
 * Shut down Stateless Resource belonging to a given Deployment. Kibana cannot be shut down on Elasticsearch Service as it is required for Elasticsearch administrative functions, such as Snapshot Lifecycle Management and version upgrades.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.statelessResourceKind The kind of stateless resource.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.hide Hide cluster on shutdown. Hidden clusters are not listed by default. Only applicable for Platform administrators.
 * @param {boolean} params.skipSnapshot If true, will skip taking a snapshot of the cluster before shutting the cluster down (if even possible).
 * @see 200 Standard response. See {@link DeploymentResourceCommandResponse}
 * @see 400 Parameter is restricted and can only be set by a Platform administrator. (code: `deployments.restricted_parameter`). See {@link BasicFailedReply}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 We have failed you. (code: `deployments.deployment_resource_no_longer_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function shutdownDeploymentStatelessResourceUrl(params: {
  deploymentId: string
  statelessResourceKind: string
  refId: string
  hide?: boolean | null
  skipSnapshot?: boolean | null
}): string {
  const queryString = buildQueryString({
    hide: params.hide,
    skip_snapshot: params.skipSnapshot === undefined ? false : params.skipSnapshot,
  })
  const path = encode`/deployments/${params.deploymentId}/${params.statelessResourceKind}/${params.refId}/_shutdown`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/deployments/{deployment_id}/{stateless_resource_kind}/{ref_id}/_upgrade
 * Operation: `upgrade-deployment-stateless-resource`
 * Upgrades a running cluster.
 * @param {string} params.deploymentId Identifier for the Deployment.
 * @param {string} params.statelessResourceKind The kind of stateless resource.
 * @param {string} params.refId User-specified RefId for the Resource.
 * @param {boolean} params.validateOnly When `true`, returns the update version without performing the upgrade.
 * @see 202 The upgrade command was issued successfully, use the "GET" command on the /{cluster_id} resource to monitor progress. See {@link DeploymentResourceUpgradeResponse}
 * @see 404 * The Deployment specified by {deployment_id} cannot be found. (code: `deployments.deployment_not_found`)
 * The Resource specified by {ref_id} cannot be found. (code: `deployments.deployment_resource_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function upgradeDeploymentStatelessResourceUrl(params: {
  deploymentId: string
  statelessResourceKind: string
  refId: string
  validateOnly?: boolean | null
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/deployments/${params.deploymentId}/${params.statelessResourceKind}/${params.refId}/_upgrade`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/health
 * Operation: `get-adminconsole-health`
 * Retrieves the Adminconsole health.
 * @param {string} params.expectStatus If specified, returns a 417 status code if the Adminconsole health status is worse than the expected status. Must be one of [green, red, yellow].
 * @param {boolean} params.verbose When true, returns the list of all health check results.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Adminconsole health. See {@link AdminconsoleHealth}
 * @see 417 Returned when expect_status is specified and the Adminconsole health status is worse than the expected status. See {@link AdminconsoleHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAdminconsoleHealthUrl(params: {
  expectStatus?: string | null
  verbose?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
    verbose: params.verbose,
  })
  const path = encode`/${params.regionId}/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/organizations
 * Operation: `list-organizations`
 * Fetch organizations available to the current user.
 * @param {string} params.q Optional query string for filtering. Only `name:$nameToMatch` is supported for this parameter.
 * @param {string} params.nextPage Pagination cursor to get the next page of records.
 * @param {integer} params.limit The max records to return (max: 100). Default: 100
 * @see 200 Organizations fetched successfully. See {@link Organizations}
 * @see 401 User not found. (code: `user.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listOrganizationsUrl(
  params: { q?: string | null; nextPage?: string | null; limit?: number | null } = emptyParams,
): string {
  const queryString = buildQueryString({
    q: params.q,
    next_page: params.nextPage,
    limit: params.limit === undefined ? 100 : params.limit,
  })
  const path = `/organizations`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/organizations
 * Operation: `create-organization`
 * Creates a new organization.
 * @see Accepts a request payload of type {@link OrganizationRequest}
 * @see 201 Organization created successfully. See {@link Organization}
 * @see 400 * Name must be between 2 and 30 characters. (code: `organization.invalid_name`)
 * An organization with this id already exists. (code: `organization.already_exists`). See {@link BasicFailedReply}
 * @see 401 User not found. (code: `user.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createOrganizationUrl(): string {
  const path = `/organizations`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/organizations/{organization_id}
 * Operation: `get-organization`
 * Fetch a single organization by id.
 * @param {string} params.organizationId Identifier for the Organization.
 * @see 200 Organization fetched successfully. See {@link Organization}
 * @see 401 User not found. (code: `user.not_found`). See {@link BasicFailedReply}
 * @see 403 The current user does not have access to the requested organization. (code: `organization.invalid_access`). See {@link BasicFailedReply}
 * @see 404 Organization not found. (code: `organization.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getOrganizationUrl(params: { organizationId: string }): string {
  const path = encode`/organizations/${params.organizationId}`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/organizations/{organization_id}
 * Operation: `update-organization`
 * Updates an existing organization.
 * @param {string} params.organizationId Identifier for the Organization.
 * @see Accepts a request payload of type {@link OrganizationRequest}
 * @see 200 Organization created successfully. See {@link Organization}
 * @see 400 * Name must be between 2 and 30 characters. (code: `organization.invalid_name`)
 * User already has an organization. (code: `organization.user_organization_already_exists`). See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 403 The current user does not have access to the requested organization. (code: `organization.invalid_access`). See {@link BasicFailedReply}
 * @see 404 Organization not found. (code: `organization.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateOrganizationUrl(params: { organizationId: string }): string {
  const path = encode`/organizations/${params.organizationId}`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/organizations/{organization_id}
 * Operation: `delete-organization`
 * Deletes an organization.
 * @param {string} params.organizationId Identifier for the Organization.
 * @see 200 Organization deleted successfully
 * @see 400 * Organization has more than one member and cannot be deleted. (code: `organization.has_members`)
 * Organization has active deployments and cannot be deleted. (code: `organization.has_deployments`). See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 403 The current user does not have access to the requested organization. (code: `organization.invalid_access`). See {@link BasicFailedReply}
 * @see 404 Organization not found. (code: `organization.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteOrganizationUrl(params: { organizationId: string }): string {
  const path = encode`/organizations/${params.organizationId}`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/organizations/{organization_id}/invitations
 * Operation: `list-organization-invitations`
 * Fetch open invitations to the selected organization.
 * @param {string} params.organizationId Identifier for the Organization.
 * @see 200 Organization invitations fetched successfully. See {@link OrganizationInvitations}
 * @see 404 Organization not found. (code: `organization.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listOrganizationInvitationsUrl(params: { organizationId: string }): string {
  const path = encode`/organizations/${params.organizationId}/invitations`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/organizations/{organization_id}/invitations
 * Operation: `create-organization-invitation`
 * Creates or refreshes an organization invitation.
 * @param {string} params.organizationId Identifier for the Organization.
 * @see Accepts a request payload of type {@link OrganizationInvitationRequest}
 * @see 201 Organization invitation created successfully
 * @see 400 * Invitation email was not valid. (code: `organization.invitation_invalid_email`)
 * Invitation already sent. (code: `organization.invitation_already_exists`)
 * User already belongs to organization. (code: `organization.user_organization_already_belongs`). See {@link BasicFailedReply}
 * @see 403 The current user authentication is not valid. (code: `root.invalid_authentication`). See {@link BasicFailedReply}
 * @see 404 * Organization not found. (code: `organization.not_found`)
 * User not found. (code: `user.not_found`)
 * Invitation sender does not belong to organization. (code: `organization.user_organization_does_not_belong`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createOrganizationInvitationUrl(params: { organizationId: string }): string {
  const path = encode`/organizations/${params.organizationId}/invitations`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/organizations/{organization_id}/invitations/{invitation_tokens}
 * Operation: `delete-organization-invitations`
 * Deletes one or more organization invitations.
 * @param {string} params.organizationId Identifier for the Organization.
 * @param {string} params.invitationTokens CSV list of Invitation tokens.
 * @see 200 Organization invitations deleted successfully
 * @see 400 No valid invitation token was supplied. (code: `root.invalid_data`). See {@link BasicFailedReply}
 * @see 404 * Organization not found. (code: `organization.not_found`)
 * Invitation not found. (code: `organization.invitation_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteOrganizationInvitationsUrl(params: {
  organizationId: string
  invitationTokens: string
}): string {
  const path = encode`/organizations/${params.organizationId}/invitations/${params.invitationTokens}`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/organizations/{organization_id}/members
 * Operation: `list-organization-members`
 * Fetch users belonging to the selected organization.
 * @param {string} params.organizationId Identifier for the Organization.
 * @see 200 Organization members fetched successfully. See {@link OrganizationMemberships}
 * @see 404 Organization not found. (code: `organization.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listOrganizationMembersUrl(params: { organizationId: string }): string {
  const path = encode`/organizations/${params.organizationId}/members`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/organizations/{organization_id}/members
 * Operation: `create-organization-membership`
 * Creates an organization membership.
 * @param {string} params.organizationId Identifier for the Organization.
 * @see Accepts a request payload of type {@link OrganizationMembershipRequest}
 * @see 201 Organization membership created successfully. See {@link OrganizationMembership}
 * @see 400 User already has an organization. (code: `organization.user_organization_already_exists`). See {@link BasicFailedReply}
 * @see 404 * User not found. (code: `user.not_found`)
 * Organization not found. (code: `organization.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createOrganizationMembershipUrl(params: { organizationId: string }): string {
  const path = encode`/organizations/${params.organizationId}/members`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/organizations/{organization_id}/members/{user_ids}
 * Operation: `delete-organization-memberships`
 * Deletes one or more organization memberships.
 * @param {string} params.organizationId Identifier for the Organization.
 * @param {string} params.userIds CSV list of User identifiers.
 * @see 200 Organization membership deleted successfully
 * @see 404 * User not found. (code: `user.not_found`)
 * Organization not found. (code: `organization.not_found`)
 * Organization membership not found. (code: `organization.membership_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteOrganizationMembershipsUrl(params: {
  organizationId: string
  userIds: string
}): string {
  const path = encode`/organizations/${params.organizationId}/members/${params.userIds}`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/phone-home/config
 * Operation: `get-telemetry-config`
 * Returns whether ECE telemetry is enabled.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The current ECE telemetry configuration. See {@link TelemetryConfig}
 * @see 403 User must have Platform level permissions. (code: `root.unauthorized.rbac`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getTelemetryConfigUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/phone-home/config`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/phone-home/config
 * Operation: `set-telemetry-config`
 * Sets whether to enable ECE telemetry.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link TelemetryConfigRequest}
 * @see 200 Telemetry configuration updated successfully. See {@link TelemetryConfig}
 * @see 403 User must have Platform level permissions. (code: `root.unauthorized.rbac`). See {@link BasicFailedReply}
 * @see 409 The telemetry configuration did not exist so there was an attempt to create one. Another request resulted in the creation of a telemetry configuration before this request completed, resulting in the failure of this request to create a configuration. Please retry. (code: `telemetry.already_exists`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 Failed to set the configuration due to an internal server error. (code: `telemetry.request_execution_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setTelemetryConfigUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/phone-home/config`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/phone-home/data
 * Operation: `get-phone-home-data`
 * Returns ECE usage statistics for Elastic's internal use.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Telemetry for the ECE installation. See {@link PhoneHomeTelemetry}
 * @see 403 User must have Platform level permissions. (code: `root.unauthorized.rbac`). See {@link BasicFailedReply}
 * @see 404 Data is unavailable because telemetry is disabled for this ECE installation. (code: `telemetry.not_enabled`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getPhoneHomeDataUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/phone-home/data`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1(/regions/{region_id})?/platform
 * Operation: `get-platform`
 * Retrieves information about the active platform.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The platform information is retrieved. See {@link PlatformInfo}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getPlatformUrl(params: { regionId?: string | null } = emptyParams): string {
  const path =
    (params.regionId == null ? '' : '/' + encodeURIComponent(params.regionId)) + `/platform`
  return `${params.regionId == null ? getRawBasePath() : getBasePath()}${path}`
}

/**
 * GET /api/v1/platform/configuration/api_base_url
 * Operation: `get-api-base-url`
 * Gets the API base Url configuration value.
 * @see 200 The API base Url was successfully retrieved. See {@link ApiBaseUrlData}
 * @see 404 There is no configured API base value but optimistic locking was sent. (code: `adminconsole.base_url.not_found`). See {@link BasicFailedReply}
 * @see 500 The persisted Url is malformed. (code: `adminconsole.base_url.invalid_persisted_data`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApiBaseUrlUrl(): string {
  const path = `/platform/configuration/api_base_url`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/platform/configuration/api_base_url
 * Operation: `set-api-base-url`
 * Saves the API base Url configuration value.
 * @param {string} params.version If specified, then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request). If not specified, will unconditionally upsert.
 * @param {boolean} params.skipCascadingOperations Whether or not to skip cascading operations, such as re-provisioning the Security Deployment.
 * @see Accepts a request payload of type {@link ApiBaseUrlData}
 * @see 200 The API base Url was successfully saved. See {@link ApiBaseUrlData}
 * @see 400 The optimistic locking version format was wrong. (code: `adminconsole.base_url.bad_version_format`). See {@link BasicFailedReply}
 * @see 404 There is no configured API base value but optimistic locking was sent. (code: `adminconsole.base_url.not_found`). See {@link BasicFailedReply}
 * @see 409 There was an optimistic locking version conflict. (code: `adminconsole.base_url.version_conflict`). See {@link BasicFailedReply}
 * @see 412 skip_cascading_operations was false but the Security Deployment already had a pending plan. (code: `security_deployment.cluster_pending_plan_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setApiBaseUrlUrl(
  params: { version?: string | null; skipCascadingOperations?: boolean | null } = emptyParams,
): string {
  const queryString = buildQueryString({
    version: params.version,
    skip_cascading_operations:
      params.skipCascadingOperations === undefined ? false : params.skipCascadingOperations,
  })
  const path = `/platform/configuration/api_base_url`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/azure/privatelink/linkids
 * Operation: `list-resolved-link-ids`
 * Lists the resolved Azure Private Link IDs.
 * @param {string} params.region Return results only from this region.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The request successfully returned resolved link IDs. See {@link ResolvedLinkIds}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listResolvedLinkIdsUrl(params: {
  region?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    region: params.region,
  })
  const path = encode`/${params.regionId}/platform/configuration/azure/privatelink/linkids`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/azure/privatelink/linkids/{name-and-id}
 * Operation: `get-resolved-link-id`
 * Retrieves the Azure Private Link ID for a given Private Endpoint name and ID.
 * @param {string} params.nameAndId Name and ID of the Private Endpoint connection.
 * @param {string} params.region Region in which to check for a resolved link ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The request successfully returned a resolved link ID. See {@link ResolvedLinkId}
 * @see 400 Invalid Private Link connection name format. (code: `azure_private_link_configuration_link_id.invalid_format`). See {@link BasicFailedReply}
 * @see 404 Private endpoint connection not found. (code: `azure_private_link_configuration_link_id.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getResolvedLinkIdUrl(params: {
  nameAndId: string
  region: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    region: params.region,
  })
  const path = encode`/${params.regionId}/platform/configuration/azure/privatelink/linkids/{name-and-id}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/azure/privatelink/linkids/{name-and-id}
 * Operation: `delete-resolved-link-id`
 * Deletes the resolved link ID based on connection name and ID. Doesn't delete the underlying Azure Private Link connection.
 * @param {string} params.nameAndId Name and ID of the Private Endpoint connection.
 * @param {string} params.region Region in which to check for a resolved link ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The request successfully returned a resolved link ID
 * @see 400 Invalid Private Link connection name format. (code: `azure_private_link_configuration_link_id.invalid_format`). See {@link BasicFailedReply}
 * @see 404 Private endpoint connection not found. (code: `azure_private_link_configuration_link_id.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteResolvedLinkIdUrl(params: {
  nameAndId: string
  region: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    region: params.region,
  })
  const path = encode`/${params.regionId}/platform/configuration/azure/privatelink/linkids/{name-and-id}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/azure/privatelink/linkids/{name-and-id}/_refresh
 * Operation: `refresh-link-id`
 * Ensures the Private Link connection from an endpoint with given name and ID is accepted.
 * @param {string} params.nameAndId Name and ID of the Private Endpoint connection.
 * @param {string} params.region Region in which to check for a resolved link ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The request successfully returned a resolved link ID. See {@link ResolvedLinkId}
 * @see 400 Invalid Private Link connection name format. (code: `azure_private_link_configuration_link_id.invalid_format`). See {@link BasicFailedReply}
 * @see 404 Private endpoint connection not found. (code: `azure_private_link_configuration_link_id.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function refreshLinkIdUrl(params: {
  nameAndId: string
  region: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    region: params.region,
  })
  const path = encode`/${params.regionId}/platform/configuration/azure/privatelink/linkids/{name-and-id}/_refresh`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/feature-flags
 * Operation: `get-feature-flags`
 * Retrieves an overview of all feature flags and strategies in an ECE installation.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 An overview of all feature flags. See {@link FeatureFlagOverview}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getFeatureFlagsUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/feature-flags`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/feature-flags/{feature_flag}
 * Operation: `get-feature-flag`
 * Retrieve a feature flags current state by name.
 * @param {string} params.featureFlag Name of a given feature flag.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Retrieve feature flag state. See {@link FeatureFlagState}
 * @see 404 The feature specified by {feature_flag} cannot be found. (code: `feature_flags.feature_flag_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getFeatureFlagUrl(params: { featureFlag: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/feature-flags/${params.featureFlag}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/feature-flags/{feature_flag}
 * Operation: `set-feature-flag`
 * Sets a given feature flags state.
 * @param {string} params.featureFlag Name of a given feature flag.
 * @param {boolean} params.validateOnly If specified, validates the supplied feature flag state only.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link FeatureFlagState}
 * @see 200 Sets the given feature flag state. See {@link FeatureFlagState}
 * @see 400 The feature flag state contained errors. (code: `feature_flags.invalid_state`). See {@link BasicFailedReply}
 * @see 404 The Feature specified by {feature_flag} cannot be found. (code: `feature_flags.feature_flag_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setFeatureFlagUrl(params: {
  featureFlag: string
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    validate_only: params.validateOnly,
  })
  const path = encode`/${params.regionId}/platform/configuration/feature-flags/${params.featureFlag}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/instances
 * Operation: `get-instance-configurations`
 * Get instance configurations.
 * @param {boolean} params.showDeleted If true, instance configurations marked for deletions are also returned. Otherwise, only instance configurations not marked for deletion are returned.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 A InstanceConfiguration. See {@link Array<InstanceConfiguration>}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getInstanceConfigurationsUrl(params: {
  showDeleted?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_deleted: params.showDeleted,
  })
  const path = encode`/${params.regionId}/platform/configuration/instances`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/instances
 * Operation: `create-instance-configuration`
 * Create instance configuration and return the auto-generated ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link InstanceConfiguration}
 * @see 201 Instance Configuration added with the auto generated ID returned. See {@link IdResponse}
 * @see 400 cluster_type in the InstanceConfiguration model is invalid (code: 'configuration.invalid_cluster_type') or the discrete_sizes in the InstanceConfiguration model is invalid (code: 'configuration.invalid_discrete_sizes') or the metadata in the InstanceConfiguration model has empty keys or values (code: 'configuration.bad_meta_data') . See {@link BasicFailedReply}
 * @see 403 system_owned or deleted_on cannot be set externally (code: 'configuration.system_owned') . See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createInstanceConfigurationUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/instances`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/instances/{id}
 * Operation: `get-instance-configuration`
 * Get instance configuration by id.
 * @param {string} params.id ID of the instance configuration.
 * @param {boolean} params.showDeleted If true, if the instance configuration has been marked for deletion it is still returned. Otherwise, instance configurations marked for deletion generate a 404.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 An InstanceConfiguration. See {@link InstanceConfiguration}
 * @see 404 Instance configuration specified by {id} cannot be found (code: 'configuration.instance_configuration_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getInstanceConfigurationUrl(params: {
  id: string
  showDeleted?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_deleted: params.showDeleted,
  })
  const path = encode`/${params.regionId}/platform/configuration/instances/${params.id}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/instances/{id}
 * Operation: `set-instance-configuration`
 * Creates or updates an instance configuration.
 * @param {string} params.id ID of the instance configuration.
 * @param {integer} params.version If specified, checks for conflicts against the version of the repository configuration (returned in 'x-cloud-resource-version' of the GET request).
 * @param {boolean} params.createOnly If true, will fail if an instance configuration already exists at the given id.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link InstanceConfiguration}
 * @see 200 The instance configuration was updated successfully. See {@link IdResponse}
 * @see 201 The instance configuration was created successfully. See {@link IdResponse}
 * @see 400 cluster_type in the InstanceConfiguration model is invalid (code: 'configuration.invalid_cluster_type') or the ZooKeeper operation failed due to bad version, etc. (code: 'configuration.instance_configuration_update_failed') or the id in the InstanceConfiguration model is reserved/prohibited (code: 'configuration.configuration_id_reserved') or the discrete_sizes in the InstanceConfiguration model is invalid (code: 'configuration.invalid_discrete_sizes') or the metadata in the InstanceConfiguration model has empty keys or values (code: 'configuration.bad_meta_data') . See {@link BasicFailedReply}
 * @see 403 system_owned or deleted_on cannot be set externally (code: 'configuration.system_owned') . See {@link BasicFailedReply}
 * @see 404 Instance configuration specified by {id} cannot be found or the operation failed (code: 'configuration.instance_configuration_not_found'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setInstanceConfigurationUrl(params: {
  id: string
  version?: number | null
  createOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
    create_only: params.createOnly,
  })
  const path = encode`/${params.regionId}/platform/configuration/instances/${params.id}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/instances/{id}
 * Operation: `delete-instance-configuration`
 * Delete the instance configuration with the given id.
 * @param {string} params.id ID of the instance configuration.
 * @param {integer} params.version If specified, checks for conflicts against the version of the repository configuration (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Instance configuration specified by {id} was deleted
 * @see 403 Instance configuration specified by {id} is system owned (code: 'configuration.system_owned'). See {@link BasicFailedReply}
 * @see 404 Instance configuration specified by {id} cannot be found or the operation failed (code: 'configuration.instance_configuration_not_found'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteInstanceConfigurationUrl(params: {
  id: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/instances/${params.id}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/networking/deployment_domain_name
 * Operation: `get-default-deployment-domain-name`
 * Gets the default Deployment Domain Name configuration value.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Deployment Domain Name was successfully retrieved. See {@link DeploymentDomainName}
 * @see 404 There is no configured Deployment Domain Name but optimistic locking was sent. (code: `networking.cname.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDefaultDeploymentDomainNameUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/networking/deployment_domain_name`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/networking/deployment_domain_name
 * Operation: `set-default-deployment-domain-name`
 * Saves the default Deployment Domain Name configuration value.
 * @param {string} params.version If specified, then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request). If not specified, will unconditionally upsert.
 * @param {boolean} params.skipCascadingOperations Whether or not to skip cascading operations, such as re-provisioning the Security Deployment.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link DeploymentDomainName}
 * @see 200 The Deployment Domain Name was successfully saved. See {@link DeploymentDomainName}
 * @see 400 The optimistic locking version format was wrong. (code: `networking.cname.bad_version_format`). See {@link BasicFailedReply}
 * @see 404 There is no configured Deployment Domain Name but optimistic locking was sent. (code: `networking.cname.not_found`). See {@link BasicFailedReply}
 * @see 409 There was an optimistic locking version conflict. (code: `networking.cname.version_conflict`). See {@link BasicFailedReply}
 * @see 412 skip_cascading_operations was false but the Security Deployment already had a pending plan. (code: `security_deployment.cluster_pending_plan_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setDefaultDeploymentDomainNameUrl(params: {
  version?: string | null
  skipCascadingOperations?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
    skip_cascading_operations:
      params.skipCascadingOperations === undefined ? false : params.skipCascadingOperations,
  })
  const path = encode`/${params.regionId}/platform/configuration/networking/deployment_domain_name`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/networking/deployment_domain_name/{resource_kind}
 * Operation: `get-resource-kind-deployment-domain-name`
 * Gets Deployment Domain Name configuration value for a resource kind.
 * @param {string} params.resourceKind The kind of resource you want to manage a Deployment Domain Name for.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Deployment Domain Name was successfully retrieved. See {@link DeploymentDomainName}
 * @see 404 There is no configured Deployment Domain Name but optimistic locking was sent. (code: `networking.cname.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getResourceKindDeploymentDomainNameUrl(params: {
  resourceKind: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/configuration/networking/deployment_domain_name/${params.resourceKind}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/networking/deployment_domain_name/{resource_kind}
 * Operation: `set-resource-kind-deployment-domain-name`
 * Saves the Deployment Domain Name configuration value for a resource kind.
 * @param {string} params.resourceKind The kind of resource you want to manage a Deployment Domain Name for.
 * @param {string} params.version If specified, then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request). If not specified, will unconditionally upsert.
 * @param {boolean} params.skipCascadingOperations Whether or not to skip cascading operations, such as re-provisioning the Security Deployment.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link DeploymentDomainName}
 * @see 200 The Deployment Domain Name was successfully saved. See {@link DeploymentDomainName}
 * @see 400 The optimistic locking version format was wrong. (code: `networking.cname.bad_version_format`). See {@link BasicFailedReply}
 * @see 404 There is no configured Deployment Domain Name but optimistic locking was sent. (code: `networking.cname.not_found`). See {@link BasicFailedReply}
 * @see 409 There was an optimistic locking version conflict. (code: `networking.cname.version_conflict`). See {@link BasicFailedReply}
 * @see 412 skip_cascading_operations was false but the Security Deployment already had a pending plan. (code: `security_deployment.cluster_pending_plan_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setResourceKindDeploymentDomainNameUrl(params: {
  resourceKind: string
  version?: string | null
  skipCascadingOperations?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
    skip_cascading_operations:
      params.skipCascadingOperations === undefined ? false : params.skipCascadingOperations,
  })
  const path = encode`/${params.regionId}/platform/configuration/networking/deployment_domain_name/${params.resourceKind}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/security/deployment
 * Operation: `get-security-deployment`
 * Retrieves the current security deployment.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The security deployment was successfully returned. See {@link SecurityDeployment}
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_deployment.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSecurityDeploymentUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/deployment`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/deployment
 * Operation: `create-security-deployment`
 * Creates a new security deployment configuration.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link SecurityDeploymentCreateRequest}
 * @see 201 The security deployment was successfully created. See {@link IdResponse}
 * @see 409 * There is a version conflict. (code: `security_deployment.version_conflict`)
 * There is a version conflict. (code: `security_deployment.already_exists`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createSecurityDeploymentUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/deployment`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/security/deployment
 * Operation: `update-security-deployment`
 * Updates an existing security deployment configuration.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link SecurityDeploymentUpdateRequest}
 * @see 200 The security deployment was successfully updated. See {@link IdResponse}
 * @see 404 The security deployment was not found. (code: `security_deployment.not_found`). See {@link BasicFailedReply}
 * @see 409 * There is a version conflict. (code: `security_deployment.version_conflict`)
 * There is a version conflict. (code: `security_deployment.already_exists`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateSecurityDeploymentUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/deployment`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/deployment/_disable
 * Operation: `disable-security-deployment`
 * DEPRECATED (Scheduled to be removed in the next major version): Disables the existing security deployment configuration.
 * @param {string} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The security deployment was successfully disabled
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_deployment.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `security_deployment.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function disableSecurityDeploymentUrl(params: {
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/security/deployment/_disable`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/deployment/_enable
 * Operation: `enable-security-deployment`
 * DEPRECATED (Scheduled to be removed in the next major version): Enables the existing security deployment configuration.
 * @param {string} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The security deployment was successfully enabled
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_deployment.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `security_deployment.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function enableSecurityDeploymentUrl(params: {
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/security/deployment/_enable`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/deployment/_publish_idp_metadata
 * Operation: `publish-security-deployment-idp-metadata`
 * Publishes IdP metadata to be picked up by SSO-enabled SPs.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The IdP metadata was successfully published
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_deployment.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function publishSecurityDeploymentIdpMetadataUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/deployment/_publish_idp_metadata`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/security/enrollment-tokens
 * Operation: `get-enrollment-tokens`
 * Retrieves a list of active enrollment tokens.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 A token has been generated that can be used to start new servers with the requested roles. See {@link ListEnrollmentTokenReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getEnrollmentTokensUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/enrollment-tokens`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/enrollment-tokens
 * Operation: `create-enrollment-token`
 * Creates an enrollment token.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link EnrollmentTokenRequest}
 * @see 200 A token has been generated that can be used to start new servers with the requested roles. See {@link RequestEnrollmentTokenReply}
 * @see 400 The token request format was invalid, details in the error (code: 'enrollment_tokens.invalid_token_request'). See {@link BasicFailedReply}
 * @see 403 No signing key is available to generate a token (code: 'enrollment_tokens.signing_key_not_found'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createEnrollmentTokenUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/enrollment-tokens`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/security/enrollment-tokens/{token}
 * Operation: `delete-enrollment-token`
 * Revokes and deletes the enrollment token.
 * @param {string} params.token The token or token identifier to revoke.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The supplied token has been revoked and can no longer be used to start services on new servers
 * @see 404 Token not found (code: 'enrollment_tokens.invalid_token_id'). See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteEnrollmentTokenUrl(params: { token: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/enrollment-tokens/${params.token}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/security/extra_certs
 * Operation: `get-extra-certificates`
 * List all of the extra certificates.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The collection of all available extra certificates public chains. See {@link PublicCertChainCollection}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getExtraCertificatesUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/extra_certs`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/security/extra_certs/{cert_id}
 * Operation: `get-extra-certificate`
 * Read an extra certificate.
 * @param {string} params.certId The extra certificate Id. For example, `star_my_domain_com`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Extra certificate public chain if exists. See {@link PublicCertChain}
 * @see 404 The extra certificate cannot be found. (code: `cert.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getExtraCertificateUrl(params: { certId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/extra_certs/${params.certId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/security/extra_certs/{cert_id}
 * Operation: `set-extra-certificate`
 * Add or update an extra certificate.
 * @param {string} params.certId The extra certificate Id. For example, `star_my_domain_com`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 Updates extra certificate under given id
 * @see 400 Certificate uses unknown cryptographic algorithm. (code: `cert.unknown_cert_algorithm`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setExtraCertificateUrl(params: { certId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/extra_certs/${params.certId}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/security/extra_certs/{cert_id}
 * Operation: `delete-extra-certificate`
 * Delete an extra certificate.
 * @param {string} params.certId The extra certificate Id. For example, `star_my_domain_com`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Extra certificate under the given id is deleted if exists
 * @see 404 The extra certificate cannot be found. (code: `cert.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteExtraCertificateUrl(params: { certId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/extra_certs/${params.certId}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/security/realms
 * Operation: `get-security-realm-configurations`
 * Retrieves a list of security realm configurations.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The security realm configurations were successfully returned. See {@link SecurityRealmInfoList}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSecurityRealmConfigurationsUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/realms`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/realms/_reorder
 * Operation: `reorder-security-realms`
 * Reorder security realms.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link SecurityRealmsReorderRequest}
 * @see 200 The reorder request was successful
 * @see 400 * Invalid ids . (code: `security_realm.invalid_ids`)
 * Missing ids . (code: `security_realm.missing_ids`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function reorderSecurityRealmsUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/realms/_reorder`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/realms/active-directory
 * Operation: `create-active-directory-configuration`
 * Creates a new Active Directory configuration. .
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ActiveDirectorySettings}
 * @see 201 The Active Directory configuration was successfully created
 * @see 400 * The realm id is already in use. (code: `security_realm.id_conflict`)
 * The selected id is not valid. (code: `security_realm.invalid_id`)
 * Order must be greater than zero. (code: `security_realm.invalid_order`)
 * Invalid Elasticsearch Security realm type. (code: `security_realm.invalid_type`)
 * The realm order is already in use. (code: `security_realm.order_conflict`)
 * Advanced YAML format is invalid. (code: `security_realm.invalid_yaml`)
 * The url format is invalid. (code: `security_realm.invalid_url`)
 * Invalid Active Directory URL. (code: `security_realm.active_directory.invalid_url`)
 * Invalid certificate bundle URL. (code: `security_realm.invalid_bundle_url`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createActiveDirectoryConfigurationUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/realms/active-directory`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/security/realms/active-directory/{realm_id}
 * Operation: `get-active-directory-configuration`
 * Retrieves a single Active Directory security realm configuration. .
 * @param {string} params.realmId The Elasticsearch Security realm identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Active Directory configuration was successfully retrieved. See {@link ActiveDirectorySettings}
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getActiveDirectoryConfigurationUrl(params: {
  realmId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/configuration/security/realms/active-directory/${params.realmId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/security/realms/active-directory/{realm_id}
 * Operation: `update-active-directory-configuration`
 * Updates an existing Active Directory configuration. .
 * @param {string} params.realmId The Elasticsearch Security realm identifier.
 * @param {string} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ActiveDirectorySettings}
 * @see 200 The Active Directory configuration was successfully updated
 * @see 400 * The realm id is already in use. (code: `security_realm.id_conflict`)
 * The selected id is not valid. (code: `security_realm.invalid_id`)
 * Order must be greater than zero. (code: `security_realm.invalid_order`)
 * Invalid Elasticsearch Security realm type. (code: `security_realm.invalid_type`)
 * The realm order is already in use. (code: `security_realm.order_conflict`)
 * Advanced YAML format is invalid. (code: `security_realm.invalid_yaml`)
 * The url format is invalid. (code: `security_realm.invalid_url`)
 * Invalid Active Directory URL. (code: `security_realm.active_directory.invalid_url`)
 * Invalid certificate bundle URL. (code: `security_realm.invalid_bundle_url`). See {@link BasicFailedReply}
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `security_realm.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateActiveDirectoryConfigurationUrl(params: {
  realmId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/security/realms/active-directory/${params.realmId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/security/realms/active-directory/{realm_id}
 * Operation: `delete-active-directory-configuration`
 * Deletes a single Active Directory configuration. .
 * @param {string} params.realmId The Elasticsearch Security realm identifier.
 * @param {string} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Active Directory configuration was successfully deleted
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `security_realm.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteActiveDirectoryConfigurationUrl(params: {
  realmId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/security/realms/active-directory/${params.realmId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/realms/ldap
 * Operation: `create-ldap-configuration`
 * Creates a new LDAP configuration.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link LdapSettings}
 * @see 201 The LDAP configuration was successfully created
 * @see 400 * The realm id is already in use. (code: `security_realm.id_conflict`)
 * The selected id is not valid. (code: `security_realm.invalid_id`)
 * Order must be greater than zero. (code: `security_realm.invalid_order`)
 * Invalid Elasticsearch Security realm type. (code: `security_realm.invalid_type`)
 * The realm order is already in use. (code: `security_realm.order_conflict`)
 * Advanced YAML format is invalid. (code: `security_realm.invalid_yaml`)
 * The url format is invalid. (code: `security_realm.invalid_url`)
 * Invalid LDAP URL. (code: `security_realm.ldap.invalid_url`)
 * Invalid certificate bundle URL. (code: `security_realm.invalid_bundle_url`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createLdapConfigurationUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/realms/ldap`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/security/realms/ldap/{realm_id}
 * Operation: `get-ldap-configuration`
 * Retrieves a single LDAP security realm configuration.
 * @param {string} params.realmId The Elasticsearch Security realm identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The LDAP configuration was successfully retrieved. See {@link LdapSettings}
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getLdapConfigurationUrl(params: { realmId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/realms/ldap/${params.realmId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/security/realms/ldap/{realm_id}
 * Operation: `update-ldap-configuration`
 * Updates an existing LDAP configuration.
 * @param {string} params.realmId The Elasticsearch Security realm identifier.
 * @param {string} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link LdapSettings}
 * @see 200 The LDAP configuration was successfully updated
 * @see 400 * The realm id is already in use. (code: `security_realm.id_conflict`)
 * The selected id is not valid. (code: `security_realm.invalid_id`)
 * Order must be greater than zero. (code: `security_realm.invalid_order`)
 * Invalid Elasticsearch Security realm type. (code: `security_realm.invalid_type`)
 * The realm order is already in use. (code: `security_realm.order_conflict`)
 * Advanced YAML format is invalid. (code: `security_realm.invalid_yaml`)
 * The url format is invalid. (code: `security_realm.invalid_url`)
 * Invalid LDAP URL. (code: `security_realm.ldap.invalid_url`)
 * Invalid certificate bundle URL. (code: `security_realm.invalid_bundle_url`). See {@link BasicFailedReply}
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `security_realm.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateLdapConfigurationUrl(params: {
  realmId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/security/realms/ldap/${params.realmId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/security/realms/ldap/{realm_id}
 * Operation: `delete-ldap-configuration`
 * Deletes a single LDAP configuration.
 * @param {string} params.realmId The Elasticsearch Security realm identifier.
 * @param {string} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The LDAP configuration was successfully deleted
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `security_realm.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteLdapConfigurationUrl(params: {
  realmId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/security/realms/ldap/${params.realmId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/realms/saml
 * Operation: `create-saml-configuration`
 * Creates a new SAML configuration.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link SamlSettings}
 * @see 201 The SAML configuration was successfully created
 * @see 400 * The realm id is already in use. (code: `security_realm.id_conflict`)
 * The selected id is not valid. (code: `security_realm.invalid_id`)
 * Order must be greater than zero. (code: `security_realm.invalid_order`)
 * Invalid Elasticsearch Security realm type. (code: `security_realm.invalid_type`)
 * The realm order is already in use. (code: `security_realm.order_conflict`)
 * Advanced YAML format is invalid. (code: `security_realm.invalid_yaml`)
 * The SAML IDP metadata endpoint returned an error response code 200 OK. (code: `security_realm.saml.invalid_idp_metadata_url`)
 * Invalid certificate bundle URL. (code: `security_realm.invalid_bundle_url`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createSamlConfigurationUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/realms/saml`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/security/realms/saml/{realm_id}
 * Operation: `get-saml-configuration`
 * Retrieves a single SAML security realm configuration.
 * @param {string} params.realmId The Elasticsearch Security realm identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The SAML configuration was successfully retrieved. See {@link SamlSettings}
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSamlConfigurationUrl(params: { realmId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/realms/saml/${params.realmId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/security/realms/saml/{realm_id}
 * Operation: `update-saml-configuration`
 * Updates an existing SAML configuration.
 * @param {string} params.realmId The Elasticsearch Security realm identifier.
 * @param {string} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link SamlSettings}
 * @see 200 The SAML configuration was successfully updated
 * @see 400 * The realm id is already in use. (code: `security_realm.id_conflict`)
 * The selected id is not valid. (code: `security_realm.invalid_id`)
 * Order must be greater than zero. (code: `security_realm.invalid_order`)
 * Invalid Elasticsearch Security realm type. (code: `security_realm.invalid_type`)
 * The realm order is already in use. (code: `security_realm.order_conflict`)
 * Advanced YAML format is invalid. (code: `security_realm.invalid_yaml`)
 * The SAML IDP metadata endpoint returned an error response code 200 OK. (code: `security_realm.saml.invalid_idp_metadata_url`)
 * Invalid certificate bundle URL. (code: `security_realm.invalid_bundle_url`). See {@link BasicFailedReply}
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `security_realm.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateSamlConfigurationUrl(params: {
  realmId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/security/realms/saml/${params.realmId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/security/realms/saml/{realm_id}
 * Operation: `delete-saml-configuration`
 * Deletes a single SAML configuration.
 * @param {string} params.realmId The Elasticsearch Security realm identifier.
 * @param {string} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The SAML configuration was successfully deleted
 * @see 404 The realm specified by {realm_id} cannot be found. (code: `security_realm.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `security_realm.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteSamlConfigurationUrl(params: {
  realmId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/security/realms/saml/${params.realmId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/security/tls/{service_name}
 * Operation: `get-tls-certificate`
 * Retrieves a certificate in the TLS certificate chain.
 * @param {string} params.serviceName The service certificate chain to read.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The TLS certificate chain, with private key omitted, for the given service and whether it was user specified. See {@link TlsPublicCertChain}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getTlsCertificateUrl(params: { serviceName: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/tls/${params.serviceName}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/security/tls/{service_name}
 * Operation: `set-tls-certificate`
 * Creates or updates the TLS certificate chain.
 * @param {string} params.serviceName The service certificate chain to read.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 202 The TLS update has been accepted for the given service and will take effect throughout the system
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setTlsCertificateUrl(params: { serviceName: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/security/tls/${params.serviceName}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/shared-files/{shared_file}
 * Operation: `get-shared-file`
 * Gets the value of the shared file: {shared_file} should be equal to an existing containerset's path, like '/container_sets/admin-consoles/shared/adminconsole.conf'.
 * @param {string} params.sharedFile The shared file to read.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The contents of the shared file, with ZK version in the header. See {@link SharedFileReadRequest}
 * @see 409 Bad Version for shared file. See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSharedFileUrl(params: { sharedFile: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/shared-files/${params.sharedFile}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/shared-files/{shared_file}
 * Operation: `set-shared-file`
 * Sets the value of the shared file from request body: {shared_file} should be equal to an existing containerset's path, like '/container_sets/admin-consoles/shared/adminconsole.conf'.
 * @param {string} params.sharedFile The shared file to write.
 * @param {integer} params.version The shared file version.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 201 EmptyResponse from successful write of the shared file
 * @see 404 Shared file not found (code: 'sharedfiles.no_shared_file_found'). See {@link BasicFailedReply}
 * @see 409 Bad Version for shared file. See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setSharedFileUrl(params: {
  sharedFile: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/shared-files/${params.sharedFile}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/shared-files/{shared_file}
 * Operation: `delete-shared-file`
 * Deletes the shared file: {shared_file} should be equal to an existing containerset's path, like '/container_sets/admin-consoles/shared/adminconsole.conf'.
 * @param {string} params.sharedFile The shared file to delete.
 * @param {integer} params.version The shared file version.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 EmptyResponse from successful delete of the shared file
 * @see 404 Shared file not found (code: 'sharedfiles.no_shared_file_found'). See {@link BasicFailedReply}
 * @see 409 Bad Version for shared file. See {@link BasicFailedReply}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteSharedFileUrl(params: {
  sharedFile: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/shared-files/${params.sharedFile}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/snapshots/repositories
 * Operation: `get-snapshot-repositories`
 * Retrieves a list of available snapshot repository configurations. To access the configuration contents, you must have privileged permissions.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 List of snapshot repository configs. See {@link RepositoryConfigs}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSnapshotRepositoriesUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/snapshots/repositories`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/snapshots/repositories/{repository_name}
 * Operation: `get-snapshot-repository`
 * Retrieves the snapshot repository configuration. To access the configuration contents, you must have privileged permissions.
 * @param {string} params.repositoryName The name of the snapshot repository configuration.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Retrieve snapshot repository config. See {@link RepositoryConfig}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSnapshotRepositoryUrl(params: {
  repositoryName: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/configuration/snapshots/repositories/${params.repositoryName}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/snapshots/repositories/{repository_name}
 * Operation: `set-snapshot-repository`
 * Creates or updates the snapshot repository configuration.
 * @param {integer} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.repositoryName The name of the snapshot repository configuration.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link SnapshotRepositoryConfiguration}
 * @see 200 New snapshot repository config. See {@link RepositoryConfig}
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setSnapshotRepositoryUrl(params: {
  version?: number | null
  repositoryName: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/snapshots/repositories/${params.repositoryName}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/snapshots/repositories/{repository_name}
 * Operation: `delete-snapshot-repository`
 * Deletes the snapshot repository configuration.
 * @param {string} params.repositoryName The name of the snapshot repository configuration.
 * @param {boolean} params.cleanupDeployments Removes references to this snapshot repository configuration and disables snapshots on the clusters that were referencing this configuration. If a request is made to delete a repository configuration that has already been deleted and this parameter is set to true and clusters still reference the configuration, then the request will have the side effects of removing references and disabling snapshots for clusters that reference the previously deleted configuration.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 successful operation
 * @see 202 Delete snapshot repository config
 * @see 449 elevated permissions are required. (code: '"root.unauthorized.rbac.elevated_permissions_required"'). See {@link BasicFailedReply}
 * @see 500 Failed to delete references and disable snapshots in one or more referencing clusters. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteSnapshotRepositoryUrl(params: {
  repositoryName: string
  cleanupDeployments?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    cleanup_deployments:
      params.cleanupDeployments === undefined ? false : params.cleanupDeployments,
  })
  const path = encode`/${params.regionId}/platform/configuration/snapshots/repositories/${params.repositoryName}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/store
 * Operation: `list-config-store-option`
 * List all existing Config Store Option.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 List of existing Config Store Option. See {@link ConfigStoreOptionList}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listConfigStoreOptionUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/store`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/store/{config_option_id}
 * Operation: `get-config-store-option`
 * Find Config Store Option by name.
 * @param {string} params.configOptionId Name of the Config Store Option that you would like to find.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Config Store Option retrieved successfully. See {@link ConfigStoreOption}
 * @see 404 Config Store Option do not exist by that name. (code: `platform.config.store.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getConfigStoreOptionUrl(params: {
  configOptionId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/configuration/store/${params.configOptionId}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/store/{config_option_id}
 * Operation: `create-config-store-option`
 * Inserts new Config Store Option.
 * @param {string} params.configOptionId Name of the Config Store Option that you would like to create.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ConfigStoreOptionData}
 * @see 201 The Config Store Option was inserted successfully. See {@link ConfigStoreOption}
 * @see 400 Config Store Option data already exists for the given name. (code: `platform.config.store.already_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createConfigStoreOptionUrl(params: {
  configOptionId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/configuration/store/${params.configOptionId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/store/{config_option_id}
 * Operation: `put-config-store-option`
 * Update existing Config Store Option.
 * @param {string} params.configOptionId Name of the Config Store Option that you would like to modify.
 * @param {string} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ConfigStoreOptionData}
 * @see 200 Config Store Option retrieved successfully. See {@link ConfigStoreOption}
 * @see 404 There was no existing data for the given Config Store Id. (code: `platform.config.store.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `platform.config.store.version_conflict`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function putConfigStoreOptionUrl(params: {
  configOptionId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/store/${params.configOptionId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/store/{config_option_id}
 * Operation: `delete-config-store-option`
 * Delete Config Store Option by name.
 * @param {string} params.configOptionId Name of the Config Store Option that you would like to delete.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Config Store Option deleted successfully
 * @see 404 Config Store Option do not exist by that name. (code: `platform.config.store.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteConfigStoreOptionUrl(params: {
  configOptionId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/configuration/store/${params.configOptionId}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/templates/deployments
 * Operation: `get-deployment-templates`
 * Retrieves all deployment templates.
 * @param {string} params.metadata An optional key/value pair in the form of (key:value) that will act as a filter and exclude any templates that do not have a matching metadata item associated.
 * @param {boolean} params.showInstanceConfigurations If true, will return details for each instance configuration referenced by the template.
 * @param {string} params.stackVersion If present, it will cause the returned deployment templates to be adapted to return only the elements allowed in that version.
 * @param {boolean} params.showHidden If true, templates flagged as hidden will be returned.
 * @param {string} params.format If cluster is specified populates cluster_template in the response, if deployment is specified populates deployment_template in the response. Default: cluster
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The deployment templates were returned successfully. See {@link Array<DeploymentTemplateInfo>}
 * @see 400 The template is not compatible with the [cluster] format. (code: `deployment.migration_invalid`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentTemplatesUrl(params: {
  metadata?: string | null
  showInstanceConfigurations?: boolean | null
  stackVersion?: string | null
  showHidden?: boolean | null
  format?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    metadata: params.metadata,
    show_instance_configurations:
      params.showInstanceConfigurations === undefined ? false : params.showInstanceConfigurations,
    stack_version: params.stackVersion,
    show_hidden: params.showHidden === undefined ? false : params.showHidden,
    format: params.format === undefined ? `cluster` : params.format,
  })
  const path = encode`/${params.regionId}/platform/configuration/templates/deployments`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/templates/deployments
 * Operation: `create-deployment-template`
 * Creates a deployment template.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link DeploymentTemplateInfo}
 * @see 201 The deployment definition was valid and the template has been created. See {@link IdResponse}
 * @see 400 The template definition contained errors. (code: `templates.invalid_template`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createDeploymentTemplateUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/templates/deployments`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/platform/configuration/templates/deployments/global
 * Operation: `get-global-deployment-templates`
 * Global deployment template endpoint which fetches the deployment templates across all region services.
 * @see 200 The deployment templates were returned successfully. See {@link Array<GlobalDeploymentTemplateInfo>}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getGlobalDeploymentTemplatesUrl(): string {
  const path = `/platform/configuration/templates/deployments/global`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/templates/deployments/{template_id}
 * Operation: `get-deployment-template`
 * Retrieves a deployment template by id.
 * @param {string} params.templateId The identifier for the deployment template.
 * @param {boolean} params.showInstanceConfigurations If true, will return details for each instance configuration referenced by the template.
 * @param {string} params.stackVersion If present, it will cause the returned deployment template to be adapted to return only the elements allowed in that version.
 * @param {string} params.format If 'cluster' is specified populates cluster_template in the response, if 'deployment' is specified populates deployment_template in the response. Default: cluster
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The deployment template was found and returned successfully. See {@link DeploymentTemplateInfo}
 * @see 400 The template is not compatible with the [cluster] format. (code: `deployment.migration_invalid`). See {@link BasicFailedReply}
 * @see 404 The deployment template specified by {template_id} cannot be found. (code: `templates.template_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getDeploymentTemplateUrl(params: {
  templateId: string
  showInstanceConfigurations?: boolean | null
  stackVersion?: string | null
  format?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_instance_configurations:
      params.showInstanceConfigurations === undefined ? false : params.showInstanceConfigurations,
    stack_version: params.stackVersion,
    format: params.format === undefined ? `cluster` : params.format,
  })
  const path = encode`/${params.regionId}/platform/configuration/templates/deployments/${params.templateId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/templates/deployments/{template_id}
 * Operation: `set-deployment-template`
 * Creates or updates a deployment template.
 * @param {string} params.templateId The identifier for the deployment template.
 * @param {string} params.version If specified, checks for conflicts against the version of the template (returned in 'x-cloud-resource-version' of the GET request).
 * @param {boolean} params.createOnly If true, will fail if the deployment template already exists at the given id.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link DeploymentTemplateInfo}
 * @see 200 The deployment definition was valid and the template has been updated. See {@link IdResponse}
 * @see 201 The deployment definition was valid and the template was created. See {@link IdResponse}
 * @see 400 The template definition contained errors. (code: `templates.invalid_template`). See {@link BasicFailedReply}
 * @see 404 The deployment template specified by {template_id} cannot be found. (code: `templates.template_not_found`). See {@link BasicFailedReply}
 * @see 409 The version supplied in the request conflicted with the version found on the server. (code: `templates.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setDeploymentTemplateUrl(params: {
  templateId: string
  version?: string | null
  createOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
    create_only: params.createOnly === undefined ? false : params.createOnly,
  })
  const path = encode`/${params.regionId}/platform/configuration/templates/deployments/${params.templateId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/templates/deployments/{template_id}
 * Operation: `delete-deployment-template`
 * Deletes a deployment template by id.
 * @param {string} params.templateId The identifier for the deployment template.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The deployment template was successfully deleted.
 * @see 404 The deployment template specified by {template_id} cannot be found. (code: `templates.template_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteDeploymentTemplateUrl(params: {
  templateId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/configuration/templates/deployments/${params.templateId}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/trust-relationships
 * Operation: `get-trust-relationships`
 * List trust relationships.
 * @param {boolean} params.includeCertificate Whether to include the public CA certificates in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The list of trust relationships. See {@link TrustRelationshipsListResponse}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getTrustRelationshipsUrl(params: {
  includeCertificate?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    include_certificate:
      params.includeCertificate === undefined ? false : params.includeCertificate,
  })
  const path = encode`/${params.regionId}/platform/configuration/trust-relationships`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/configuration/trust-relationships
 * Operation: `create-trust-relationship`
 * Creates a trust relationship.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link TrustRelationshipCreateRequest}
 * @see 201 The request was valid and a new trust relationship was created. See {@link TrustRelationshipCreateResponse}
 * @see 400 The trust relationship request had errors. See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createTrustRelationshipUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/configuration/trust-relationships`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/configuration/trust-relationships/{trust_relationship_id}
 * Operation: `get-trust-relationship`
 * Retrieves information about a trust relationship. `local` can be used as the ID to obtain the local trust relationship.
 * @param {string} params.trustRelationshipId Identifier for the trust relationship.
 * @param {boolean} params.includeCertificate Whether to include the public CA certificates in the response.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The trust relationship info response. See {@link TrustRelationshipGetResponse}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 404 The trust relationship specified by {trust_relationship_id} cannot be found. (code: `trust_relationships.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getTrustRelationshipUrl(params: {
  trustRelationshipId: string
  includeCertificate?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    include_certificate:
      params.includeCertificate === undefined ? false : params.includeCertificate,
  })
  const path = encode`/${params.regionId}/platform/configuration/trust-relationships/${params.trustRelationshipId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/configuration/trust-relationships/{trust_relationship_id}
 * Operation: `update-trust-relationship`
 * Updates a trust relationship.
 * @param {string} params.trustRelationshipId Identifier for the trust relationship.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link TrustRelationshipUpdateRequest}
 * @see 200 The request was valid and the trust relationship was updated. See {@link TrustRelationshipUpdateResponse}
 * @see 400 The trust relationship request had errors. See {@link BasicFailedReply}
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 404 The trust relationship specified by {trust_relationship_id} cannot be found. (code: `trust_relationships.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateTrustRelationshipUrl(params: {
  trustRelationshipId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/configuration/trust-relationships/${params.trustRelationshipId}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/configuration/trust-relationships/{trust_relationship_id}
 * Operation: `delete-trust-relationship`
 * Deletes a trust relationship.
 * @param {string} params.trustRelationshipId Identifier for the trust relationship.
 * @param {integer} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The request was valid and the trust relationship was deleted.
 * @see 401 You are not authorized to perform this action. See {@link BasicFailedReply}
 * @see 404 The trust relationship specified by {trust_relationship_id} cannot be found. (code: `trust_relationships.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteTrustRelationshipUrl(params: {
  trustRelationshipId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/configuration/trust-relationships/${params.trustRelationshipId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/health
 * Operation: `list-platform-health`
 * Retrieves the platform health.
 * @param {string} params.expectStatus If specified, returns a 417 status code if the health status is not what was sent or better. Should be one of [red, yellow, or green].
 * @param {boolean} params.verbose When true, returns the list of all health check results.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The platform health. See {@link PlatformHealth}
 * @see 417 NOTE: When expect_status is sent, but the health status is _not_ better or equal to what was sent, the status code is 417. See {@link PlatformHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listPlatformHealthUrl(params: {
  expectStatus?: string | null
  verbose?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
    verbose: params.verbose,
  })
  const path = encode`/${params.regionId}/platform/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/health/{health_check_name}
 * Operation: `get-platform-health`
 * Gets an individual platform health check by name.
 * @param {string} params.healthCheckName The name of the health check.
 * @param {string} params.expectStatus If specified, returns a 417 status code if the health status is not what was sent or better. Should be one of [red, yellow, or green].
 * @param {boolean} params.verbose When true, returns the list of all health check results.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The platform health check. See {@link PlatformHealth}
 * @see 404 The health check specified at {health_check_name} could not be found. (code: `health.health_check_not_found`). See {@link BasicFailedReply}
 * @see 417 NOTE: When expect_status is sent, but the health status is _not_ better or equal to what was sent, the status code is 417. See {@link PlatformHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getPlatformHealthUrl(params: {
  healthCheckName: string
  expectStatus?: string | null
  verbose?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
    verbose: params.verbose,
  })
  const path = encode`/${params.regionId}/platform/health/${params.healthCheckName}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/adminconsoles
 * Operation: `get-adminconsoles`
 * Retrieves an overview of all adminconsoles.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 An overview of all adminconsoles. See {@link AdminconsolesOverview}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAdminconsolesUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/adminconsoles`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/adminconsoles/{adminconsole_id}/logging_settings
 * Operation: `get-adminconsole-logging-settings`
 * Get the logging settings for this adminconsole instance.
 * @param {string} params.adminconsoleId The identifier for the adminconsole instance.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The logging settings for the adminconsole instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this adminconsole were not found. (code: `adminconsoles.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAdminconsoleLoggingSettingsUrl(params: {
  adminconsoleId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/adminconsoles/${params.adminconsoleId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/adminconsoles/{adminconsole_id}/logging_settings
 * Operation: `set-adminconsole-logging-settings`
 * Set the logging settings for this adminconsole instance.
 * @param {string} params.adminconsoleId The identifier for the adminconsole instance.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link LoggingSettings}
 * @see 200 The updated logging settings for the adminconsole instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this adminconsole were not found. (code: `adminconsoles.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setAdminconsoleLoggingSettingsUrl(params: {
  adminconsoleId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/adminconsoles/${params.adminconsoleId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/adminconsoles/{adminconsole_id}/logging_settings
 * Operation: `delete-adminconsole-logging-settings`
 * Reset the default logging settings for this adminconsole instance.
 * @param {string} params.adminconsoleId The identifier for the adminconsole instance.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The updated logging settings for the adminconsole instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this adminconsole were not found. (code: `adminconsoles.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteAdminconsoleLoggingSettingsUrl(params: {
  adminconsoleId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/adminconsoles/${params.adminconsoleId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/platform/infrastructure/adminconsoles/{adminconsole_id}/logging_settings
 * Operation: `update-adminconsole-logging-settings`
 * All changes in the specified object are applied to the logging settings for this adminconsole instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
 * @param {string} params.adminconsoleId The identifier for the adminconsole instance.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 The updated logging settings for the adminconsole instance. See {@link LoggingSettings}
 * @see 400 The update request is invalid. (code: `patch.request_malformed`). See {@link BasicFailedReply}
 * @see 404 The logging settings for this adminconsole were not found. (code: `adminconsoles.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateAdminconsoleLoggingSettingsUrl(params: {
  adminconsoleId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/adminconsoles/${params.adminconsoleId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/allocators
 * Operation: `get-allocators`
 * Retrieves the information for all of the allocators in the platform.
 * @param {string} params.q (Optional) The query that filters the allocators. Maps to an Elasticsearch `query_string` query.
 * @param {integer} params.size (Optional) The maximum number of search results to return. Defaults to 100.
 * @param {integer} params.from (Optional) The offset from the first result you want to fetch. Defaults to 0.
 * @param {string} params.sort (Optional) An comma-separated array of fields to sort the search results by. Defaults to `allocator_id`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 An overview of all allocators. See {@link AllocatorOverview}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAllocatorsUrl(params: {
  q?: string | null
  size?: number | null
  from?: number | null
  sort?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    q: params.q,
    size: params.size,
    from: params.from,
    sort: params.sort,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/allocators/_resync
 * Operation: `resync-allocators`
 * Asynchronously synchronizes all allocator information in the back-end search index.
 * @param {boolean} params.skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. Default: true
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The ids of documents, organized by model version, that will be synchronized. See {@link ModelVersionIndexSynchronizationResults}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncAllocatorsUrl(params: {
  skipMatchingVersion?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    skip_matching_version:
      params.skipMatchingVersion === undefined ? true : params.skipMatchingVersion,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/_resync`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1(/regions/{region_id})?/platform/infrastructure/allocators/_search
 * Operation: `search-allocators`
 * Retrieves the information for all of the allocators in the platform that match the specified query.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 An overview of allocators that matched the given search query. See {@link AllocatorOverview}
 * @see 400 The search request failed. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchAllocatorsUrl(params: { regionId?: string | null } = emptyParams): string {
  const path =
    (params.regionId == null ? '' : '/' + encodeURIComponent(params.regionId)) +
    `/platform/infrastructure/allocators/_search`
  return `${params.regionId == null ? getRawBasePath() : getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}
 * Operation: `get-allocator`
 * Retrieves the allocator by the ID.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The information for the allocator specified by {allocator_id}. See {@link AllocatorInfo}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAllocatorUrl(params: { allocatorId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}
 * Operation: `delete-allocator`
 * Deletes the allocator.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {boolean} params.removeInstances Removes the instances from the deleted allocator.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The allocator specified by {allocator_id} was successfully deleted
 * @see 400 * The allocator specified by {allocator_id} could not be deleted. (code: `allocators.delete_connected_allocator_attempt`)
 * The allocator specified by {allocator_id} could not be deleted. (code: `allocators.delete_allocator_with_instances_attempt`). See {@link BasicFailedReply}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteAllocatorUrl(params: {
  allocatorId: string
  removeInstances?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    remove_instances: params.removeInstances === undefined ? false : params.removeInstances,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/_resync
 * Operation: `resync-allocator`
 * Immediately synchronizes the allocator information in the back-end search index and caches.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The allocator resync operation executed successfully
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 The allocator resync operation failed for allocator {allocator_id}. (code: `allocators.resync_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncAllocatorUrl(params: { allocatorId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/_resync`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/clusters/_move
 * Operation: `move-clusters`
 * Moves the clusters to a different allocator.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {boolean} params.forceUpdate When `true`, cancels and overwrites the pending plans, or treats the instance as an error.
 * @param {boolean} params.moveOnly When `true`, moves the specified instances and ignores the changes for the cluster state. Default: true
 * @param {boolean} params.allocatorDown When `true`, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up.
 * @param {boolean} params.validateOnly When `true`, validates the plan overrides, then returns the plan without performing the move.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link MoveClustersRequest}
 * @see 202 The move command was issued successfully, use the "GET" command on each /{cluster_id} resource to monitor progress. See {@link MoveClustersCommandResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The cluster definition contained errors. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 403 The move command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function moveClustersUrl(params: {
  allocatorId: string
  forceUpdate?: boolean | null
  moveOnly?: boolean | null
  allocatorDown?: boolean | null
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    force_update: params.forceUpdate === undefined ? false : params.forceUpdate,
    move_only: params.moveOnly === undefined ? true : params.moveOnly,
    allocator_down: params.allocatorDown,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/clusters/_move`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/clusters/{cluster_type}/_move
 * Operation: `move-clusters-by-type`
 * Moves the clusters, by type, to a different allocator.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.clusterType The cluster types to move off of the allocator. NOTE: When unspecified, all clusters are moved.
 * @param {boolean} params.forceUpdate When true, cancels and overwrites pending plans, or treats instance as an error.
 * @param {boolean} params.moveOnly When true, bypasses the cluster state changes, but continues to move the specified instances. Default: true
 * @param {boolean} params.allocatorDown When `true`, considers all instances on the allocator as permanently shut down when deciding how to migrate data to new nodes.When left blank, the system automatically decides. NOTE: The default treats the allocator as up.
 * @param {boolean} params.validateOnly When `true`, validates the plan overrides, then returns the plan without performing the move.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link MoveClustersRequest}
 * @see 202 The move command was issued successfully, use the "GET" command on each /{cluster_id} resource to monitor progress. See {@link MoveClustersCommandResponse}
 * @see 400 * The cluster definition contained errors. (code: `clusters.cluster_invalid_plan`)
 * The cluster definition contained errors. (code: `clusters.plan_feature_not_implemented`). See {@link BasicFailedReply}
 * @see 403 The move command was prohibited for the given cluster. (code: `clusters.command_prohibited`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function moveClustersByTypeUrl(params: {
  allocatorId: string
  clusterType: string
  forceUpdate?: boolean | null
  moveOnly?: boolean | null
  allocatorDown?: boolean | null
  validateOnly?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    force_update: params.forceUpdate === undefined ? false : params.forceUpdate,
    move_only: params.moveOnly === undefined ? true : params.moveOnly,
    allocator_down: params.allocatorDown,
    validate_only: params.validateOnly === undefined ? false : params.validateOnly,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/clusters/${params.clusterType}/_move`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/logging_settings
 * Operation: `get-allocator-logging-settings`
 * Get the logging settings for this allocator instance.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The logging settings for the allocator instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this allocator were not found. (code: `allocators.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAllocatorLoggingSettingsUrl(params: {
  allocatorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/logging_settings
 * Operation: `set-allocator-logging-settings`
 * Set the logging settings for this allocator instance.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link LoggingSettings}
 * @see 200 The updated logging settings for the allocator instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this allocator were not found. (code: `allocators.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setAllocatorLoggingSettingsUrl(params: {
  allocatorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/logging_settings
 * Operation: `delete-allocator-logging-settings`
 * Reset the default logging settings for this allocator instance.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The updated logging settings for the allocator instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this allocator were not found. (code: `allocators.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteAllocatorLoggingSettingsUrl(params: {
  allocatorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/logging_settings
 * Operation: `update-allocator-logging-settings`
 * All changes in the specified object are applied to the logging settings for this allocator instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 The updated logging settings for the allocator instance. See {@link LoggingSettings}
 * @see 400 The update request is invalid. (code: `patch.request_malformed`). See {@link BasicFailedReply}
 * @see 404 The logging settings for this allocator were not found. (code: `allocators.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateAllocatorLoggingSettingsUrl(params: {
  allocatorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_start
 * Operation: `start-allocator-maintenance-mode`
 * Starts maintenance mode on the allocator.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start maintenance mode command was issued successfully
 * @see 403 The start maintenance mode command was prohibited for the given allocator. (code: `root.unauthorized.rbac`). See {@link BasicFailedReply}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startAllocatorMaintenanceModeUrl(params: {
  allocatorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/maintenance-mode/_start`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/maintenance-mode/_stop
 * Operation: `stop-allocator-maintenance-mode`
 * Stops maintenance mode on the allocator.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop maintenance mode command was issued successfully
 * @see 403 The stop maintenance mode command was prohibited for the given allocator. (code: `root.unauthorized.rbac`). See {@link BasicFailedReply}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopAllocatorMaintenanceModeUrl(params: {
  allocatorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/maintenance-mode/_stop`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/metadata
 * Operation: `get-allocator-metadata`
 * Retrieves the allocator metadata.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The allocator metadata was successfully returned. See {@link Array<MetadataItem>}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAllocatorMetadataUrl(params: { allocatorId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/metadata`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/metadata
 * Operation: `set-allocator-metadata`
 * Sets the allocator metadata.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link MetadataItems}
 * @see 200 The allocator metadata was successfully changed (the updated JSON is returned). See {@link Array<MetadataItem>}
 * @see 400 The value specified is empty for at least one of the metadata tags. (code: `allocators.invalid_empty_metadata_items`). See {@link BasicFailedReply}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setAllocatorMetadataUrl(params: {
  allocatorId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/metadata`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/metadata/{key}
 * Operation: `set-allocator-metadata-item`
 * Adds or updates a single item in the allocator metadata.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.key The metadata item key.
 * @param {string} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link MetadataItemValue}
 * @see 200 The allocator metadata was successfully changed (the updated JSON is returned). See {@link Array<MetadataItem>}
 * @see 400 The value specified for the metadata tag is empty. (code: `allocators.invalid_empty_metadata_item`). See {@link BasicFailedReply}
 * @see 404 * The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`)
 * The metadata item specified by {key} cannot be found. (code: `allocators.metadata_item_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setAllocatorMetadataItemUrl(params: {
  allocatorId: string
  key: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/metadata/${params.key}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/metadata/{key}
 * Operation: `delete-allocator-metadata-item`
 * Removes a single item from the allocator metadata.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.key The metadata item key.
 * @param {string} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The allocator metadata was successfully changed (the updated JSON is returned). See {@link Array<MetadataItem>}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteAllocatorMetadataItemUrl(params: {
  allocatorId: string
  key: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/metadata/${params.key}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/settings
 * Operation: `get-allocator-settings`
 * Retrieves the allocator override settings.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returns the settings for the specified Allocator. See {@link AllocatorSettings}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAllocatorSettingsUrl(params: { allocatorId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/settings`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/settings
 * Operation: `set-allocator-settings`
 * Overwrites the allocator settings with the specified settings. WARNING: Any unspecified fields are deleted.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link AllocatorSettings}
 * @see 200 Returns the updated settings for the specified allocator. See {@link AllocatorSettings}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setAllocatorSettingsUrl(params: {
  allocatorId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PATCH /api/v1/regions/{region_id}/platform/infrastructure/allocators/{allocator_id}/settings
 * Operation: `update-allocator-settings`
 * Applies the settings as a patch. Only the fields that are referenced in the update are altered.
 * @param {string} params.allocatorId The allocator identifier.
 * @param {string} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 Returns the updated settings for the specified allocator. See {@link AllocatorSettings}
 * @see 404 The allocator specified by {allocator_id} cannot be found. (code: `allocators.allocator_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateAllocatorSettingsUrl(params: {
  allocatorId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/allocators/${params.allocatorId}/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/blueprinter/roles
 * Operation: `list-blueprinter-roles`
 * Retrieve all persisted roles.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The role aggregates. See {@link RoleAggregates}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listBlueprinterRolesUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/blueprinter/roles`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/blueprinter/roles
 * Operation: `create-blueprinter-role`
 * Create a Blueprinter role.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link RoleAggregateCreateData}
 * @see 201 The role aggregate that was just created. See {@link RoleAggregate}
 * @see 409 The role ID you specified is already in use. (code: `roles.already_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createBlueprinterRoleUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/blueprinter/roles`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}
 * Operation: `get-blueprinter-role`
 * Retrieve a role.
 * @param {string} params.blueprinterRoleId User-specified Blueprinter role ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The role aggregate definition. See {@link RoleAggregate}
 * @see 404 The role can't be found. (code: `roles.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getBlueprinterRoleUrl(params: {
  blueprinterRoleId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/blueprinter/roles/${params.blueprinterRoleId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}
 * Operation: `update-blueprinter-role`
 * Update a role.
 * @param {string} params.blueprinterRoleId User-specified Blueprinter role ID.
 * @param {integer} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link Role}
 * @see 200 The role was successfully updated. See {@link RoleAggregate}
 * @see 400 The role is currently running container sets. (code: `roles.in_use`). See {@link BasicFailedReply}
 * @see 404 The role can't be found. (code: `roles.not_found`). See {@link BasicFailedReply}
 * @see 409 Your request failed because the specified version does not match the persisted version. (code: `roles.version_conflict`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateBlueprinterRoleUrl(params: {
  blueprinterRoleId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/blueprinter/roles/${params.blueprinterRoleId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}
 * Operation: `delete-blueprinter-role`
 * Delete a role.
 * @param {string} params.blueprinterRoleId User-specified Blueprinter role ID.
 * @param {boolean} params.skipValidations When sent as true, ignores validation errors.
 * @param {integer} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The role was successfully deleted.
 * @see 400 The role is currently running container sets. (code: `roles.in_use`). See {@link BasicFailedReply}
 * @see 404 The role can't be found. (code: `roles.not_found`). See {@link BasicFailedReply}
 * @see 409 Your request failed because the specified version does not match the persisted version. (code: `roles.version_conflict`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteBlueprinterRoleUrl(params: {
  blueprinterRoleId: string
  skipValidations?: boolean | null
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    skip_validations: params.skipValidations === undefined ? false : params.skipValidations,
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/blueprinter/roles/${params.blueprinterRoleId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}/blessings
 * Operation: `set-blueprinter-blessings`
 * Set blessings for a role.
 * @param {string} params.blueprinterRoleId User-specified Blueprinter role ID.
 * @param {integer} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link Blessings}
 * @see 200 The blessings were successfully set. See {@link RoleAggregate}
 * @see 404 The role can't be found. (code: `roles.not_found`). See {@link BasicFailedReply}
 * @see 409 Your request failed because the specified version does not match the persisted version. (code: `roles.version_conflict`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setBlueprinterBlessingsUrl(params: {
  blueprinterRoleId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/blueprinter/roles/${params.blueprinterRoleId}/blessings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/blueprinter/roles/{blueprinter_role_id}/blessings/{runner_id}
 * Operation: `add-blueprinter-blessing`
 * Add a Blessing for a runner to a role.
 * @param {string} params.blueprinterRoleId User-specified Blueprinter role ID.
 * @param {string} params.runnerId Runner ID for a blessing associated with a role.
 * @param {integer} params.version When specified, checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link Blessing}
 * @see 200 Blessing added successfully. See {@link RoleAggregate}
 * @see 404 The role can't be found. (code: `roles.not_found`). See {@link BasicFailedReply}
 * @see 409 Your request failed because the specified version does not match the persisted version. (code: `roles.version_conflict`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function addBlueprinterBlessingUrl(params: {
  blueprinterRoleId: string
  runnerId: string
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/blueprinter/roles/${params.blueprinterRoleId}/blessings/${params.runnerId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/constructors
 * Operation: `get-constructors`
 * Retrieves an overview of all constructors in an ECE installation.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 An overview of all constructors. See {@link ConstructorOverview}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getConstructorsUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/constructors`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/constructors/_resync
 * Operation: `resync-constructors`
 * Asynchronously synchronizes all constructor information in the back-end search index.
 * @param {boolean} params.skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. Default: true
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The ids of documents, organized by model version, that will be synchronized. See {@link ModelVersionIndexSynchronizationResults}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncConstructorsUrl(params: {
  skipMatchingVersion?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    skip_matching_version:
      params.skipMatchingVersion === undefined ? true : params.skipMatchingVersion,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/constructors/_resync`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/constructors/{constructor_id}
 * Operation: `get-constructor`
 * Retrieves a constructor by id.
 * @param {string} params.constructorId Identifier for the constructor.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The information for the constructor specified by {constructor_id}. See {@link ConstructorInfo}
 * @see 404 The constructor specified by {constructor_id} cannot be found. (code: `constructors.constructor_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getConstructorUrl(params: { constructorId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/constructors/${params.constructorId}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/constructors/{constructor_id}/_resync
 * Operation: `resync-constructor`
 * Immediately resynchronizes the search index and cache for the selected constructor.
 * @param {string} params.constructorId Identifier for the constructor.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The constructor resync operation executed successfully
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 The constructor resync operation failed for allocator {constructor_id}. (code: `constructors.resync_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncConstructorUrl(params: { constructorId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/constructors/${params.constructorId}/_resync`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/constructors/{constructor_id}/logging_settings
 * Operation: `get-constructor-logging-settings`
 * Get the logging settings for this constructor instance.
 * @param {string} params.constructorId Identifier for the constructor.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The logging settings for the constructor instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this constructor were not found. (code: `constructors.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getConstructorLoggingSettingsUrl(params: {
  constructorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/constructors/${params.constructorId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/constructors/{constructor_id}/logging_settings
 * Operation: `set-constructor-logging-settings`
 * Set the logging settings for this constructor instance.
 * @param {string} params.constructorId Identifier for the constructor.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link LoggingSettings}
 * @see 200 The updated logging settings for the constructor instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this constructor were not found. (code: `constructors.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setConstructorLoggingSettingsUrl(params: {
  constructorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/constructors/${params.constructorId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/constructors/{constructor_id}/logging_settings
 * Operation: `delete-constructor-logging-settings`
 * Reset the default logging settings for this constructor instance.
 * @param {string} params.constructorId Identifier for the constructor.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The updated logging settings for the constructor instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this constructor were not found. (code: `constructors.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteConstructorLoggingSettingsUrl(params: {
  constructorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/constructors/${params.constructorId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/platform/infrastructure/constructors/{constructor_id}/logging_settings
 * Operation: `update-constructor-logging-settings`
 * All changes in the specified object are applied to the logging settings for this constructor instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
 * @param {string} params.constructorId Identifier for the constructor.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 The updated logging settings for the constructor instance. See {@link LoggingSettings}
 * @see 400 The update request is invalid. (code: `patch.request_malformed`). See {@link BasicFailedReply}
 * @see 404 The logging settings for this constructor were not found. (code: `constructors.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateConstructorLoggingSettingsUrl(params: {
  constructorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/constructors/${params.constructorId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/constructors/{constructor_id}/maintenance-mode/_start
 * Operation: `start-constructor-maintenance-mode`
 * Start maintenance mode of a constructor. It will stop constructing new plans while continuing with on-going ones.
 * @param {string} params.constructorId Identifier for the constructor.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The start maintenance mode command was issued successfully
 * @see 403 The start maintenance mode command was prohibited for the given constructor. (code: `constructors.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The constructor specified by {constructor_id} cannot be found. (code: `constructors.constructor_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function startConstructorMaintenanceModeUrl(params: {
  constructorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/constructors/${params.constructorId}/maintenance-mode/_start`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/constructors/{constructor_id}/maintenance-mode/_stop
 * Operation: `stop-constructor-maintenance-mode`
 * Stop maintenance mode of a constructor. It will resume the construction of submitted plans.
 * @param {string} params.constructorId Identifier for the constructor.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The stop maintenance mode command was issued successfully
 * @see 403 The stop maintenance mode command was prohibited for the given constructor. (code: `constructors.command_prohibited`). See {@link BasicFailedReply}
 * @see 404 The constructor specified by {constructor_id} cannot be found. (code: `constructors.constructor_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function stopConstructorMaintenanceModeUrl(params: {
  constructorId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/constructors/${params.constructorId}/maintenance-mode/_stop`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/container-sets
 * Operation: `get-container-sets`
 * Retrieves an overview of all container sets.
 * @param {boolean} params.hidden Include hidden container sets in output.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 An overview of all container sets. See {@link ContainerSetsOverview}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getContainerSetsUrl(params: { hidden?: boolean | null; regionId: string }): string {
  const queryString = buildQueryString({
    hidden: params.hidden === undefined ? false : params.hidden,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/container-sets
 * Operation: `create-container-set`
 * Creates a new container set, with optional id.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link ContainerSet}
 * @see 200 The container set was created. See {@link ContainerSet}
 * @see 400 The container set create failed. (code: `container_sets.create_failed`). See {@link BasicFailedReply}
 * @see 409 Container Set name already in use. (code: `container_sets.name_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createContainerSetUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/container-sets/_search
 * Operation: `search-container-sets`
 * Retrieves container sets that match a given query.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 An overview of container sets that matched the given search query. See {@link ContainerSetsOverview}
 * @see 400 The search request failed. See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchContainerSetsUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets/_search`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/container-sets/{containerset_id}
 * Operation: `get-container-set`
 * Retrieves a container set by id.
 * @param {string} params.containersetId Identifier for the container set.
 * @param {string} params.include Comma delimited list of properties to include in the output.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The information for the container set specified by {containerset_id}. See {@link ContainerSetDetails}
 * @see 404 The container set specified by {containerset_id} cannot be found. (code: `container_sets.container_set_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getContainerSetUrl(params: {
  containersetId: string
  include?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    include: params.include,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets/${params.containersetId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/container-sets/{containerset_id}
 * Operation: `delete-container-set`
 * Deletes a container set.
 * @param {string} params.containersetId Identifier for the container set.
 * @param {string} params.version The container set version.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The container set was deleted
 * @see 400 The container set delete failed. (code: `container_sets.delete_failed`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteContainerSetUrl(params: {
  containersetId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets/${params.containersetId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/container-sets/{containerset_id}/_resync
 * Operation: `resync-container-set`
 * Immediately resynchronizes the search index and cache for the selected container set.
 * @param {string} params.containersetId Identifier for the container set.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The container set resync operation executed successfully
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 The container set resync operation failed for container set {containerset_id}. (code: `container_sets.resync_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncContainerSetUrl(params: {
  containersetId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets/${params.containersetId}/_resync`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/container-sets/{containerset_id}/containers
 * Operation: `get-containers`
 * Lists containers by container-set id.
 * @param {string} params.containersetId Identifier for the container set.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The overview of containers belonging to the container-set specified by {container_set_id}. See {@link ContainersOverview}
 * @see 404 The container set cannot be found. (code: `container_sets.container_set_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getContainersUrl(params: { containersetId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets/${params.containersetId}/containers`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/container-sets/{containerset_id}/containers
 * Operation: `create-container`
 * Creates a new container.
 * @param {string} params.containersetId Identifier for the container set.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link Container}
 * @see 200 The container was created. See {@link Container}
 * @see 400 The container create failed. (code: `container_sets.container_create_failed`). See {@link BasicFailedReply}
 * @see 404 The container set cannot be found. (code: `container_sets.container_set_not_found`). See {@link BasicFailedReply}
 * @see 409 Container name already in use. (code: `container_sets.container_name_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createContainerUrl(params: { containersetId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets/${params.containersetId}/containers`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/container-sets/{containerset_id}/containers/{container_id}
 * Operation: `get-container`
 * Retrieves a container by id.
 * @param {string} params.containersetId Identifier for the container set.
 * @param {string} params.containerId Identifier for the container.
 * @param {string} params.include Comma delimited list of properties to include in the output. Currently, only 'inspect' is supported for containers.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The information for the container specified by {container_id}. See {@link Container}
 * @see 404 * The container set cannot be found. (code: `container_sets.container_set_not_found`)
 * The container cannot be found. (code: `container_sets.container_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getContainerUrl(params: {
  containersetId: string
  containerId: string
  include?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    include: params.include,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets/${params.containersetId}/containers/${params.containerId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/container-sets/{containerset_id}/containers/{container_id}
 * Operation: `delete-container`
 * Deletes a container.
 * @param {string} params.containersetId Identifier for the container set.
 * @param {string} params.containerId Identifier for the container.
 * @param {string} params.version The container version.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The container was deleted
 * @see 400 The container delete failed. (code: `container_sets.container_delete_failed`). See {@link BasicFailedReply}
 * @see 404 * The container set cannot be found. (code: `container_sets.container_set_not_found`)
 * The container cannot be found. (code: `container_sets.container_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteContainerUrl(params: {
  containersetId: string
  containerId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets/${params.containersetId}/containers/${params.containerId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PATCH /api/v1/regions/{region_id}/platform/infrastructure/container-sets/{containerset_id}/containers/{container_id}
 * Operation: `patch-container`
 * All changes in the specified object are applied to an existing container according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
 * @param {string} params.containersetId Identifier for the container set.
 * @param {string} params.containerId Identifier for the container.
 * @param {string} params.version The container version.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 The container was updated. See {@link Container}
 * @see 400 The container update failed. (code: `container_sets.container_update_failed`). See {@link BasicFailedReply}
 * @see 404 * The container set cannot be found. (code: `container_sets.container_set_not_found`)
 * The container cannot be found. (code: `container_sets.container_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function patchContainerUrl(params: {
  containersetId: string
  containerId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/container-sets/${params.containersetId}/containers/${params.containerId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/proxies
 * Operation: `get-proxies`
 * Retrieves an overview of all proxies.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 An overview of all proxies. See {@link ProxyOverview}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getProxiesUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/proxies`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/proxies/filtered-groups
 * Operation: `create-proxies-filtered-group`
 * Create the settings for a filtered group of proxies.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ProxiesFilteredGroup}
 * @see 200 Returns the created or updated filtered group of proxies. See {@link ProxiesFilteredGroup}
 * @see 400 * The filtered group of proxies has empty id. (code: `proxies.proxies_filtered_group_empty_id`)
 * A filtered group of proxies with the same identifier already exists. (code: `proxies.proxies_filtered_group_already_exists`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createProxiesFilteredGroupUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/filtered-groups`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}
 * Operation: `get-proxies-filtered-group`
 * Get data for a filtered group of proxies.
 * @param {string} params.proxiesFilteredGroupId "The identifier for the filtered group of proxies.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Data for the filtered group of proxies identified by {proxies_filtered_group_id}. See {@link ProxiesFilteredGroup}
 * @see 404 Unable to find the {proxies_filtered_group_id} specified filtered group of proxies. Edit your request, then try again. (code: `proxies.proxies_filtered_group_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getProxiesFilteredGroupUrl(params: {
  proxiesFilteredGroupId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/filtered-groups/${params.proxiesFilteredGroupId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}
 * Operation: `update-proxies-filtered-group`
 * Update the settings for a filtered group of proxies.
 * @param {string} params.proxiesFilteredGroupId "The identifier for the filtered group of proxies.
 * @param {string} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ProxiesFilteredGroup}
 * @see 200 Returns the created or updated filtered group of proxies. See {@link ProxiesFilteredGroup}
 * @see 400 The provided identifier doesn't match the identifier in the object. (code: `proxies.proxies_filtered_group_id_conflict`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `proxies.proxies_filtered_group_version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateProxiesFilteredGroupUrl(params: {
  proxiesFilteredGroupId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/filtered-groups/${params.proxiesFilteredGroupId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}
 * Operation: `delete-proxies-filtered-group`
 * Deletes a filtered group of proxies by ID.
 * @param {string} params.proxiesFilteredGroupId "The identifier for the filtered group of proxies.
 * @param {string} params.version Checks for conflicts against the metadata version, then returns the value in the `x-cloud-resource-version` header.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The filtered group of proxies was successfully deleted
 * @see 404 Unable to find the {proxies_filtered_group_id} specified filtered group of proxies. Edit your request, then try again. (code: `proxies.proxies_filtered_group_not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `proxies.proxies_filtered_group_version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteProxiesFilteredGroupUrl(params: {
  proxiesFilteredGroupId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/filtered-groups/${params.proxiesFilteredGroupId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/proxies/filtered-groups/{proxies_filtered_group_id}/health
 * Operation: `get-proxies-filtered-group-health`
 * Get the health status of a filtered group of proxies.
 * @param {string} params.proxiesFilteredGroupId "The identifier for the filtered group of proxies.
 * @param {string} params.expectStatus The expected status.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returns health information on a filtered group of proxies. See {@link ProxiesFilteredGroupHealth}
 * @see 417 The health status is worse than the expected one. See {@link ProxiesFilteredGroupHealth}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getProxiesFilteredGroupHealthUrl(params: {
  proxiesFilteredGroupId: string
  expectStatus?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/filtered-groups/${params.proxiesFilteredGroupId}/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/proxies/health
 * Operation: `get-proxies-health`
 * Get the health status of all proxies.
 * @param {string} params.expectStatus The expected status.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returns health information on all the proxies. See {@link ProxiesHealth}
 * @see 417 The health status is worse than the expected one. See {@link ProxiesHealth}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getProxiesHealthUrl(params: {
  expectStatus?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/proxies/settings
 * Operation: `get-proxies-settings`
 * Retrieves the settings for all proxies.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Settings for all proxies. See {@link ProxiesSettings}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getProxiesSettingsUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/settings`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/proxies/settings
 * Operation: `set-proxies-settings`
 * Overwrites the proxy settings. All unspecified fields are deleted.
 * @param {string} params.version If specified, checks for conflicts against the version of the settings (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ProxiesSettings}
 * @see 200 Returns the updated settings. See {@link ProxiesSettings}
 * @see 409 There is a version conflict. (code: `proxies.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setProxiesSettingsUrl(params: {
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PATCH /api/v1/regions/{region_id}/platform/infrastructure/proxies/settings
 * Operation: `update-proxies-settings`
 * Applies the settings as a patch. Only the fields that are referenced in the update are changed.
 * @param {string} params.version If specified, checks for conflicts against the version of the repository configuration (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 Returns the updated settings. See {@link ProxiesSettings}
 * @see 409 There is a version conflict. (code: `proxies.version_conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateProxiesSettingsUrl(params: {
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/settings`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/proxies/{proxy_id}
 * Operation: `get-proxy`
 * Retrieves a single proxy by ID.
 * @param {string} params.proxyId The identifier for the proxy.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The information for the proxy specified by {proxy_id}. See {@link ProxyInfo}
 * @see 404 Unable to find the {proxy_id} specified proxy. Edit your request, then try again. (code: `proxies.proxy_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getProxyUrl(params: { proxyId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/proxies/${params.proxyId}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/runners
 * Operation: `get-runners`
 * Retrieves an overview of all runners.
 * @param {string} params.q An optional query to filter runners by. Maps to an Elasticsearch query_string query.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 An overview of all runners. See {@link RunnerOverview}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getRunnersUrl(params: { q?: string | null; regionId: string }): string {
  const queryString = buildQueryString({
    q: params.q,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/runners`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/runners/_resync
 * Operation: `resync-runners`
 * Asynchronously synchronizes all runner information in the search index.
 * @param {boolean} params.skipMatchingVersion When true, skips the document indexing when the version matches the in-memory copy. Default: true
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 202 The ids of documents, organized by model version, that will be synchronized. See {@link ModelVersionIndexSynchronizationResults}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncRunnersUrl(params: {
  skipMatchingVersion?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    skip_matching_version:
      params.skipMatchingVersion === undefined ? true : params.skipMatchingVersion,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/runners/_resync`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/runners/_search
 * Operation: `search-runners`
 * Retrieves runners that match a given query.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link SearchRequest}
 * @see 200 An overview of runners that matched the given search query. See {@link RunnerOverview}
 * @see 400 The search request failed. (code: `runners.search_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function searchRunnersUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/runners/_search`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/runners/{runner_id}
 * Operation: `get-runner`
 * Retrieves a runner by id.
 * @param {string} params.runnerId The identifier for the runner.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The information for the runner specified by {runner_id}. See {@link RunnerInfo}
 * @see 404 Unable to find the {runner_id} specified runner. Edit your request, then try again. (code: `runners.runner_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getRunnerUrl(params: { runnerId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/runners/${params.runnerId}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/runners/{runner_id}
 * Operation: `delete-runner`
 * Delete a runner by id.
 * @param {string} params.runnerId The identifier for the runner.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The runner specified by {runner_id} was deleted.
 * @see 400 The runner specified by {runner_id} could not be deleted. (code: `runners.runner_deletion_failed`). See {@link BasicFailedReply}
 * @see 404 The runner specified by {runner_id} cannot be found. (code: `runners.runner_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteRunnerUrl(params: { runnerId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/runners/${params.runnerId}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/infrastructure/runners/{runner_id}/_resync
 * Operation: `resync-runner`
 * Immediately resynchronizes the search index and cache for the selected runner.
 * @param {string} params.runnerId The identifier for the runner.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The runner resync operation executed successfully
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @see 500 The runner resync operation failed for runner {runner_id}. (code: `runners.resync_failed`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resyncRunnerUrl(params: { runnerId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/platform/infrastructure/runners/${params.runnerId}/_resync`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/runners/{runner_id}/logging_settings
 * Operation: `get-runner-logging-settings`
 * Get the logging settings for this runner instance.
 * @param {string} params.runnerId The identifier for the runner.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The logging settings for the runner instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this runner were not found. (code: `runners.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getRunnerLoggingSettingsUrl(params: {
  runnerId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/runners/${params.runnerId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/runners/{runner_id}/logging_settings
 * Operation: `set-runner-logging-settings`
 * Set the logging settings for this runner instance.
 * @param {string} params.runnerId The identifier for the runner.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link LoggingSettings}
 * @see 200 The updated logging settings for the runner instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this runner were not found. (code: `runners.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setRunnerLoggingSettingsUrl(params: {
  runnerId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/runners/${params.runnerId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/infrastructure/runners/{runner_id}/logging_settings
 * Operation: `delete-runner-logging-settings`
 * Reset the default logging settings for this runner instance.
 * @param {string} params.runnerId The identifier for the runner.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The updated logging settings for the runner instance. See {@link LoggingSettings}
 * @see 404 The logging settings for this runner were not found. (code: `runners.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteRunnerLoggingSettingsUrl(params: {
  runnerId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/runners/${params.runnerId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/platform/infrastructure/runners/{runner_id}/logging_settings
 * Operation: `update-runner-logging-settings`
 * All changes in the specified object are applied to the logging settings for this runner instance according to the JSON Merge Patch processing rules. Omitting existing fields causes the same values to be reapplied. Specifying a `null` value reverts the field to the default value, or removes the field when no default value exists.
 * @param {string} params.runnerId The identifier for the runner.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see 200 The updated logging settings for the runner instance. See {@link LoggingSettings}
 * @see 400 The update request is invalid. (code: `patch.request_malformed`). See {@link BasicFailedReply}
 * @see 404 The logging settings for this runner were not found. (code: `runners.logging_settings.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateRunnerLoggingSettingsUrl(params: {
  runnerId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/infrastructure/runners/${params.runnerId}/logging_settings`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/infrastructure/runners/{runner_id}/roles
 * Operation: `set-runner-roles`
 * Set runner roles.
 * @param {string} params.runnerId The identifier for the runner.
 * @param {boolean} params.bless Assigns the runner to the roles.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link RunnerRolesInfo}
 * @see 200 The roles for the {runner_id} specified runner are assigned. See {@link RunnerRolesInfo}
 * @see 400 There was an error while assigning the roles for the {runner_id} specified runner. Try your request again. (code: `runners.runner_set_roles_failed`). See {@link BasicFailedReply}
 * @see 404 Unable to find the {runner_id} specified runner. Edit your request, then try again. (code: `runners.runner_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setRunnerRolesUrl(params: {
  runnerId: string
  bless?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    bless: params.bless,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/runners/${params.runnerId}/roles`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/services/accounter/health
 * Operation: `get-accounter-health`
 * Checks the health of the Accounter.
 * @param {string} params.expectStatus If specified, returns a 417 status code if the status is not what was sent or better. Should be one of [Red, Yellow, or Green].
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Accounter's health status. See {@link AccounterHealth}
 * @see 412 The Accounter's health status; 417 is sent when expect_status is sent but the status is _not_ better or equal to what was sent. See {@link AccounterHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAccounterHealthUrl(params: {
  expectStatus?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/services/accounter/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/services/biller/health
 * Operation: `get-biller-health`
 * Checks the health of the Biller.
 * @param {string} params.expectStatus If specified, returns 417 if status is worse. Should be one of [Red, Yellow, or Green].
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returns Biller health. See {@link EventProcessorHealth}
 * @see 417 When expect_status is sent and status is worse than that, the response code is 417. See {@link EventProcessorHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getBillerHealthUrl(params: {
  expectStatus?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/services/biller/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/services/mailer/health
 * Operation: `get-mailer-health`
 * Checks the health of the Mailer.
 * @param {string} params.expectStatus If specified, returns 417 if status is worse. Should be one of [Red, Yellow, or Green].
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returns Mailer health. See {@link EventProcessorHealth}
 * @see 417 When expect_status is sent and status is worse than that, the response code is 417. See {@link EventProcessorHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getMailerHealthUrl(params: {
  expectStatus?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/services/mailer/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/services/marketo/health
 * Operation: `get-marketo-health`
 * Checks the health of the Marketo Syncer.
 * @param {string} params.expectStatus If specified, returns 417 if status is worse. Should be one of [Red, Yellow, or Green].
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returns Marketo health. See {@link EventProcessorHealth}
 * @see 417 When expect_status is sent and status is worse than that, the response code is 417. See {@link EventProcessorHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getMarketoHealthUrl(params: {
  expectStatus?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/services/marketo/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/services/recurly/health
 * Operation: `get-recurly-health`
 * Checks the health of the Recurly Syncer.
 * @param {string} params.expectStatus If specified, returns 417 if status is worse. Should be one of [Red, Yellow, or Green].
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returns Recurly health. See {@link EventProcessorHealth}
 * @see 417 When expect_status is sent and status is worse than that, the response code is 417. See {@link EventProcessorHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getRecurlyHealthUrl(params: {
  expectStatus?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/services/recurly/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/infrastructure/services/scaler/health
 * Operation: `get-scaler-health`
 * Checks the health of the Scaler.
 * @param {string} params.expectStatus If specified, returns 417 if status is worse. Should be one of [Red, Yellow, or Green].
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Returns Scaler health. See {@link EventProcessorHealth}
 * @see 417 When expect_status is sent and status is worse than that, the response code is 417. See {@link EventProcessorHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getScalerHealthUrl(params: {
  expectStatus?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
  })
  const path = encode`/${params.regionId}/platform/infrastructure/services/scaler/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/license
 * Operation: `get-license`
 * Retrieves the license.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The information for the license. See {@link LicenseObject}
 * @see 404 The license cannot be found. (code: `license.license_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getLicenseUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/license`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/license
 * Operation: `set-license`
 * Adds a new or updates an existing license.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link LicenseObject}
 * @see 200 The license was updated.
 * @see 400 The license could not be updated. (code: `license.invalid_license`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setLicenseUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/license`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/license
 * Operation: `delete-license`
 * Deletes the license.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The license was deleted.
 * @see 404 The license cannot be found. (code: `license.license_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteLicenseUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/license`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/resources/aws/s3/accounts
 * Operation: `list-aws-s3-account-credentials`
 * List all existing Account Credentials.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 List of existing Account Credentials. See {@link AccountCredentialsList}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listAwsS3AccountCredentialsUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/platform/resources/aws/s3/accounts`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/resources/aws/s3/accounts/{account_name}
 * Operation: `get-aws-s3-account-credentials`
 * Find Account Credentials by name.
 * @param {string} params.accountName Name of the Account Credentials that you would like to find.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Account Credentials retrieved successfully. See {@link AccountCredentials}
 * @see 404 Account Credentials do not exist by that name. (code: `saas.resources.aws.s3.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAwsS3AccountCredentialsUrl(params: {
  accountName: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/resources/aws/s3/accounts/${params.accountName}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/platform/resources/aws/s3/accounts/{account_name}
 * Operation: `create-aws-s3-account-credentials`
 * Inserts new AWS S3 Account Credentials.
 * @param {string} params.accountName Name of the Account Credentials that you would like to create.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link AccountCredentialsData}
 * @see 201 The Account Credentials were inserted successfully. See {@link AccountCredentials}
 * @see 400 Account Credentials data already exists for the given name. (code: `saas.resources.aws.s3.already_exists`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createAwsS3AccountCredentialsUrl(params: {
  accountName: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/resources/aws/s3/accounts/${params.accountName}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/platform/resources/aws/s3/accounts/{account_name}
 * Operation: `put-aws-s3-account-credentials`
 * Update existing Account Credentials.
 * @param {string} params.accountName Name of the Account Credentials that you would like to modify.
 * @param {string} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link AccountCredentialsData}
 * @see 200 Account Credentials retrieved successfully. See {@link AccountCredentials}
 * @see 404 There was no existing data for the given account name. (code: `saas.resources.aws.s3.not_found`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `saas.resources.aws.s3.bad_version`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function putAwsS3AccountCredentialsUrl(params: {
  accountName: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/platform/resources/aws/s3/accounts/${params.accountName}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/platform/resources/aws/s3/accounts/{account_name}
 * Operation: `delete-aws-s3-account-credentials`
 * Delete Account Credentials by name.
 * @param {string} params.accountName Name of the Account Credentials that you would like to delete.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 Account Credentials deleted successfully
 * @see 404 Account Credentials do not exist by that name. (code: `saas.resources.aws.s3.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteAwsS3AccountCredentialsUrl(params: {
  accountName: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/platform/resources/aws/s3/accounts/${params.accountName}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/platform/resources/{cloud_service}/{storage_service}/health
 * Operation: `get-resources-health`
 * Get health for the resources of the given storage provider.
 * @param {string} params.cloudService The cloud service.
 * @param {string} params.storageService The storage service.
 * @param {string} params.expectStatus If specified, returns a 417 status code if the health status is not what was sent or better. Should be one of [red, yellow, or green].
 * @param {boolean} params.verbose When true, returns the list of health check results.
 * @param {integer} params.threshold When provided will base the healthiness on the given threshold. Expressed in .
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The resources health check. See {@link ResourcesHealth}
 * @see 417 NOTE: When expect_status is sent, but the health status is _not_ better or equal to what was sent, the status code is 417. See {@link ResourcesHealth}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getResourcesHealthUrl(params: {
  cloudService: string
  storageService: string
  expectStatus?: string | null
  verbose?: boolean | null
  threshold?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    expect_status: params.expectStatus,
    verbose: params.verbose,
    threshold: params.threshold,
  })
  const path = encode`/${params.regionId}/platform/resources/${params.cloudService}/${params.storageService}/health`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/users/_login
 * Operation: `login-saas-current-user`
 * Primary authentication for an Elastic Cloud user via email address and password.
 * @see Accepts a request payload of type {@link SaasAuthRequest}
 * @see 200 Login was successful. See {@link SaasAuthResponse}
 * @see 401 Invalid user credentials. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function loginSaasCurrentUserUrl(): string {
  const path = `/users/_login`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/saas/auth/_logout
 * Operation: `logout-saas-current-user`
 * Ends an authenticated session for an Elastic Cloud user.
 * @see 200 Logout was successful
 * @return {string} A fully-interpolated and escaped URL
 */
export function logoutSaasCurrentUserUrl(): string {
  const path = `/saas/auth/_logout`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/saas/auth/_refresh
 * Operation: `refresh-saas-current-user`
 * Refreshes an authenticated session for an Elastic Cloud user with updated authorization.
 * @see 200 Refresh was successful
 * @return {string} A fully-interpolated and escaped URL
 */
export function refreshSaasCurrentUserUrl(): string {
  const path = `/saas/auth/_refresh`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/mfa
 * Operation: `get-saas-current-user-mfa-enabled`
 * Returns the MFA enabled status for the current user.
 * @see 200 The MFA enabled/disabled state response. See {@link SaasAuthMfaEnabledResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasCurrentUserMfaEnabledUrl(): string {
  const path = `/users/mfa`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/users/mfa
 * Operation: `set-saas-current-user-mfa-enabled`
 * Enables or disables MFA for the current user.
 * @see Accepts a request payload of type {@link SaasAuthMfaEnabledRequest}
 * @see 200 The MFA device is enabled
 * @see 400 MFA cannot be enabled unless there are available devices. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setSaasCurrentUserMfaEnabledUrl(): string {
  const path = `/users/mfa`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/mfa/devices
 * Operation: `get-saas-current-user-mfa-devices`
 * Returns all available MFA devices for the current user.
 * @see 200 The MFA devices response. See {@link SaasAuthMfaDevicesResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasCurrentUserMfaDevicesUrl(): string {
  const path = `/users/mfa/devices`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/mfa/devices
 * Operation: `enroll-saas-current-user-mfa-device`
 * Enrolls a new MFA device for the current user.
 * @see Accepts a request payload of type {@link SaasAuthMfaEnrollDeviceRequest}
 * @see 200 The MFA device enrollment response. See {@link SaasAuthMfaDeviceResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function enrollSaasCurrentUserMfaDeviceUrl(): string {
  const path = `/users/mfa/devices`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/users/mfa/devices/{device_id}
 * Operation: `activate-saas-current-user-mfa-device`
 * Activates an enrolled MFA device for the current user.
 * @param {string} params.deviceId Identifier for the MFA device.
 * @see Accepts a request payload of type {@link SaasAuthMfaActivateDeviceRequest}
 * @see 200 The MFA device activation response. See {@link SaasAuthMfaDeviceResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function activateSaasCurrentUserMfaDeviceUrl(params: { deviceId: string }): string {
  const path = encode`/users/mfa/devices/${params.deviceId}`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/users/mfa/devices/{device_id}
 * Operation: `delete-saas-current-user-mfa-device`
 * Deletes an enrolled MFA device for the current user.
 * @param {string} params.deviceId Identifier for the MFA device.
 * @see 200 The MFA device was successfully deleted
 * @see 400 Cannot delete the last active MFA device while MFA is enabled. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteSaasCurrentUserMfaDeviceUrl(params: { deviceId: string }): string {
  const path = encode`/users/mfa/devices/${params.deviceId}`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/mfa/devices/{device_id}/_challenge
 * Operation: `challenge-saas-current-user-mfa-device`
 * For some MFA device types (such as SMS), an SMS message or push notification is sent to the device. This endpoint requires the state_id input field to be set.
 * @param {string} params.deviceId Identifier for the MFA device.
 * @see Accepts a request payload of type {@link SaasAuthMfaChallengeRequest}
 * @see 200 The challenge was successfully delivered to the MFA device
 * @return {string} A fully-interpolated and escaped URL
 */
export function challengeSaasCurrentUserMfaDeviceUrl(params: { deviceId: string }): string {
  const path = encode`/users/mfa/devices/${params.deviceId}/_challenge`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/mfa/devices/{device_id}/_verify_challenge
 * Operation: `verify-saas-current-user-mfa-challenge`
 * Called in response to a primary (password) authentication request demanding an additional factor. This endpoint requires the state_id input field to be set.
 * @param {string} params.deviceId Identifier for the MFA device.
 * @see Accepts a request payload of type {@link SaasAuthMfaVerifyChallengeRequest}
 * @see 200 The MFA device activation response. See {@link SaasAuthResponse}
 * @see 401 The MFA challenge verification failed. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function verifySaasCurrentUserMfaChallengeUrl(params: { deviceId: string }): string {
  const path = encode`/users/mfa/devices/${params.deviceId}/_verify_challenge`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/saas/auth/oauth/_callback
 * Operation: `saas-openid-callback`
 * Finishes an OAuth2 authentication by validating and authorizing an ID token.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link SaasOpenIdCodeCallbackRequest}
 * @see 200 The token validation was successful. See {@link SaasAuthResponse}
 * @see 400 The token validation request was invalid. See {@link BasicFailedReply}
 * @see 401 The token validation failed. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function saasOpenidCallbackUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/saas/auth/oauth/_callback`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/saas/billing/consumption/lineitems
 * Operation: `get-consumption-line-items`
 * Retrieves the line items of for the current organization.
 * @param {string} params.at Only returns line items active at the given time, if specified. Defaults to all line items.
 * @see 200 The line items associated to an organization. See {@link LineItems}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getConsumptionLineItemsUrl(params: { at?: string | null } = emptyParams): string {
  const queryString = buildQueryString({
    at: params.at,
  })
  const path = `/saas/billing/consumption/lineitems`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/saas/billing/prices
 * Operation: `get-prices`
 * Retrieves the list of Elastic Cloud products' prices by regions.
 * @param {string} params.region The region for which to fetch prices.
 * @param {string} params.timestamp A timestamp to retrieve prices effective at a specific point in time. Default: the current instant using the system UTC clock.
 * @param {boolean} params.isMarketplace Whether or not to include marketplace uplifts in the prices.
 * @see 200 Prices for all the products in a region. See {@link Prices}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getPricesUrl(params: {
  region: string
  timestamp?: string | null
  isMarketplace?: boolean | null
}): string {
  const queryString = buildQueryString({
    region: params.region,
    timestamp: params.timestamp,
    is_marketplace: params.isMarketplace === undefined ? false : params.isMarketplace,
  })
  const path = `/saas/billing/prices`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/saas/billing/usage/features
 * Operation: `get-features-usage`
 * Retrieves the features the account is using above its subscription level in the last hour.
 * @see 200 The Features Usage has been returned. See {@link FeaturesUsage}
 * @see 404 The Account ID does not exist. (code: `features_usage.account_not_found`). See {@link BasicFailedReply}
 * @see 500 Failed to retrieve valid features usage due to an internal server error. (code: `features_usage.invalid_stored_data`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getFeaturesUsageUrl(): string {
  const path = `/saas/billing/usage/features`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/saas/billing/usage/{account_id}/features
 * Operation: `get-user-features-usage`
 * Retrieves the features the account is using above its subscription level in the last hour.
 * @param {string} params.accountId Id of an Account.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Features Usage has been returned. See {@link FeaturesUsage}
 * @see 404 The Account ID does not exist. (code: `features_usage.account_not_found`). See {@link BasicFailedReply}
 * @see 500 Failed to retrieve valid features usage due to an internal server error. (code: `features_usage.invalid_stored_data`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getUserFeaturesUsageUrl(params: { accountId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/saas/billing/usage/${params.accountId}/features`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/saas/blog/{category}
 * Operation: `get-saas-blog`
 * Retrieves posts from the Elastic Blog.
 * @param {string} params.category The name of the category.
 * @param {integer} params.count How many blog posts should be returned. Default: 3
 * @see 200 The Elastic Blog posts have been returned. See {@link Array<Post>}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasBlogUrl(params: { category: string; count?: number | null }): string {
  const queryString = buildQueryString({
    count: params.count === undefined ? 3 : params.count,
  })
  const path = encode`/saas/blog/${params.category}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/saas/portal/_callback
 * Operation: `portal-checkout-saml-callback`
 * Handles a SAML response from the Identity Provider and extracts user's metadata to provision a new Portal Checkout user.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts an optional request payload of type {@link string}
 * @see Accepts a request payload of type {@link string}
 * @see 302 Redirect to either 'RelayState' or configured Checkout URL. See {@link void}
 * @see 403 Forbidden access to this resource. See {@link void}
 * @return {string} A fully-interpolated and escaped URL
 */
export function portalCheckoutSamlCallbackUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/saas/portal/_callback`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/saas/portal/_init
 * Operation: `portal-checkout-saml-init`
 * Initiates a SAML Assertion Request to be processed by an Identity Provider.
 * @param {string} params.relayState The relay-state to hold during the SAML assertion.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 302 Redirect to Identity provider with assertion. See {@link void}
 * @see 403 Forbidden access to this resource. See {@link void}
 * @return {string} A fully-interpolated and escaped URL
 */
export function portalCheckoutSamlInitUrl(params: {
  relayState?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    RelayState: params.relayState,
  })
  const path = encode`/${params.regionId}/saas/portal/_init`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/saas/providers
 * Operation: `get-saas-providers`
 * Retrieves the list of Elastic Cloud providers with their regions.
 * @param {boolean} params.productionOnlyRegions When false, the response will include non-production ready regions. Default: true
 * @see 200 The Elastic Cloud providers have been returned. See {@link Array<Provider>}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasProvidersUrl(
  params: { productionOnlyRegions?: boolean | null } = emptyParams,
): string {
  const queryString = buildQueryString({
    production_only_regions:
      params.productionOnlyRegions === undefined ? true : params.productionOnlyRegions,
  })
  const path = `/saas/providers`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/saas/status
 * Operation: `get-saas-status`
 * Retrieves the current Elastic Cloud Status summary.
 * @see 200 The Elastic Cloud Status has been returned. See {@link Summary}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasStatusUrl(): string {
  const path = `/saas/status`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/saas/support/cases
 * Operation: `create-support-case`
 * Creates a support case.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link CreateSupportCaseRequest}
 * @see 201 The support case was successfully created.
 * @see 400 The support case definition is not valid. See {@link BasicFailedReply}
 * @see 503 There was a problem communicating with the support portal back-end. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createSupportCaseUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/saas/support/cases`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/users
 * Operation: `get-saas-current-user`
 * Returns the current user based on the X-Found-Run-As header.
 * @see 200 User successfully fetched. See {@link SaasUserResponse}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasCurrentUserUrl(): string {
  const path = `/users`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users
 * Operation: `create-saas-user`
 * Create SaaS user.
 * @param {boolean} params.activate Activate the new user if true, only Stage if false.
 * @see Accepts a request payload of type {@link CreateSaasUserRequest}
 * @see 201 User successfully created. See {@link SaasUserResponse}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 409 User already exists. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createSaasUserUrl(params: { activate?: boolean | null } = emptyParams): string {
  const queryString = buildQueryString({
    activate: params.activate === undefined ? false : params.activate,
  })
  const path = `/users`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/users/_email
 * Operation: `set-saas-current-user-email`
 * Updates a user's email address. User based on the X-Found-Run-As header.
 * @see Accepts a request payload of type {@link SaasUpdateEmailRequestData}
 * @see 200 User successfully updated. See {@link SaasUserResponse}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 403 Access is denied. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setSaasCurrentUserEmailUrl(): string {
  const path = `/users/_email`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/_password
 * Operation: `set-saas-current-user-password`
 * Updates a user's password. User based on the X-Found-Run-As header.
 * @see Accepts a request payload of type {@link SaasUpdatePasswordRequestData}
 * @see 200 User successfully updated. See {@link SaasUserResponse}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 403 Access is denied. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setSaasCurrentUserPasswordUrl(): string {
  const path = `/users/_password`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/_password_hash
 * Operation: `set-saas-current-user-password-hash`
 * Updates a user's password via password reset hash. User based on the X-Found-Run-As header.
 * @see Accepts a request payload of type {@link SaasUpdatePasswordWithHashRequestData}
 * @see 200 User successfully updated. See {@link SaasUserResponse}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 403 Access is denied. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setSaasCurrentUserPasswordHashUrl(): string {
  const path = `/users/_password_hash`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/_resend_verification
 * Operation: `resend-saas-verification-email`
 * Resends the email for the user to verify their email address.
 * @see 200 Verification email resent
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 404 User not found. See {@link BasicFailedReply}
 * @see 409 User has already verified their email. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resendSaasVerificationEmailUrl(): string {
  const path = `/users/_resend_verification`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/_reset-password
 * Operation: `reset-saas-user-password`
 * Requests a password reset. A confirmation email is sent to existing users.
 * @see Accepts a request payload of type {@link SaasResetPasswordRequest}
 * @see 200 Password reset procedure initiated
 * @return {string} A fully-interpolated and escaped URL
 */
export function resetSaasUserPasswordUrl(): string {
  const path = `/users/_reset-password`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/saas/user/_subscription_level
 * Operation: `subscription-level`
 * Update subscription level request.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link SaasUpdateSubscriptionLevelRequestData}
 * @see 200 Update subscription level request was submitted successfully
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 402 The request execution failed (code: 'user.update_user_level_denied'). See {@link BasicFailedReply}
 * @see 403 Access is denied. See {@link BasicFailedReply}
 * @see 500 The request execution failed (code: 'event.event_not_found'). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function subscriptionLevelUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/saas/user/_subscription_level`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/users/_verify
 * Operation: `verify-saas-user-email`
 * Verifies the user's email address and activates those users with pending activation.
 * @see Accepts a request payload of type {@link SaasVerifyUserEmailRequest}
 * @see 200 User's email was verified. See {@link SaasUserResponse}
 * @see 401 Invalid credentials hash. See {@link BasicFailedReply}
 * @see 403 Expired or previously used credentials token. See {@link BasicFailedReply}
 * @see 404 User not found. See {@link BasicFailedReply}
 * @see 409 User has already verified their email. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function verifySaasUserEmailUrl(): string {
  const path = `/users/_verify`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/applications
 * Operation: `get-saas-current-user-applications`
 * Retrieves the list of Applications the user can access.
 * @see 200 The user applications have been returned. See {@link SaasUserApplicationsResponse}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasCurrentUserApplicationsUrl(): string {
  const path = `/users/applications`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/saas/user/feedback
 * Operation: `submit-feedback`
 * Submit feedback.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link SaasUserFeedback}
 * @see 200 Feedback was submitted successfully
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 403 Access is denied. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function submitFeedbackUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/saas/user/feedback`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/users/mfa/_reset
 * Operation: `reset-saas-current-user-mfa`
 * Resets MFA for the current user.
 * @see 200 The MFA was successfully reseted
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 403 Access is denied. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resetSaasCurrentUserMfaUrl(): string {
  const path = `/users/mfa/_reset`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/users/profile
 * Operation: `put-saas-current-user`
 * Updates profile information for the current user.
 * @see Accepts a request payload of type {@link SaasUpdateProfileRequestData}
 * @see 200 User successfully updated. See {@link SaasUserResponse}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function putSaasCurrentUserUrl(): string {
  const path = `/users/profile`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/trials/_extend
 * Operation: `extend-trial`
 * Request a one-time trial extension.
 * @see 200 Trial was extended successfully
 * @see 400 Trial extension request was not valid. See {@link BasicFailedReply}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 403 Access is denied. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function extendTrialUrl(): string {
  const path = `/users/trials/_extend`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users
 * Operation: `create-saas-user-admin`
 * Create SaaS user.
 * @see Accepts a request payload of type {@link CreateSaasUserAdminRequest}
 * @see 201 User successfully created. See {@link SaasUserCreationResponse}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 409 User already exists. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createSaasUserAdminUrl(): string {
  const path = `/users`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/_invite
 * Operation: `invite-saas-user`
 * Invites a new user with a given email and will apply a specific profile upon acceptance.
 * @see Accepts a request payload of type {@link SaasInviteUserEmailRequest}
 * @see 200 The user invitation was created. See {@link SaasInvitedUserResponse}
 * @see 400 The invited email is an invalid email address. See {@link BasicFailedReply}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 409 The invited user already exists. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function inviteSaasUserUrl(): string {
  const path = `/users/_invite`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/_resend_verification
 * Operation: `resend-saas-verification-email-admin`
 * Resends the email for the user to verify their email address.
 * @see Accepts a request payload of type {@link SaasResendVerificationRequest}
 * @see 200 Verification email resent
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 404 User not found. See {@link BasicFailedReply}
 * @see 409 User has already verified their email. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resendSaasVerificationEmailAdminUrl(): string {
  const path = `/users/_resend_verification`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/external/events/verify_email
 * Operation: `add-saas-external-user-event`
 * Post external user verify-email event.
 * @see Accepts a request payload of type {@link SaasExternalChangeMailEvent}
 * @see 201 External User event successfully created. See {@link SaasExternalUserResponse}
 * @see 400 Invalid request. See {@link BasicFailedReply}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function addSaasExternalUserEventUrl(): string {
  const path = `/users/external/events/verify_email`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/external/{email}
 * Operation: `get-saas-external-user`
 * Fetch external user info.
 * @param {string} params.email Email for the user.
 * @see 200 External User successfully fetched. See {@link SaasExternalUserResponse}
 * @see 400 Invalid request. See {@link BasicFailedReply}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 404 External User not found. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasExternalUserUrl(params: { email: string }): string {
  const path = encode`/users/external/${params.email}`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/{user_id}
 * Operation: `get-saas-user`
 * Fetch user info.
 * @param {string} params.userId Identifier for the user.
 * @param {string} params.include Comma delimited list of optional properties to include in the output.
 * @see 200 User successfully fetched. See {@link SaasUserResponse}
 * @see 400 Invalid user id. See {@link BasicFailedReply}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @see 404 User not found. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasUserUrl(params: { userId: string; include?: string | null }): string {
  const queryString = buildQueryString({
    include: params.include,
  })
  const path = encode`/users/${params.userId}`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/users/{user_id}/auth/mfa
 * Operation: `get-saas-user-mfa-enabled`
 * Fetch a user's MFA enabled status.
 * @param {string} params.userId Identifier for the user.
 * @see 200 The MFA enabled/disabled state response. See {@link SaasAuthMfaEnabledResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasUserMfaEnabledUrl(params: { userId: string }): string {
  const path = encode`/users/${params.userId}/auth/mfa`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/users/{user_id}/auth/mfa
 * Operation: `set-saas-user-mfa-enabled`
 * Enables or disables MFA for a user.
 * @param {string} params.userId Identifier for the user.
 * @see Accepts a request payload of type {@link SaasAuthMfaEnabledRequest}
 * @see 200 The MFA enabled/disabled state response. See {@link SaasAuthMfaEnabledResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function setSaasUserMfaEnabledUrl(params: { userId: string }): string {
  const path = encode`/users/${params.userId}/auth/mfa`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/{user_id}/auth/mfa/devices
 * Operation: `get-saas-user-mfa-devices`
 * Returns all available MFA devices for a user.
 * @param {string} params.userId Identifier for the user.
 * @see 200 The MFA devices response. See {@link SaasAuthMfaDevicesResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasUserMfaDevicesUrl(params: { userId: string }): string {
  const path = encode`/users/${params.userId}/auth/mfa/devices`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/{user_id}/auth/mfa/devices
 * Operation: `enroll-saas-user-mfa-device`
 * Enrolls a new MFA device for a user.
 * @param {string} params.userId Identifier for the user.
 * @see Accepts a request payload of type {@link SaasAuthMfaEnrollDeviceRequest}
 * @see 200 The MFA device enrollment response. See {@link SaasAuthMfaDeviceResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function enrollSaasUserMfaDeviceUrl(params: { userId: string }): string {
  const path = encode`/users/${params.userId}/auth/mfa/devices`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/users/{user_id}/auth/mfa/devices/{device_id}
 * Operation: `activate-saas-user-mfa-device`
 * Activates an enrolled MFA device for a user.
 * @param {string} params.userId Identifier for the user.
 * @param {string} params.deviceId Identifier for the MFA device.
 * @see Accepts a request payload of type {@link SaasAuthMfaActivateDeviceRequest}
 * @see 200 The MFA device activation response. See {@link SaasAuthMfaDeviceResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function activateSaasUserMfaDeviceUrl(params: { userId: string; deviceId: string }): string {
  const path = encode`/users/${params.userId}/auth/mfa/devices/${params.deviceId}`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/users/{user_id}/auth/mfa/devices/{device_id}
 * Operation: `delete-saas-user-mfa-device`
 * Deletes an enrolled MFA device for a user.
 * @param {string} params.userId Identifier for the user.
 * @param {string} params.deviceId Identifier for the MFA device.
 * @see 200 The MFA device deleted response. See {@link SaasAuthMfaDeviceDeletedResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteSaasUserMfaDeviceUrl(params: { userId: string; deviceId: string }): string {
  const path = encode`/users/${params.userId}/auth/mfa/devices/${params.deviceId}`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/{user_id}/email/{email_domain}/suppressions
 * Operation: `get-saas-user-email-suppressions`
 * Get list of email suppressions for given user and domain.
 * @param {string} params.email Override email to retrieve suppressions for.
 * @param {string} params.userId Identifier for the user.
 * @param {string} params.emailDomain Email domain for the suppression.
 * @see 200 Suppressions successfully retrieved. See {@link SaasUserEmailSuppressions}
 * @see 400 Invalid request. See {@link BasicFailedReply}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getSaasUserEmailSuppressionsUrl(params: {
  email?: string | null
  userId: string
  emailDomain: string
}): string {
  const queryString = buildQueryString({
    email: params.email,
  })
  const path = encode`/users/${params.userId}/email/${params.emailDomain}/suppressions`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/users/{user_id}/email/{email_domain}/suppressions
 * Operation: `delete-saas-user-email-suppressions`
 * Remove email suppressions for given user and domain.
 * @param {string} params.email Override email to remove suppressions for.
 * @param {string} params.userId Identifier for the user.
 * @param {string} params.emailDomain Email domain for the suppression.
 * @see 200 Suppressions successfully deleted
 * @see 400 Invalid request. See {@link BasicFailedReply}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteSaasUserEmailSuppressionsUrl(params: {
  email?: string | null
  userId: string
  emailDomain: string
}): string {
  const queryString = buildQueryString({
    email: params.email,
  })
  const path = encode`/users/${params.userId}/email/${params.emailDomain}/suppressions`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/users/{user_id}/mfa/_reset
 * Operation: `reset-saas-user-mfa`
 * Resets MFA for a user.
 * @param {string} params.userId Identifier for the user.
 * @see 200 The MFA was successfully reseted
 * @see 404 User not found. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function resetSaasUserMfaUrl(params: { userId: string }): string {
  const path = encode`/users/${params.userId}/mfa/_reset`
  return `${getRawBasePath()}${path}`
}

/**
 * PUT /api/v1/users/{user_id}/profile
 * Operation: `put-saas-user`
 * Update a user's profile as an admin.
 * @param {string} params.userId Identifier for the user.
 * @see Accepts a request payload of type {@link SaasUpdateProfileRequestData}
 * @see 200 User successfully updated. See {@link SaasUserResponse}
 * @see 401 Invalid user authentication. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function putSaasUserUrl(params: { userId: string }): string {
  const path = encode`/users/${params.userId}/profile`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/stack/instance-types
 * Operation: `get-instance-types`
 * Retrieves a list of all instance types.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 List of node types. See {@link Array<InstanceTypeResource>}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getInstanceTypesUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/stack/instance-types`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/stack/versions
 * Operation: `get-version-stacks`
 * By default, retrieves only the available Elastic Stack versions. To retrieve all of the Elastic Stack versions, use the `show_deleted parameter`.
 * @param {boolean} params.showDeleted Whether to show deleted stack versions or not.
 * @param {boolean} params.showUnusable Whether to show versions that are unusable by the authenticated user.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The list of all available Elastic Stack versions are retrieved, including the template version and structure. See {@link StackVersionConfigs}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getVersionStacksUrl(params: {
  showDeleted?: boolean | null
  showUnusable?: boolean | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    show_deleted: params.showDeleted === undefined ? false : params.showDeleted,
    show_unusable: params.showUnusable === undefined ? false : params.showUnusable,
  })
  const path = encode`/${params.regionId}/stack/versions`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/stack/versions
 * Operation: `update-stack-packs`
 * Creates or updates an Elastic Stack pack and template. The endpoint supports `multipart/form-data` requests, as well as `application/zip` and `application/octet-stream` requests with a binary body. The maximum size of the payload is 1Mb. When the archive contains an Elastic Stack configuration that is available through the API, the configuration and template are overwritten.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link File}
 * @see 200 The Elastic Stack pack successfully processed. See {@link StackVersionArchiveProcessingResult}
 * @see 400 * There is an error in the file. Choose a different file, then try again. (code: `stackpack.bad_archive`)
 * Some unexpected error occurred. (code: `stackpack.unknown_internal_error`). See {@link StackVersionArchiveProcessingResult}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateStackPacksUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/stack/versions`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/stack/versions/access
 * Operation: `get-version-access-management`
 * Lists existing AccessManagement for stack versions.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The AccessManagement data was successfully retrieved. See {@link AccessManagementResponse}
 * @see 500 Bad AccessManagement data was already on the server. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getVersionAccessManagementUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/stack/versions/access`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/stack/versions/access
 * Operation: `create-version-access-management`
 * Inserts a new AccessManagement for stack versions. Overwrites existing data.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link CreateAccessManagementRequest}
 * @see 201 The AccessManagement data was inserted successfully. See {@link AccessManagementResponse}
 * @see 400 Bad AccessManagement data was sent. See {@link BasicFailedReply}
 * @see 500 Bad AccessManagement data was already on the server. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createVersionAccessManagementUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/stack/versions/access`
  return `${getBasePath()}${path}`
}

/**
 * PATCH /api/v1/regions/{region_id}/stack/versions/access
 * Operation: `patch-version-access-management`
 * Updates new AccessManagement for stack versions. Overwrites existing data.
 * @param {integer} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link UpdateAccessManagementRequest}
 * @see 200 The AccessManagement data was updated successfully. See {@link AccessManagementResponse}
 * @see 400 Bad AccessManagement data was sent. See {@link BasicFailedReply}
 * @see 500 Bad AccessManagement data was already on the server. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function patchVersionAccessManagementUrl(params: {
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/stack/versions/access`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/regions/{region_id}/stack/versions/access/blacklisted-upgrades
 * Operation: `add-blacklisted-upgrade`
 * Adds a blacklisted upgrade version-from matcher to multiple version-to matchers. If the provided version-from matcher already has existing version-to matchers, this is appended. If it does not, a new list is started.
 * @param {integer} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link BlacklistedUpgrade}
 * @see 200 The AccessManagement data was updated successfully. See {@link AccessManagementResponse}
 * @see 400 Bad AccessManagement data was sent. See {@link BasicFailedReply}
 * @see 500 Bad AccessManagement data was already on the server. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function addBlacklistedUpgradeUrl(params: {
  version?: number | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/stack/versions/access/blacklisted-upgrades`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/stack/versions/access/blacklisted-upgrades/{from_version_matcher}
 * Operation: `remove-blacklisted-upgrade`
 * Removes a blacklisted upgrade version matcher by version-from matcher.
 * @param {integer} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.fromVersionMatcher A matcher expression for upgrade-from versions to de-blacklist.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The AccessManagement data was updated successfully. See {@link AccessManagementResponse}
 * @see 400 Bad AccessManagement data was sent. See {@link BasicFailedReply}
 * @see 500 Bad AccessManagement data was already on the server. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function removeBlacklistedUpgradeUrl(params: {
  version?: number | null
  fromVersionMatcher: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/stack/versions/access/blacklisted-upgrades/${params.fromVersionMatcher}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * PUT /api/v1/regions/{region_id}/stack/versions/access/blacklisted-upgrades/{from_version_matcher}/{to_version_matcher}
 * Operation: `add-blacklisted-upgrade-pair`
 * Adds a blacklisted upgrade version matcher pair. If the provided version-from matcher already has existing version-to matchers, this is appeneded. If it does not, a new list is started.
 * @param {integer} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.fromVersionMatcher A matcher expression for upgrade-from versions to blacklist.
 * @param {string} params.toVersionMatcher A matcher expression for upgrade-to versions to blacklist.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The AccessManagement data was updated successfully. See {@link AccessManagementResponse}
 * @see 400 Bad AccessManagement data was sent. See {@link BasicFailedReply}
 * @see 500 Bad AccessManagement data was already on the server. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function addBlacklistedUpgradePairUrl(params: {
  version?: number | null
  fromVersionMatcher: string
  toVersionMatcher: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/stack/versions/access/blacklisted-upgrades/${params.fromVersionMatcher}/${params.toVersionMatcher}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/stack/versions/access/blacklisted-upgrades/{from_version_matcher}/{to_version_matcher}
 * Operation: `remove-blacklisted-upgrade-pair`
 * Removes a blacklisted upgrade-to version matcher from the given upgrade-from version matcher. If upgrade-from matcher no longer has any upgrade-to version matchers, it too is removed. .
 * @param {integer} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.fromVersionMatcher A matcher expression for upgrade-from versions to un-blacklist.
 * @param {string} params.toVersionMatcher A matcher expression for upgrade-to versions to un-blacklist.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The AccessManagement data was updated successfully. See {@link AccessManagementResponse}
 * @see 400 Bad AccessManagement data was sent. See {@link BasicFailedReply}
 * @see 500 Bad AccessManagement data was already on the server. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function removeBlacklistedUpgradePairUrl(params: {
  version?: number | null
  fromVersionMatcher: string
  toVersionMatcher: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/stack/versions/access/blacklisted-upgrades/${params.fromVersionMatcher}/${params.toVersionMatcher}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/stack/versions/access/users
 * Operation: `list-version-user-access-management`
 * List a AccessManagement for stack versions for users.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The User-specific AccessManagement data was retrieved successfully. See {@link UserSpecificAccessManagementListResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function listVersionUserAccessManagementUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/stack/versions/access/users`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/stack/versions/access/users/{user_id}
 * Operation: `get-version-user-access-management`
 * Find a AccessManagement for stack versions for a user.
 * @param {string} params.userId User id of the user whom you would like to retrieve AccessManagement data for. In SaaS this will be the Psql DB user_id/.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The User-specific AccessManagement data was retrieved successfully. See {@link UserSpecificAccessManagementResponse}
 * @see 404 User-specific AccessManagement data does not exist. (code: `stack.versions.access.not_found_for_user`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getVersionUserAccessManagementUrl(params: {
  userId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/stack/versions/access/users/${params.userId}`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/stack/versions/access/users/{user_id}
 * Operation: `create-version-user-access-management`
 * Inserts a new AccessManagement for stack versions for a user.
 * @param {string} params.userId User id of the user whom you would like to retrieve AccessManagement data for. In SaaS this will be the Psql DB user_id/.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link UserSpecificAccessManagementData}
 * @see 201 The User-specific AccessManagement data was inserted successfully. See {@link UserSpecificAccessManagementResponse}
 * @see 400 User-specific AccessManagement data already exists. (code: `stack.versions.access.already_exists_for_user`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createVersionUserAccessManagementUrl(params: {
  userId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/stack/versions/access/users/${params.userId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/stack/versions/access/users/{user_id}
 * Operation: `put-version-user-access-management`
 * Update the AccessManagement for stack versions for a user.
 * @param {string} params.userId User id of the user whom you would like to retrieve AccessManagement data for. In SaaS this will be the Psql DB user_id/.
 * @param {string} params.version If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link UserSpecificAccessManagementData}
 * @see 200 The User-specific AccessManagement data was updated successfully. See {@link UserSpecificAccessManagementResponse}
 * @see 404 There was no existing data for the given user id. (code: `stack.versions.access.not_found_for_user`). See {@link BasicFailedReply}
 * @see 409 There is a version conflict. (code: `stack.versions.access.bad_version`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function putVersionUserAccessManagementUrl(params: {
  userId: string
  version?: string | null
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.version,
  })
  const path = encode`/${params.regionId}/stack/versions/access/users/${params.userId}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/stack/versions/access/users/{user_id}
 * Operation: `delete-version-user-access-management`
 * Delete the AccessManagement for stack versions for a user.
 * @param {string} params.userId User id of the user whom you would like to delete AccessManagement data for. In SaaS this will be the Psql DB user_id/.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The User-specific AccessManagement data was deleted successfully
 * @see 404 There was no existing data for the given user id. (code: `stack.versions.access.not_found_for_user`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteVersionUserAccessManagementUrl(params: {
  userId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/stack/versions/access/users/${params.userId}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/stack/versions/access/{version}
 * Operation: `add-whitelisted-version`
 * Adds a whitelisted version to Access Management.
 * @param {integer} params.versionQuery If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.version An Elastic Stack version.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The AccessManagement data was updated successfully. See {@link AccessManagementResponse}
 * @see 400 Bad AccessManagement data was sent. See {@link BasicFailedReply}
 * @see 500 Bad AccessManagement data was already on the server. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function addWhitelistedVersionUrl(params: {
  versionQuery?: number | null
  version: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.versionQuery,
  })
  const path = encode`/${params.regionId}/stack/versions/access/${params.version}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * DELETE /api/v1/regions/{region_id}/stack/versions/access/{version}
 * Operation: `remove-whitelisted-version`
 * Removes a whitelisted version from Access Management.
 * @param {integer} params.versionQuery If specified then checks for conflicts against the version stored in the persistent store (returned in 'x-cloud-resource-version' of the GET request).
 * @param {string} params.version An Elastic Stack version.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The AccessManagement data was updated successfully. See {@link AccessManagementResponse}
 * @see 400 Bad AccessManagement data was sent. See {@link BasicFailedReply}
 * @see 500 Bad AccessManagement data was already on the server. See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function removeWhitelistedVersionUrl(params: {
  versionQuery?: number | null
  version: string
  regionId: string
}): string {
  const queryString = buildQueryString({
    version: params.versionQuery,
  })
  const path = encode`/${params.regionId}/stack/versions/access/${params.version}`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/stack/versions/{version}
 * Operation: `get-version-stack`
 * Retrieves the Elastic Stack version and template.
 * @param {string} params.version The Elastic Stack version. For example, `5.3.1` or `5.0.0-RC4`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The Elastic Stack version is found. See {@link StackVersionConfig}
 * @see 404 The Elastic Stack version can't be found. (code: `stackpack.version_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getVersionStackUrl(params: { version: string; regionId: string }): string {
  const path = encode`/${params.regionId}/stack/versions/${params.version}`
  return `${getBasePath()}${path}`
}

/**
 * PUT /api/v1/regions/{region_id}/stack/versions/{version}
 * Operation: `update-version-stack`
 * Updates the Elastic Stack version configuration.
 * @param {string} params.version The Elastic Stack version. For example, `5.3.1` or `5.0.0-RC4`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link StackVersionConfigPost}
 * @see 200 The Elastic Stack version successfully updated. See {@link StackVersionConfig}
 * @see 404 The Elastic Stack version can't be found. (code: `stackpack.missing_platform_version`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateVersionStackUrl(params: { version: string; regionId: string }): string {
  const path = encode`/${params.regionId}/stack/versions/${params.version}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/stack/versions/{version}
 * Operation: `delete-version-stack`
 * Uses the `deleted` flag, which removes only that version of the Elastic Stack from the list of available versions. To restore the version, send an update request. For more information, see the PUT request.
 * @param {string} params.version The Elastic Stack version. For example, `5.3.1` or `5.0.0-RC4`.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The `deleted` flag is applied to the specified Elastic Stack version.
 * @see 404 The Elastic Stack version can't be found. (code: `stackpack.version_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteVersionStackUrl(params: { version: string; regionId: string }): string {
  const path = encode`/${params.regionId}/stack/versions/${params.version}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/user
 * Operation: `get-current-user`
 * Fetch current user information.
 * @see 200 User successfully fetched. See {@link User}
 * @see 404 User not found. (code: `user.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getCurrentUserUrl(): string {
  const path = `/user`
  return `${getRawBasePath()}${path}`
}

/**
 * PATCH /api/v1/user
 * Operation: `update-current-user`
 * Updates the current user.
 * @see Accepts a request payload of type {@link string}
 * @see 200 User successfully updated. See {@link User}
 * @see 400 * Some of the provided roles are invalid. (code: `user.roles.invalid`)
 * Some of the provided roles are forbidden. (code: `user.roles.forbidden`)
 * Trying to set a restricted field. (code: `user.restricted_field`)
 * External users cannot be modified. (code: `user.cannot_modify_external`)
 * Built-in users cannot be modified. (code: `user.cannot_modify`). See {@link BasicFailedReply}
 * @see 404 User not found. (code: `user.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateCurrentUserUrl(): string {
  const path = `/user`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users
 * Operation: `get-users`
 * Fetches all available users.
 * @param {boolean} params.includeDisabled True if disabled users should be included in the response.
 * @see 200 Users successfully fetched. See {@link UserList}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getUsersUrl(params: { includeDisabled?: boolean | null } = emptyParams): string {
  const queryString = buildQueryString({
    include_disabled: params.includeDisabled === undefined ? false : params.includeDisabled,
  })
  const path = `/users`
  return `${getRawBasePath()}${path}${queryString}`
}

/**
 * POST /api/v1/users
 * Operation: `create-user`
 * Creates a new user.
 * @see Accepts a request payload of type {@link User}
 * @see 200 User successfully created. See {@link User}
 * @see 400 * The provided user name is invalid. Check that it is not empty and it does not contain special characters. (code: `user.user_name.invalid`)
 * Some of the provided roles are invalid. (code: `user.roles.invalid`)
 * Some of the provided roles are forbidden. (code: `user.roles.forbidden`)
 * Trying to set a restricted field. (code: `user.restricted_field`). See {@link BasicFailedReply}
 * @see 409 The username is already in use. (code: `user.user_name.conflict`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createUserUrl(): string {
  const path = `/users`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/auth
 * Operation: `get-authentication-info`
 * Provides authentication information about a user, including elevated permission status and TOTP device availability.
 * @see 200 User authentication information response. See {@link AuthenticationInfo}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getAuthenticationInfoUrl(): string {
  const path = `/users/auth`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/auth/_elevate
 * Operation: `enable-elevated-permissions`
 * Enables the elevated permissions for the current user. Elevated permissions allow the user to complete potentially destructive operations on clusters. Elevated permissions are available for a limited period of time and automatically expire if you do not renew them.
 * @see Accepts an optional request payload of type {@link ElevatePermissionsRequest}
 * @see 200 Elevated permissions are enabled and the authorization token was generated. See {@link TokenResponse}
 * @see 400 Missed or invalid MFA token. (code: `authc.invalid_token`). See {@link BasicFailedReply}
 * @see 401 The authentication token is invalid or expired. (code: `root.unauthorized`). See {@link BasicFailedReply}
 * @see 501 The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`). See {@link BasicFailedReply}
 * @see 502 The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function enableElevatedPermissionsUrl(): string {
  const path = `/users/auth/_elevate`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/users/auth/_elevate
 * Operation: `disable-elevated-permissions`
 * Disables elevated permissions for the user.
 * @see 200 The elevated permissions are disabled and the authorization token was generated. See {@link TokenResponse}
 * @see 401 The authentication token is invalid or expired. (code: `root.unauthorized`). See {@link BasicFailedReply}
 * @see 501 The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`). See {@link BasicFailedReply}
 * @see 502 The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function disableElevatedPermissionsUrl(): string {
  const path = `/users/auth/_elevate`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/users/auth/_login
 * Operation: `login`
 * Authenticates against available users.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link LoginRequest}
 * @see 200 Login successful, returns the token in the body (if 'login_state.path' not specified). See {@link TokenResponse}
 * @see 302 Redirects to '/sso/token#BEARER_TOKEN?state=LOGIN_STATE' with the fragment containing a bearer token  (if 'login_state.path' is specified)
 * @see 401 The supplied authentication is invalid. (code: `root.unauthenticated`). See {@link BasicFailedReply}
 * @see 501 The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`). See {@link BasicFailedReply}
 * @see 502 The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function loginUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/users/auth/_login`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/users/auth/_logout
 * Operation: `logout`
 * Destroys the current session.
 * @see 200 The current session was successfully destroyed.
 * @see 501 The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`). See {@link BasicFailedReply}
 * @see 502 The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function logoutUrl(): string {
  const path = `/users/auth/_logout`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/users/auth/_refresh
 * Operation: `refresh-token`
 * Issues a new authentication token.
 * @see 200 The token refreshed successfully and was returned in the body of the response. See {@link TokenResponse}
 * @see 401 The authentication token is invalid or expired. (code: `root.unauthorized`). See {@link BasicFailedReply}
 * @see 501 The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`). See {@link BasicFailedReply}
 * @see 502 The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function refreshTokenUrl(): string {
  const path = `/users/auth/_refresh`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/auth/keys
 * Operation: `get-api-keys`
 * Retrieves the metadata for all of the API keys that the user generated.
 * @see 200 The metadata for the API keys is retrieved. See {@link ApiKeysResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApiKeysUrl(): string {
  const path = `/users/auth/keys`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/users/auth/keys
 * Operation: `create-api-key`
 * Creates a new API key.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link CreateApiKeyRequest}
 * @see 201 The API key is created and returned in the body of the response. See {@link ApiKeyResponse}
 * @see 400 The request is invalid. Specify a different request, then try again. (code: `api_keys.invalid_input`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function createApiKeyUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/users/auth/keys`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/users/auth/keys
 * Operation: `delete-api-keys`
 * Delete or invalidate API keys.
 * @see Accepts a request payload of type {@link DeleteApiKeysRequest}
 * @see 200 The API keys are deleted.
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteApiKeysUrl(): string {
  const path = `/users/auth/keys`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/users/auth/keys/_all
 * Operation: `get-users-api-keys`
 * Retrieves the metadata for all of the API keys for all users.
 * @see 200 The metadata for the API keys is retrieved. See {@link ApiKeysResponse}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getUsersApiKeysUrl(): string {
  const path = `/users/auth/keys/_all`
  return `${getRawBasePath()}${path}`
}

/**
 * DELETE /api/v1/users/auth/keys/_all
 * Operation: `delete-users-api-keys`
 * Delete or invalidate the API keys for multiple users.
 * @see Accepts a request payload of type {@link DeleteUsersApiKeysRequest}
 * @see 200 The API keys are deleted.
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteUsersApiKeysUrl(): string {
  const path = `/users/auth/keys/_all`
  return `${getRawBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/users/auth/keys/{api_key_id}
 * Operation: `get-api-key`
 * Retrieves the metadata for an API key.
 * @param {string} params.apiKeyId The API Key ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The API key metadata is retrieved. See {@link ApiKeyResponse}
 * @see 404 The {api_key_id} can't be found. (code: `api_keys.key_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getApiKeyUrl(params: { apiKeyId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/users/auth/keys/${params.apiKeyId}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/users/auth/keys/{api_key_id}
 * Operation: `delete-api-key`
 * Delete or invalidate the API key.
 * @param {string} params.apiKeyId The API Key ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The API key is deleted.
 * @see 404 The {api_key_id} can't be found. (code: `api_keys.key_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteApiKeyUrl(params: { apiKeyId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/users/auth/keys/${params.apiKeyId}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/users/auth/methods
 * Operation: `methods`
 * Provides information about available authentication methods.
 * @see 200 Available authentication methods response. See {@link AvailableAuthenticationMethods}
 * @return {string} A fully-interpolated and escaped URL
 */
export function methodsUrl(): string {
  const path = `/users/auth/methods`
  return `${getRawBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/users/auth/reauthenticate
 * Operation: `re-authenticate`
 * DEPRECATED (Scheduled to be removed in the next major version): Re-authenticate.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link ReAuthenticationRequest}
 * @see 200 The authentication is successful and token is returned in the body of the response. See {@link ReAuthenticationResponse}
 * @see 400 The request is invalid. Specify a different request, then try again. (code: `api_keys.invalid_re_auth_credentials`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function reAuthenticateUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/users/auth/reauthenticate`
  return `${getBasePath()}${path}`
}

/**
 * POST /api/v1/regions/{region_id}/users/auth/saml/_callback
 * Operation: `saml-callback`
 * Accepts a callback request from an identity provider and authenticates the user.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see Accepts a request payload of type {@link string}
 * @see Accepts an optional request payload of type {@link string}
 * @see 302 Redirects to the UI endpoint with an authorization token in the fragment and the relay state, if it was specified during the initialization.
 * @see 401 The supplied SAML response is invalid. (code: `root.unauthenticated`). See {@link BasicFailedReply}
 * @see 501 The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`). See {@link BasicFailedReply}
 * @see 502 The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function samlCallbackUrl(params: { regionId: string }): string {
  const path = encode`/${params.regionId}/users/auth/saml/_callback`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/users/auth/saml/_init
 * Operation: `saml-init`
 * Calls the authentication cluster to initiate SAML Single Sign-on (Web Browser SSO profile) protocol and redirects the user to the identity provider for authentication. The authentication cluster must be configured prior to initiation.
 * @param {string} params.state An optional relay state that is sent back to the client after the user is authenticated.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 302 Redirects the client to the identity provider with a SAML authentication request
 * @see 501 The administrator needs to configure the authentication cluster. (code: `authc.no_authentication_cluster`). See {@link BasicFailedReply}
 * @see 502 The authentication cluster failed to process the request. The response body contains details about the error. (code: `authc.authentication_cluster_error`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function samlInitUrl(params: { state?: string | null; regionId: string }): string {
  const queryString = buildQueryString({
    state: params.state,
  })
  const path = encode`/${params.regionId}/users/auth/saml/_init`
  return `${getBasePath()}${path}${queryString}`
}

/**
 * GET /api/v1/regions/{region_id}/users/{user_id}/auth/keys
 * Operation: `get-user-api-keys`
 * Retrieves metadata for all API keys created by the given user.
 * @param {string} params.userId The user ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The API key metadata is retrieved. See {@link ApiKeysResponse}
 * @see 404 The {user_id} can't be found. (code: `api_keys.user_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getUserApiKeysUrl(params: { userId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/users/${params.userId}/auth/keys`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/users/{user_id}/auth/keys
 * Operation: `delete-user-api-keys`
 * Delete or invalidate all of the API keys for a user.
 * @param {string} params.userId The user ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The API key is deleted.
 * @see 404 The {user_id} can't be found. (code: `api_keys.user_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteUserApiKeysUrl(params: { userId: string; regionId: string }): string {
  const path = encode`/${params.regionId}/users/${params.userId}/auth/keys`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/users/{user_id}/auth/keys/{api_key_id}
 * Operation: `get-user-api-key`
 * Retrieves the API key metadata for a user.
 * @param {string} params.userId The user ID.
 * @param {string} params.apiKeyId The API Key ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The API key metadata is retrieved. See {@link ApiKeyResponse}
 * @see 404 The {api_key_id} can't be found. (code: `api_keys.key_not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getUserApiKeyUrl(params: {
  userId: string
  apiKeyId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/users/${params.userId}/auth/keys/${params.apiKeyId}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/regions/{region_id}/users/{user_id}/auth/keys/{api_key_id}
 * Operation: `delete-user-api-key`
 * Delete or invalidate an API key for a user.
 * @param {string} params.userId The user ID.
 * @param {string} params.apiKeyId The API Key ID.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 The API key is deleted.
 * @see 404 The {api_key_id} can't be found. (code: `api_keys.key_not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteUserApiKeyUrl(params: {
  userId: string
  apiKeyId: string
  regionId: string
}): string {
  const path = encode`/${params.regionId}/users/${params.userId}/auth/keys/${params.apiKeyId}`
  return `${getBasePath()}${path}`
}

/**
 * GET /api/v1/regions/{region_id}/users/{user_name}
 * Operation: `get-user`
 * Fetches a single user.
 * @param {string} params.userName Identifier for the user.
 * @param {string} params.regionId Injected by `yarn generate-swagger-contracts`.
 * @see 200 User successfully fetched. See {@link User}
 * @see 404 User not found. (code: `user.not_found`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function getUserUrl(params: { userName: string; regionId: string }): string {
  const path = encode`/${params.regionId}/users/${params.userName}`
  return `${getBasePath()}${path}`
}

/**
 * DELETE /api/v1/users/{user_name}
 * Operation: `delete-user`
 * Deletes an existing user.
 * @param {string} params.userName Identifier for the user.
 * @see 200 User successfully deleted
 * @see 400 * The user cannot be deleted. (code: `user.restricted_deletion`)
 * External users cannot be modified. (code: `user.cannot_modify_external`)
 * Built-in users cannot be modified. (code: `user.cannot_modify`). See {@link BasicFailedReply}
 * @see 404 User not found. (code: `user.not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function deleteUserUrl(params: { userName: string }): string {
  const path = encode`/users/${params.userName}`
  return `${getRawBasePath()}${path}`
}

/**
 * PATCH /api/v1/users/{user_name}
 * Operation: `update-user`
 * Updates an existing user.
 * @param {string} params.userName Identifier for the user.
 * @see Accepts a request payload of type {@link string}
 * @see 200 User successfully updated. See {@link User}
 * @see 400 * Some of the provided roles are invalid. (code: `user.roles.invalid`)
 * Some of the provided roles are forbidden. (code: `user.roles.forbidden`)
 * Trying to set a restricted field. (code: `user.restricted_field`)
 * External users cannot be modified. (code: `user.cannot_modify_external`)
 * Built-in users cannot be modified. (code: `user.cannot_modify`). See {@link BasicFailedReply}
 * @see 404 User not found. (code: `user.not_found`). See {@link BasicFailedReply}
 * @see 449 Elevated permissions are required. (code: `root.unauthorized.rbac.elevated_permissions_required`). See {@link BasicFailedReply}
 * @return {string} A fully-interpolated and escaped URL
 */
export function updateUserUrl(params: { userName: string }): string {
  const path = encode`/users/${params.userName}`
  return `${getRawBasePath()}${path}`
}
